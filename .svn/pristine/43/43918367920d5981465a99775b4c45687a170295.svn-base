{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/01/string4.png","path":"img/01/string4.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/01/string.png","path":"img/01/string.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/01/string5.png","path":"img/01/string5.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/01/string2.png","path":"img/01/string2.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/01/string6.png","path":"img/01/string6.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/02/string.png","path":"img/02/string.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/02/string1.png","path":"img/02/string1.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/02/string2.png","path":"img/02/string2.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/01/string3.png","path":"img/01/string3.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/04/03.png","path":"img/04/03.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/04/02.png","path":"img/04/02.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/05/01.png","path":"img/05/01.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/04/05.png","path":"img/04/05.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/02/string5.jpg","path":"img/02/string5.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/04/01.png","path":"img/04/01.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/04/04.png","path":"img/04/04.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/05/02.png","path":"img/05/02.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/02/string4.png","path":"img/02/string4.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/02/string3.png","path":"img/02/string3.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/05/03.png","path":"img/05/03.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/09/01.png","path":"img/09/01.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/02/01.png","path":"img/angular/02/01.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/02/02.png","path":"img/angular/02/02.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/02/05.png","path":"img/angular/02/05.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/02/07.png","path":"img/angular/02/07.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/02/08.png","path":"img/angular/02/08.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/02/04.png","path":"img/angular/02/04.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/03/01.gif","path":"img/angular/03/01.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/03/04.gif","path":"img/angular/03/04.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/03/03.png","path":"img/angular/03/03.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/04/01.png","path":"img/angular/04/01.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/01/03.gif","path":"img/angular/01/03.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/03/05.gif","path":"img/angular/03/05.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/01/02.png","path":"img/angular/01/02.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/02/03.png","path":"img/angular/02/03.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/03/02.png","path":"img/angular/03/02.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/01/01.png","path":"img/angular/01/01.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/angular/02/06.png","path":"img/angular/02/06.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/jacman/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1482312814266},{"_id":"themes/jacman/LICENSE","hash":"d8780b41bab4b87bdd21eca444cae11af72617f4","modified":1482312814267},{"_id":"themes/jacman/README_zh.md","hash":"c7fa5c73edcdbc25aa57c12c1b3c71ebf96d2879","modified":1482312814269},{"_id":"themes/jacman/README.md","hash":"dd7b96d6c1c4dcffa61e37f76d5f0e4b4bca4d1b","modified":1482312814268},{"_id":"themes/jacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1482312814235},{"_id":"themes/jacman/.git/config","hash":"a0c483e4b50da11e2adccf627fca4e00a2e5140b","modified":1484382979387},{"_id":"themes/jacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1482312764987},{"_id":"themes/jacman/.git/packed-refs","hash":"facb04d8a7e4221a4b0b3dc3062a8ca586ade15d","modified":1482312814225},{"_id":"themes/jacman/_config.yml","hash":"74111a545a6b6336d95361a898d7cccffe49071d","modified":1483689894838},{"_id":"source/_posts/angular01.md","hash":"efaca5dd4e3d60b7595f08e65d347aa6d80bfe58","modified":1484363881661},{"_id":"source/_posts/JavaScript02.md","hash":"b344638692890e4520accc81f92c5acb97188140","modified":1487043236764},{"_id":"source/_posts/angular02.md","hash":"4c85f8266fde66941b31154909880a615da355b6","modified":1484385567055},{"_id":"themes/jacman/.git/index","hash":"12682e64092b9f3560898fb17f8b5abb77c21c2b","modified":1482312814389},{"_id":"source/_posts/hello-world.md","hash":"f2cea5aaced340f1e416a0eec74ef762e41f4bbb","modified":1483689077129},{"_id":"source/_posts/JavaScript01.md","hash":"e2bec4c50f2b758930c2a893cfa855b2f72506c4","modified":1487043212849},{"_id":"source/_posts/gitlab.md","hash":"aecc8c9ff5429a17bba69df3b776f4787bdef14d","modified":1484102361835},{"_id":"source/_posts/typescript03.md","hash":"e0b5d0a18eab0f15dde2ce8a0ab919ef0a6a95cd","modified":1483689075315},{"_id":"source/_posts/typescript05.md","hash":"6516574b33033889a5d4380d994269937f9b2079","modified":1483774567208},{"_id":"source/_posts/angular04.md","hash":"72ad7902fe578c79c573d4a4c4878b1c2a8e1b80","modified":1484904218594},{"_id":"source/_posts/typescript06.md","hash":"db6e0de28507ade4bf1b0ce83cbdc85b16dc3dc3","modified":1483775413337},{"_id":"source/_posts/typescript04.md","hash":"3cfde042acf7e36d72f7f8dbb95d3fdb91d820e0","modified":1483698253848},{"_id":"source/_posts/typescript01.md","hash":"649f6cab33909a4bb5eca7f1909598fe166f032c","modified":1483774646555},{"_id":"source/_posts/typescript07.md","hash":"735b89ccb2f0411100640dcb26179ccf071667e9","modified":1483777801103},{"_id":"source/_posts/typescript08.md","hash":"2605175c0670b9e265a5a6f067cdb2b59c6a216e","modified":1483781806343},{"_id":"source/_posts/typescript10.md","hash":"25d860245ef780d0e1abe3a85d30b7c5b208ecb6","modified":1483784146775},{"_id":"source/_posts/typescript02.md","hash":"ae992cbb7feb506c4eb709cb6a37038fc54f7146","modified":1483689058052},{"_id":"source/_posts/typescript09.md","hash":"5dca6f2d50415cd524c01087052be6bb25f0c9ef","modified":1483783454311},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1482312814301},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1482312814302},{"_id":"themes/jacman/layout/index.ejs","hash":"b832b280ec0a2b741e73a2300f219f0075c99278","modified":1482312814303},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1482312814305},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1482312814305},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1482312814306},{"_id":"themes/jacman/languages/default.yml","hash":"966be0b585cd3e3b7f0e485c896c24dfdfee423a","modified":1482312814272},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"6e1460594fa50394ac6f11fe9d39dc59478ddd0c","modified":1482312814273},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"0e7912c6505592a10efe2db1c994ccc3ebf91239","modified":1482312814274},{"_id":"themes/jacman/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1482312814307},{"_id":"themes/jacman/layout/layout.ejs","hash":"ceeb2a7410b96b81310ed9b1279f62e953b0a6ca","modified":1482312814303},{"_id":"source/_posts/angular03.md","hash":"28d5ecab500a586c147b8675cf1432df57ea1601","modified":1484552270430},{"_id":"themes/jacman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1482312764989},{"_id":"themes/jacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1482312764990},{"_id":"themes/jacman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1482312764991},{"_id":"themes/jacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1482312764990},{"_id":"themes/jacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1482312764994},{"_id":"themes/jacman/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1482312764995},{"_id":"themes/jacman/.git/logs/HEAD","hash":"a942ed800946fd2afdd05b251ae7249791dd28df","modified":1482312814243},{"_id":"themes/jacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1482312764996},{"_id":"themes/jacman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1482312764993},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"f0772c9de0431384d4e852358ee425a1cdf3ea6d","modified":1482312814276},{"_id":"themes/jacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1482312764992},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"5e1b90c8d32d1f18e49497c9bc1c9b8389e3d8c9","modified":1483687657252},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"2c1f1edfeaebaafe4265d58e0b8110e71673da40","modified":1482312814279},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"2b77ff6cbc8571cab27c3bdc4ad51a79510bbca2","modified":1482312814279},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"90502fc2f5b0a5681a6c6588a9ed6ad297e32890","modified":1482312814277},{"_id":"themes/jacman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1482312764994},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"210bb4c1ec77d998dfd93baeb4e3a0b46a925cd1","modified":1482312814281},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"c4358de4ea1372ea68ff5dc0f4257c348d516990","modified":1482312814280},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1482312814283},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"ebaec2ae044ada08825d8e8af9614821f779d3dd","modified":1482312814276},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"795435cc84c46a18e4ac597435a81f66eb86b0c4","modified":1482312814282},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"732fcd909f6dac557629206dc7e93a7083cda084","modified":1482312814291},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"5636df1f2b6a8d02986d866e3824ec60430046e6","modified":1482312814282},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"846d96ff73409b9a8b34f3cab691821096c03e1d","modified":1482312814292},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"67a55a4d94cca2db11a2636f1f2c92c208688b14","modified":1482312814293},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1482312814295},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"224d078ba1f2c33c52d5e867af71c5fe9f1bdf45","modified":1482312814294},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"2c1b9ac7666d7d5b9aaf8f33588e10451c4b7841","modified":1482312814295},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"6dcb532d02325d2a9f5fb92831401552a5540aa8","modified":1482312814296},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"bd73be669ddc47e1daab38736d1cecc3f37662e2","modified":1482312814297},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"43b1c29fea51f849ec0bf85a6d91fe0507f01503","modified":1482312814299},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1482312814298},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"c8a6fdb883be27f5e7daef6fa8899c17f51548a0","modified":1482312814297},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1482312814299},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"ff7db098608ba48752964cc67a51a04965ea927e","modified":1482312814300},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1482312814292},{"_id":"themes/jacman/source/css/style.styl","hash":"4610c477560086880acc1ba71c3a72e7c89ecdb7","modified":1482312814322},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1482312814323},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1482312814324},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1482312814325},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1482312814326},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1482312814327},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1482312814334},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1482312814335},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1482312814325},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1482312814340},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1482312814347},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1482312814345},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1482312814349},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1482312814336},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1482312814357},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1482312814339},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1482312814360},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1482312814362},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1482312814355},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1482312814372},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1482312814372},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1482312814374},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1482312814373},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1482312814377},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1482312814375},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1482312814378},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1482312814378},{"_id":"themes/jacman/source/img/logo.svg","hash":"85aa31ebe543572b4f9debd6c5f99271d89b5f30","modified":1482312814380},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1482312814382},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1482312814376},{"_id":"themes/jacman/source/js/gallery.js","hash":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1482312814383},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"28ef4346743a60c896a9ae492a544c0854904350","modified":1482312814386},{"_id":"themes/jacman/source/js/totop.js","hash":"48648ec9c86e9ab491831e5a029e6f8864934149","modified":1482312814388},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1482312814343},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1482312814354},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1482312814359},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"cd981db035ec1b6f502fca78fd394c5bd438aba1","modified":1482312814386},{"_id":"themes/jacman/.git/refs/heads/master","hash":"51d4013e66aa8b536ba9b382ed64385114d32d9a","modified":1482312814239},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"5f690e8588c8493eb9406aa68fbf1765aaff9476","modified":1482312814387},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"20349dcde9942885d5eae1c302ef26b1b8484f3f","modified":1482312814285},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"9db7847461cf8b10a9cd5434deb690c6b26af6f1","modified":1482312814286},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"c01220f0af629f9e23bf125bdc1beef8afc206ef","modified":1482312814285},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"f44918f7d9bd1525991fa9dc34dc304a3fc62133","modified":1483690159048},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"351e771b1b38244560fc52cf60d91263d3d63eef","modified":1482312814288},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"12b7360326691ebf06bea5d7ee4d54c41f64e2ec","modified":1482312814289},{"_id":"themes/jacman/.git/objects/pack/pack-a480b7f46fbe82dc16372f3231cb5d8788ae83a4.idx","hash":"a4e7dab31fa0c007ea4f2c416af1da629b4b6e2c","modified":1482312813469},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1482312814287},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"5699c270be7b28c5b2c36f453317ccd42789fd3d","modified":1482312814310},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"0bcb684376fcbf4be42d1df5dd02c395760f7ffb","modified":1482312814315},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1482312814316},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"0b7d517e12102a99be82bc1a9104bb6bfd4ca10b","modified":1482312814313},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"091512e19cfcf5bde2a699b211f99874f26587ad","modified":1482312814290},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"2c23f3f47eb768b31d4d86d56255ffb1e8bcf6c9","modified":1482312814313},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"b48360e757d501027b7dbe093859d03795476930","modified":1482312814321},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"4746783dc7993ac45d8a0e7a9d347bfe137111fe","modified":1482312814316},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"f1ae52a4f41d4cfdd66cb186b0329af904fead4f","modified":1482312814318},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"3ca7266a44240093143d0c55c74bb6daf579e298","modified":1482312814320},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"0300d7d289eceb3933c1eebf38f8d10f425c1128","modified":1482312814317},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"1f9d8c513f05790742c17fc125cb6a1ad374065a","modified":1482312814320},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1482312814329},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1482312814330},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1482312814330},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"75843d727319b1d07ad4b8c2e969036ce0d4f362","modified":1482312814318},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1482312814331},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1482312814332},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1482312814333},{"_id":"themes/jacman/source/img/01/string4.png","hash":"a01846589c3e16bed8a3d15b25455419349fbf30","modified":1482473337443},{"_id":"themes/jacman/source/img/01/string.png","hash":"5c5ee4112e16b1ce1bd5d6fc8bd6937003ab5c89","modified":1482463166205},{"_id":"themes/jacman/source/img/01/string5.png","hash":"8a20e2b275d8579f5b71b9f3b9d0b5176ad27c0b","modified":1482483019640},{"_id":"themes/jacman/source/img/01/string2.png","hash":"a4f0210533eb105f6b6e90130b689746390c82fe","modified":1482464242912},{"_id":"themes/jacman/source/img/01/string6.png","hash":"5f5e6ce62878c6bde0bc1f6f1a7816b0c1f707f7","modified":1482485369728},{"_id":"themes/jacman/source/img/02/string.png","hash":"cefc3d2b96ac23106944569042c948d9be570e5c","modified":1482718114815},{"_id":"themes/jacman/source/img/02/string1.png","hash":"a3c81d499610e8c1664926e4b3d27c416e2235dd","modified":1482718732151},{"_id":"themes/jacman/source/img/02/string2.png","hash":"f20e1a5949f510e722a4d2e5bc719139ffe724a2","modified":1482719241005},{"_id":"themes/jacman/source/img/01/string3.png","hash":"e760cccc445453ca49eaacd39022f8fdcd779922","modified":1482464440811},{"_id":"themes/jacman/source/img/04/03.png","hash":"530cbfa3e124f2bfe1a97819230fb9a3f57bcc77","modified":1483695502802},{"_id":"themes/jacman/source/img/04/02.png","hash":"2494a7375ec7b010d4b328574b6b7a8498ab3eb0","modified":1483693802498},{"_id":"themes/jacman/source/img/05/01.png","hash":"03f10fca9345225a52f6b19ef1f102293e59cdaf","modified":1483771999175},{"_id":"themes/jacman/source/img/04/05.png","hash":"77ba5657f31f361e3c2e16e2c88a6f9707cda644","modified":1483698209162},{"_id":"themes/jacman/source/img/02/string5.jpg","hash":"bce2991e0dd3f084a90155d851ba3db8f1944a07","modified":1482723225306},{"_id":"themes/jacman/source/img/04/01.png","hash":"d2b7b7b47a4cf5f7e0ad4e103d7117818235f236","modified":1483693447327},{"_id":"themes/jacman/source/img/04/04.png","hash":"072d4042c3c123055597f15117520be8cece1cb7","modified":1483695838855},{"_id":"themes/jacman/source/img/05/02.png","hash":"f3df2d5949ebbfc578cc1a43f61eba0a6657e1c7","modified":1483774158509},{"_id":"themes/jacman/source/img/04/_X}HC`6P2Y7XKZ4JKOIZW%1.png","hash":"03f10fca9345225a52f6b19ef1f102293e59cdaf","modified":1483771999175},{"_id":"themes/jacman/source/img/author.jpg","hash":"91735f4151ac2631e5cd490526f427c08b2d48fc","modified":1482313698153},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1482312814380},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1482312814352},{"_id":"themes/jacman/source/img/02/string4.png","hash":"e35c4a6388366f1854e3df799825a80f59c50490","modified":1482721248308},{"_id":"themes/jacman/source/img/02/string3.png","hash":"9a4f76d6a129688d9d27c42bd622f4ee607bb69a","modified":1482720472773},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1482312814371},{"_id":"themes/jacman/.git/logs/refs/heads/master","hash":"a942ed800946fd2afdd05b251ae7249791dd28df","modified":1482312814241},{"_id":"themes/jacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1482312814228},{"_id":"themes/jacman/source/img/05/03.png","hash":"4c2d81f8781b49bc9b8f66b003279a562c855d24","modified":1483774481903},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"d280f9ab32d7bf177adb5f7c858444cbfbac651a","modified":1482312814312},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"2aee0cdb80fce512cde66ad229b9e5ee42c0d7b4","modified":1482312814311},{"_id":"themes/jacman/source/img/09/01.png","hash":"6dc62536ec256c89577a57ebc857a1e3aa411cac","modified":1483783408942},{"_id":"themes/jacman/source/img/angular/02/01.png","hash":"56ddbae35377a0113ddbd3cd44e19a5f3fd91d41","modified":1484380609769},{"_id":"themes/jacman/source/img/angular/02/02.png","hash":"f44978a2432f92d850dd1a90d3a2048708cbcb29","modified":1484381924770},{"_id":"themes/jacman/source/img/angular/02/05.png","hash":"f0488a328a826b600d3a1dd4a28f63e88d1523d9","modified":1484382799288},{"_id":"themes/jacman/source/img/angular/02/07.png","hash":"12c6bb4cf3a7331b3a9e2d3ae6f286d3ef4efb79","modified":1484384138895},{"_id":"themes/jacman/source/img/angular/02/08.png","hash":"af9df359d5e7c2badacb41972cbe996c098da319","modified":1484384967515},{"_id":"themes/jacman/source/img/angular/02/04.png","hash":"746dd260f99ce12fd3c1ab5dd149301041767b28","modified":1484382307612},{"_id":"themes/jacman/source/img/angular/03/01.gif","hash":"5669d72c74876dee44039983590eb55d04601a4d","modified":1484386606740},{"_id":"themes/jacman/source/img/angular/03/04.gif","hash":"3b954ae6a2016aa9538b124f7f860c1034f73303","modified":1484547605225},{"_id":"themes/jacman/source/img/angular/03/03.png","hash":"4c644a5a6245aeb0ef1749d108929c22f9329b96","modified":1484546845629},{"_id":"themes/jacman/source/img/angular/04/01.png","hash":"24dff4eccd0676815ef604b612d2310fdc4b1eb3","modified":1484554608653},{"_id":"themes/jacman/source/img/angular/01/03.gif","hash":"11b6f16746e400406243ced70c54f4a219449f07","modified":1484297961118},{"_id":"themes/jacman/source/img/angular/03/05.gif","hash":"b1daf84885f303369beab4fa70ac879974deb584","modified":1484548978218},{"_id":"themes/jacman/source/img/angular/01/02.png","hash":"1b3cd245b5eebeaf587c7789e785b6945cc4f747","modified":1484294116994},{"_id":"themes/jacman/source/img/angular/02/03.png","hash":"82c853d7fc9c0bc6754cb31d5352ce2d6c5c9dea","modified":1484382181953},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/HEAD","hash":"a942ed800946fd2afdd05b251ae7249791dd28df","modified":1482312814234},{"_id":"themes/jacman/source/img/angular/03/02.png","hash":"f01e8e8c92f394fa621c3d80f641829a5c2cddf1","modified":1484388136813},{"_id":"themes/jacman/source/img/angular/01/01.png","hash":"82ee586c0817ded48dd87ee19b0368bcab66a337","modified":1484293978916},{"_id":"themes/jacman/source/img/angular/02/06.png","hash":"04f9b0a2ed50969012329822dbe457a9de82af60","modified":1484382950217},{"_id":"themes/jacman/.git/objects/pack/pack-a480b7f46fbe82dc16372f3231cb5d8788ae83a4.pack","hash":"8b281787b5f65f1910b660b970b5cb150ea685ad","modified":1482312813787}],"Category":[{"name":"-angular1.x.x","_id":"ciz7s5lmc000294undqmlu2qh"},{"name":"-JavaScript","_id":"ciz7s5lmu000694untpdeitgo"},{"name":"-TypeScript","_id":"ciz7s5lnh000e94unnlvi91rv"},{"name":"-gitlab","_id":"ciz7s5lo0000n94untcm3s5da"}],"Data":[],"Page":[],"Post":[{"title":"angualar--基本应用","_content":"## 如何使用angular中control\n在angular中，最好不好使用controller里面在嵌套controller，最好用一个服务，\n借用慕课网中老师的图片[慕课](http://www.imooc.com/video/2685)\n![](/img/angular/01/01.png)\n而我们应该这样去做，把公用的部分写在service中，然后让控制去调用它，而不是去继承\n![](/img/angular/01/02.png)\n在使用controller使用过程中的注意点\n1、不要试图去复用controller，一般一个控制器字负责一小块儿试图：其一因为一般只负责一小块儿的视图，所以复用的意义不大，还有一个就是controller里面写着大量的业务逻辑，复用后可用性也不高，并除非分的很细.\n2、最好不要在controller进行DOM操作，因为控制里面主要是写业务逻辑的，angular如果要操作DOM的话，可以封装在另外一个组件(directive),如果要操作DOM的话，将会是非常的慢的，会去渲染，重新布局，所以angular建议不直接操作DOM元素\n3、不要在controller中做数据格式化，因为angular中有比较好的表单控件\n4、不要在controller中做数据的过滤操作，因为angular中有很好的的$filter服务\n5、一般来说，controller是不会相互调用的，控制器之间的交互会通过事件进行。\n## 数据模型\n下面来看一个简单的例子\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app>\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div>\n\t\t<input ng-model=\"text\">\n\t\t<p>{{text}},world</p>\n\t</div>\n</body>\n</html>\n```\n![](/img/angular/01/03.gif)\n从上面的代码和结果中，我们可以看到页面中除了引入了angular.js外，没有引入其它的js，但是为什么我在input中输入，下面p标签的值也跟着变化呢？那是因为当如果angularjs后，js启动起来，会去找ng-app，当找到ng-app后，然后就会认为ng-app这个标签里面所有的内容都归angular去管，然后就会去找这个标签里面所有的指令，然后对该指令进行编译操作，当找到ng-model后，会把text生成数据模型，这个数据模型挂着$rootScope（根）下，只要是在这个root下都可以进访问，所以下面的{text}就可以访问了\n## 视图\n在angular里中一般会用到directive来实现视图\n首先我们在HTML页面中自定义一个标签,html代码\n```html\n\t<hello-world></hello-world>\n```\ndirective指令中的js代码\n```javascript\n\tvar app  = angular.module(\"app\",[])\n\tapp.directive(\"helloword\",function(){\n\t\treturn {\n\t\t\trestrict:'E',\n\t\t\ttemplate:\"<div>hello,world</div>\",\n\t\t\treplace:true\n\t}\n\t})\n```\n我们在HTML代码中定义了一个hello-world标签，然后用directive去实现它，在directive中第一个参数就是helloword就是对应的hello-world标签，然后把hello-world标签替换成template里面的值,所以在页面上会会看到的是 \"hello,world\"\n## $scope(我理解成作用域)\n在里面总共有两个，一个是$scope(当前controller下的作用域能够访问)，一个就是$rootScope(当前controller一下的都可以访问)，angular里面的作用域是以树形结构。在angular中有两个事件传播，一个是$emit,一个是$broadcast,emit事件是可以同级和向上传播，而broadcast是同级和向下传播，这两个事件可以详细百度一下\n下面看看最主要的$scope\n1、$scope是一个对象\n2、$scope会提供一些方法例如$watch()和$apply()\n3、$scope是表达式的执行环境（或者叫作用域）\n4、$scope是一个树形结构的，与DOM标签平行\n5、子$scope对象会继承父$scope上的属性和方法\n6、每个angular应用只有一个根$scope对象（一般位于ng-app上）\n7、$scope可以传播时间，类似DOM事件，可以向上也可以向下\n8、$scope不仅是MVC的基础，也是后面实现双数据绑定的基础\n10、可以用angular.element($0).scope()进行调试，也可以在浏览器中装一个插件进行调试\n## ng-bind 用法\n如果在网速比较慢的情况下，有时候会看到 {} 这边模型绑定的大括号，所以此时用ng-bind 话就不会让用户看到，一般在首页用ng-bind","source":"_posts/angular01.md","raw":"---\ntitle: angualar--基本应用\ncategories:\n  -angular1.x.x\n---\n## 如何使用angular中control\n在angular中，最好不好使用controller里面在嵌套controller，最好用一个服务，\n借用慕课网中老师的图片[慕课](http://www.imooc.com/video/2685)\n![](/img/angular/01/01.png)\n而我们应该这样去做，把公用的部分写在service中，然后让控制去调用它，而不是去继承\n![](/img/angular/01/02.png)\n在使用controller使用过程中的注意点\n1、不要试图去复用controller，一般一个控制器字负责一小块儿试图：其一因为一般只负责一小块儿的视图，所以复用的意义不大，还有一个就是controller里面写着大量的业务逻辑，复用后可用性也不高，并除非分的很细.\n2、最好不要在controller进行DOM操作，因为控制里面主要是写业务逻辑的，angular如果要操作DOM的话，可以封装在另外一个组件(directive),如果要操作DOM的话，将会是非常的慢的，会去渲染，重新布局，所以angular建议不直接操作DOM元素\n3、不要在controller中做数据格式化，因为angular中有比较好的表单控件\n4、不要在controller中做数据的过滤操作，因为angular中有很好的的$filter服务\n5、一般来说，controller是不会相互调用的，控制器之间的交互会通过事件进行。\n## 数据模型\n下面来看一个简单的例子\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app>\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div>\n\t\t<input ng-model=\"text\">\n\t\t<p>{{text}},world</p>\n\t</div>\n</body>\n</html>\n```\n![](/img/angular/01/03.gif)\n从上面的代码和结果中，我们可以看到页面中除了引入了angular.js外，没有引入其它的js，但是为什么我在input中输入，下面p标签的值也跟着变化呢？那是因为当如果angularjs后，js启动起来，会去找ng-app，当找到ng-app后，然后就会认为ng-app这个标签里面所有的内容都归angular去管，然后就会去找这个标签里面所有的指令，然后对该指令进行编译操作，当找到ng-model后，会把text生成数据模型，这个数据模型挂着$rootScope（根）下，只要是在这个root下都可以进访问，所以下面的{text}就可以访问了\n## 视图\n在angular里中一般会用到directive来实现视图\n首先我们在HTML页面中自定义一个标签,html代码\n```html\n\t<hello-world></hello-world>\n```\ndirective指令中的js代码\n```javascript\n\tvar app  = angular.module(\"app\",[])\n\tapp.directive(\"helloword\",function(){\n\t\treturn {\n\t\t\trestrict:'E',\n\t\t\ttemplate:\"<div>hello,world</div>\",\n\t\t\treplace:true\n\t}\n\t})\n```\n我们在HTML代码中定义了一个hello-world标签，然后用directive去实现它，在directive中第一个参数就是helloword就是对应的hello-world标签，然后把hello-world标签替换成template里面的值,所以在页面上会会看到的是 \"hello,world\"\n## $scope(我理解成作用域)\n在里面总共有两个，一个是$scope(当前controller下的作用域能够访问)，一个就是$rootScope(当前controller一下的都可以访问)，angular里面的作用域是以树形结构。在angular中有两个事件传播，一个是$emit,一个是$broadcast,emit事件是可以同级和向上传播，而broadcast是同级和向下传播，这两个事件可以详细百度一下\n下面看看最主要的$scope\n1、$scope是一个对象\n2、$scope会提供一些方法例如$watch()和$apply()\n3、$scope是表达式的执行环境（或者叫作用域）\n4、$scope是一个树形结构的，与DOM标签平行\n5、子$scope对象会继承父$scope上的属性和方法\n6、每个angular应用只有一个根$scope对象（一般位于ng-app上）\n7、$scope可以传播时间，类似DOM事件，可以向上也可以向下\n8、$scope不仅是MVC的基础，也是后面实现双数据绑定的基础\n10、可以用angular.element($0).scope()进行调试，也可以在浏览器中装一个插件进行调试\n## ng-bind 用法\n如果在网速比较慢的情况下，有时候会看到 {} 这边模型绑定的大括号，所以此时用ng-bind 话就不会让用户看到，一般在首页用ng-bind","slug":"angular01","published":1,"date":"2017-02-09T03:25:20.779Z","updated":"2017-01-14T03:18:01.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lm0000094ungz19ah72","content":"<h2 id=\"如何使用angular中control\"><a href=\"#如何使用angular中control\" class=\"headerlink\" title=\"如何使用angular中control\"></a>如何使用angular中control</h2><p>在angular中，最好不好使用controller里面在嵌套controller，最好用一个服务，<br>借用慕课网中老师的图片<a href=\"http://www.imooc.com/video/2685\" target=\"_blank\" rel=\"external\">慕课</a><br><img src=\"/img/angular/01/01.png\" alt=\"\"><br>而我们应该这样去做，把公用的部分写在service中，然后让控制去调用它，而不是去继承<br><img src=\"/img/angular/01/02.png\" alt=\"\"><br>在使用controller使用过程中的注意点<br>1、不要试图去复用controller，一般一个控制器字负责一小块儿试图：其一因为一般只负责一小块儿的视图，所以复用的意义不大，还有一个就是controller里面写着大量的业务逻辑，复用后可用性也不高，并除非分的很细.<br>2、最好不要在controller进行DOM操作，因为控制里面主要是写业务逻辑的，angular如果要操作DOM的话，可以封装在另外一个组件(directive),如果要操作DOM的话，将会是非常的慢的，会去渲染，重新布局，所以angular建议不直接操作DOM元素<br>3、不要在controller中做数据格式化，因为angular中有比较好的表单控件<br>4、不要在controller中做数据的过滤操作，因为angular中有很好的的$filter服务<br>5、一般来说，controller是不会相互调用的，控制器之间的交互会通过事件进行。</p>\n<h2 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h2><p>下面来看一个简单的例子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;text&#125;&#125;,world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/angular/01/03.gif\" alt=\"\"><br>从上面的代码和结果中，我们可以看到页面中除了引入了angular.js外，没有引入其它的js，但是为什么我在input中输入，下面p标签的值也跟着变化呢？那是因为当如果angularjs后，js启动起来，会去找ng-app，当找到ng-app后，然后就会认为ng-app这个标签里面所有的内容都归angular去管，然后就会去找这个标签里面所有的指令，然后对该指令进行编译操作，当找到ng-model后，会把text生成数据模型，这个数据模型挂着$rootScope（根）下，只要是在这个root下都可以进访问，所以下面的{text}就可以访问了</p>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>在angular里中一般会用到directive来实现视图<br>首先我们在HTML页面中自定义一个标签,html代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hello-world</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">hello-world</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>directive指令中的js代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app  = angular.module(<span class=\"string\">\"app\"</span>,[])</div><div class=\"line\">app.directive(<span class=\"string\">\"helloword\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t<span class=\"attr\">restrict</span>:<span class=\"string\">'E'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">template</span>:<span class=\"string\">\"&lt;div&gt;hello,world&lt;/div&gt;\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">replace</span>:<span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们在HTML代码中定义了一个hello-world标签，然后用directive去实现它，在directive中第一个参数就是helloword就是对应的hello-world标签，然后把hello-world标签替换成template里面的值,所以在页面上会会看到的是 “hello,world”</p>\n<h2 id=\"scope-我理解成作用域\"><a href=\"#scope-我理解成作用域\" class=\"headerlink\" title=\"$scope(我理解成作用域)\"></a>$scope(我理解成作用域)</h2><p>在里面总共有两个，一个是$scope(当前controller下的作用域能够访问)，一个就是$rootScope(当前controller一下的都可以访问)，angular里面的作用域是以树形结构。在angular中有两个事件传播，一个是$emit,一个是$broadcast,emit事件是可以同级和向上传播，而broadcast是同级和向下传播，这两个事件可以详细百度一下<br>下面看看最主要的$scope<br>1、$scope是一个对象<br>2、$scope会提供一些方法例如$watch()和$apply()<br>3、$scope是表达式的执行环境（或者叫作用域）<br>4、$scope是一个树形结构的，与DOM标签平行<br>5、子$scope对象会继承父$scope上的属性和方法<br>6、每个angular应用只有一个根$scope对象（一般位于ng-app上）<br>7、$scope可以传播时间，类似DOM事件，可以向上也可以向下<br>8、$scope不仅是MVC的基础，也是后面实现双数据绑定的基础<br>10、可以用angular.element($0).scope()进行调试，也可以在浏览器中装一个插件进行调试</p>\n<h2 id=\"ng-bind-用法\"><a href=\"#ng-bind-用法\" class=\"headerlink\" title=\"ng-bind 用法\"></a>ng-bind 用法</h2><p>如果在网速比较慢的情况下，有时候会看到 {} 这边模型绑定的大括号，所以此时用ng-bind 话就不会让用户看到，一般在首页用ng-bind</p>\n","excerpt":"","more":"<h2 id=\"如何使用angular中control\"><a href=\"#如何使用angular中control\" class=\"headerlink\" title=\"如何使用angular中control\"></a>如何使用angular中control</h2><p>在angular中，最好不好使用controller里面在嵌套controller，最好用一个服务，<br>借用慕课网中老师的图片<a href=\"http://www.imooc.com/video/2685\">慕课</a><br><img src=\"/img/angular/01/01.png\" alt=\"\"><br>而我们应该这样去做，把公用的部分写在service中，然后让控制去调用它，而不是去继承<br><img src=\"/img/angular/01/02.png\" alt=\"\"><br>在使用controller使用过程中的注意点<br>1、不要试图去复用controller，一般一个控制器字负责一小块儿试图：其一因为一般只负责一小块儿的视图，所以复用的意义不大，还有一个就是controller里面写着大量的业务逻辑，复用后可用性也不高，并除非分的很细.<br>2、最好不要在controller进行DOM操作，因为控制里面主要是写业务逻辑的，angular如果要操作DOM的话，可以封装在另外一个组件(directive),如果要操作DOM的话，将会是非常的慢的，会去渲染，重新布局，所以angular建议不直接操作DOM元素<br>3、不要在controller中做数据格式化，因为angular中有比较好的表单控件<br>4、不要在controller中做数据的过滤操作，因为angular中有很好的的$filter服务<br>5、一般来说，controller是不会相互调用的，控制器之间的交互会通过事件进行。</p>\n<h2 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h2><p>下面来看一个简单的例子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;text&#125;&#125;,world<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/angular/01/03.gif\" alt=\"\"><br>从上面的代码和结果中，我们可以看到页面中除了引入了angular.js外，没有引入其它的js，但是为什么我在input中输入，下面p标签的值也跟着变化呢？那是因为当如果angularjs后，js启动起来，会去找ng-app，当找到ng-app后，然后就会认为ng-app这个标签里面所有的内容都归angular去管，然后就会去找这个标签里面所有的指令，然后对该指令进行编译操作，当找到ng-model后，会把text生成数据模型，这个数据模型挂着$rootScope（根）下，只要是在这个root下都可以进访问，所以下面的{text}就可以访问了</p>\n<h2 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h2><p>在angular里中一般会用到directive来实现视图<br>首先我们在HTML页面中自定义一个标签,html代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hello-world</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">hello-world</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>directive指令中的js代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app  = angular.module(<span class=\"string\">\"app\"</span>,[])</div><div class=\"line\">app.directive(<span class=\"string\">\"helloword\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t<span class=\"attr\">restrict</span>:<span class=\"string\">'E'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">template</span>:<span class=\"string\">\"&lt;div&gt;hello,world&lt;/div&gt;\"</span>,</div><div class=\"line\">\t\t<span class=\"attr\">replace</span>:<span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>我们在HTML代码中定义了一个hello-world标签，然后用directive去实现它，在directive中第一个参数就是helloword就是对应的hello-world标签，然后把hello-world标签替换成template里面的值,所以在页面上会会看到的是 “hello,world”</p>\n<h2 id=\"scope-我理解成作用域\"><a href=\"#scope-我理解成作用域\" class=\"headerlink\" title=\"$scope(我理解成作用域)\"></a>$scope(我理解成作用域)</h2><p>在里面总共有两个，一个是$scope(当前controller下的作用域能够访问)，一个就是$rootScope(当前controller一下的都可以访问)，angular里面的作用域是以树形结构。在angular中有两个事件传播，一个是$emit,一个是$broadcast,emit事件是可以同级和向上传播，而broadcast是同级和向下传播，这两个事件可以详细百度一下<br>下面看看最主要的$scope<br>1、$scope是一个对象<br>2、$scope会提供一些方法例如$watch()和$apply()<br>3、$scope是表达式的执行环境（或者叫作用域）<br>4、$scope是一个树形结构的，与DOM标签平行<br>5、子$scope对象会继承父$scope上的属性和方法<br>6、每个angular应用只有一个根$scope对象（一般位于ng-app上）<br>7、$scope可以传播时间，类似DOM事件，可以向上也可以向下<br>8、$scope不仅是MVC的基础，也是后面实现双数据绑定的基础<br>10、可以用angular.element($0).scope()进行调试，也可以在浏览器中装一个插件进行调试</p>\n<h2 id=\"ng-bind-用法\"><a href=\"#ng-bind-用法\" class=\"headerlink\" title=\"ng-bind 用法\"></a>ng-bind 用法</h2><p>如果在网速比较慢的情况下，有时候会看到 {} 这边模型绑定的大括号，所以此时用ng-bind 话就不会让用户看到，一般在首页用ng-bind</p>\n"},{"title":"JavaScript--函数和对象的关系(01)","_content":"函数和对象的关系，我们可以通过instanceof来判断\n\n```javascript\nvar fun = function(){}\nconsole.info(fun instanceof Object) //true\n\n```\n\n函数是一种对象，但是又不像数组是对象的一种，数组就行是对象中的一个子集，但是函数跟对象的关系比较复杂，就像鸡生蛋蛋生鸡一样\n\n```javascript\nvar fun = function(){\n  this.name=\"tang quan kun\";\n  this.age = 24\n}\nvar fun1 = new fun()\n```\n我们从上面可以看出对象可以通过函数创造的，其实所有的对象都是函数创造的,但是有些人说不是这样的\n\n```javascript\nvar obj = {\n  name:\"tang quan kun \",\n  age:24\n}\nvar arr = [1,5,6]\n```\n\n上面的对象就不是通过函数来创造的,上面的只是平时一些快捷的方法进行创建，它的真实面貌其实是下面这样来的\n\n```javascript\nvar obj = new Object()\n\tobj.name = \"tang quan kun\";\n    obj.age = 24;\nvar arr = new Array()\n    arr[0] = 1\n    arr[1] = 5\n    arr[2] = 6\n```\n\n然而Object和Array又是函数类型\n\n```javascript\nconsole.info(typeof(Object))  //function\nconsole.info(typeof(Array))   //function\n```\n\n所以说对象都是通过函数来创建，但是函数又是对象，这是为什么呢？这个原因我们通过prototype原型来解释","source":"_posts/JavaScript02.md","raw":"---\ntitle: JavaScript--函数和对象的关系(01)\ncategories:\n  -JavaScript\n---\n函数和对象的关系，我们可以通过instanceof来判断\n\n```javascript\nvar fun = function(){}\nconsole.info(fun instanceof Object) //true\n\n```\n\n函数是一种对象，但是又不像数组是对象的一种，数组就行是对象中的一个子集，但是函数跟对象的关系比较复杂，就像鸡生蛋蛋生鸡一样\n\n```javascript\nvar fun = function(){\n  this.name=\"tang quan kun\";\n  this.age = 24\n}\nvar fun1 = new fun()\n```\n我们从上面可以看出对象可以通过函数创造的，其实所有的对象都是函数创造的,但是有些人说不是这样的\n\n```javascript\nvar obj = {\n  name:\"tang quan kun \",\n  age:24\n}\nvar arr = [1,5,6]\n```\n\n上面的对象就不是通过函数来创造的,上面的只是平时一些快捷的方法进行创建，它的真实面貌其实是下面这样来的\n\n```javascript\nvar obj = new Object()\n\tobj.name = \"tang quan kun\";\n    obj.age = 24;\nvar arr = new Array()\n    arr[0] = 1\n    arr[1] = 5\n    arr[2] = 6\n```\n\n然而Object和Array又是函数类型\n\n```javascript\nconsole.info(typeof(Object))  //function\nconsole.info(typeof(Array))   //function\n```\n\n所以说对象都是通过函数来创建，但是函数又是对象，这是为什么呢？这个原因我们通过prototype原型来解释","slug":"JavaScript02","published":1,"date":"2017-02-14T03:32:08.629Z","updated":"2017-02-14T03:33:56.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lm8000194un4tfr3194","content":"<p>函数和对象的关系，我们可以通过instanceof来判断</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.info(fun <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>函数是一种对象，但是又不像数组是对象的一种，数组就行是对象中的一个子集，但是函数跟对象的关系比较复杂，就像鸡生蛋蛋生鸡一样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name=<span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">24</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> fun1 = <span class=\"keyword\">new</span> fun()</div></pre></td></tr></table></figure>\n<p>我们从上面可以看出对象可以通过函数创造的，其实所有的对象都是函数创造的,但是有些人说不是这样的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">\"tang quan kun \"</span>,</div><div class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">24</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</div></pre></td></tr></table></figure>\n<p>上面的对象就不是通过函数来创造的,上面的只是平时一些快捷的方法进行创建，它的真实面貌其实是下面这样来的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</div><div class=\"line\">\tobj.name = <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\">    obj.age = <span class=\"number\">24</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>()</div><div class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">1</span></div><div class=\"line\">    arr[<span class=\"number\">1</span>] = <span class=\"number\">5</span></div><div class=\"line\">    arr[<span class=\"number\">2</span>] = <span class=\"number\">6</span></div></pre></td></tr></table></figure>\n<p>然而Object和Array又是函数类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"built_in\">Object</span>))  <span class=\"comment\">//function</span></div><div class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"built_in\">Array</span>))   <span class=\"comment\">//function</span></div></pre></td></tr></table></figure>\n<p>所以说对象都是通过函数来创建，但是函数又是对象，这是为什么呢？这个原因我们通过prototype原型来解释</p>\n","excerpt":"","more":"<p>函数和对象的关系，我们可以通过instanceof来判断</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.info(fun <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>) <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>函数是一种对象，但是又不像数组是对象的一种，数组就行是对象中的一个子集，但是函数跟对象的关系比较复杂，就像鸡生蛋蛋生鸡一样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name=<span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\">  <span class=\"keyword\">this</span>.age = <span class=\"number\">24</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> fun1 = <span class=\"keyword\">new</span> fun()</div></pre></td></tr></table></figure>\n<p>我们从上面可以看出对象可以通过函数创造的，其实所有的对象都是函数创造的,但是有些人说不是这样的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">\"tang quan kun \"</span>,</div><div class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">24</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</div></pre></td></tr></table></figure>\n<p>上面的对象就不是通过函数来创造的,上面的只是平时一些快捷的方法进行创建，它的真实面貌其实是下面这样来的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</div><div class=\"line\">\tobj.name = <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\">    obj.age = <span class=\"number\">24</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>()</div><div class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">1</span></div><div class=\"line\">    arr[<span class=\"number\">1</span>] = <span class=\"number\">5</span></div><div class=\"line\">    arr[<span class=\"number\">2</span>] = <span class=\"number\">6</span></div></pre></td></tr></table></figure>\n<p>然而Object和Array又是函数类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"built_in\">Object</span>))  <span class=\"comment\">//function</span></div><div class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"built_in\">Array</span>))   <span class=\"comment\">//function</span></div></pre></td></tr></table></figure>\n<p>所以说对象都是通过函数来创建，但是函数又是对象，这是为什么呢？这个原因我们通过prototype原型来解释</p>\n"},{"title":"angualar--directive的用法","_content":"## directive的基本用法\n首先我们来看一下简单的例子\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div>\n\t\t<angular></angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nangular.module('app', []).directive('angular',function(){\n\treturn {\n\t\t restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment\n\t\t template: '<div>hello,angular</div>',\n\t\t// templateUrl: '', 这里是html的模板的路径，如果需要的文本比较长的话，可以把模板单独提出来放在一个文件中\n\t\t replace: true,\n\t\t// transclude: true,\n\t\t// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),\n\t\tlink: function($scope, iElm, iAttrs, controller) {\n\t\t\t\n\t\t}\n\t};\n});\n</script>\n</html>\n```\n在页面上的输出结果为\n![](/img/angular/02/01.png)\n在directive中，我看来详细的看一下里面配置\n1、restrict中总共有四个，分别是E表示Element（元素）、A表示Attribute(属性)、C表示Class(表示html类)、M表示Comment(注释),下面我把代码做一下相应的调整\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div>\n\t\t<angular></angular>\n\t\t<div class=\"angular\"></div>\n\t\t<div angular></div>\n\t\t<!--记住下面的注释要打空格-->\n\t\t<!-- directive:angular -->\n\t\t<div></div>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nangular.module('app', []).directive('angular',function(){\n\treturn {\n\t\t restrict: 'EACM', // E = Element, A = Attribute, C = Class, M = Comment\n\t\t template: '<div>hello,angular</div>',\n\t\t// templateUrl: '', 这里是html的模板的路径，如果需要的文本比较长的话，可以把模板单独提出来放在一个文件中\n\t\t replace: true,\n\t\t// transclude: true,\n\t\t// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),\n\t\tlink: function($scope, iElm, iAttrs, controller) {\n\t\t\t\n\t\t}\n\t};\n});\n</script>\n</html>\n```\n![](/img/angular/02/02.png)\nangular中，在restrict中最常用的是E和A这两个属性，其中C和M很少用，特别是C会产生混乱。\n2、replace属性为true时，会替换directive指向的元素;为false时将directive的内容作为子元素插入到directive指向的元素。默认为false，\n下面看看replace为false时，最后生成的文档结构\n![](/img/angular/02/03.png)\n在replace为false时，注释是没有被生成渲染出来的，\n当replace为true时，最后生成文档的样式\n![](/img/angular/02/04.png)\n3、transclude表示变换\n```html\n\t<angular>\n\t\t<div>如果我们想把这段文字和div也保存并显示出来的话，我们用replace是无法实现的，这就要要用到了transclude了</div>\n\t</angular>\n```\n下面我们来看代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div>\n\t\t<angular>\n\t\t\t<div>如果我们想把这段文字和div也保存并显示出来的话，我们用replace是无法实现的，这就要要用到了transclude了</div>\n\t\t</angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nangular.module('app', []).directive('angular',function(){\n\treturn {\n\t\t restrict: 'E', \n\t\t template: '<div>hello,angular<div ng-transclude></div></div>',\n\t\t transclude: true,\n\t\tlink: function($scope, iElm, iAttrs, controller) {\n\t\t\t\n\t\t}\n\t};\n});\n</script>\n</html>\n```\n显示出来的结果\n![](/img/angular/02/05.png)\n我们从上面的代码中可以看到，在template中有个ng-transclude，这就是把angular元素里面的值变换到这儿，然后让在页面上显示出来，从而不会被替换掉\n4、compile与link函数\n![](/img/angular/02/06.png)\n从上面这张图片中可以清楚的看出关系，一般不会自己自定义compile函数，因为那样会覆盖掉本身的compile函数，一般是写link函数\n## 指令与控制器之间的交互\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<angular>测试link函数</angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app = angular.module('app', [])\napp.controller('Ctrl', ['$scope', function($scope){\n\t$scope.text = function(){\n\t\tconsole.info(\"测试成功\")\n\t}\n}])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'E', \n\t\t link:function(scope,element,attr){\n\t\t \telement.bind(\"mouseenter\",function(){\n\t\t \t\t//scope.text() \n\t\t \t\tscope.$apply(\"text()\")\n\t\t \t})\n\t\t }\n\t};\n});\n</script>\n</html>\n```\n当鼠标移上去的时候，在控制台上打印出\n![](/img/angular/02/07.png)\n操作DOM元素最好在link函数上操作\n如果有两个angular元素呢\n```html\n\t<div ng-controller=\"Ctrl\">\n\t\t<angular>测试link函数</angular>\n\t</div>\n\t<div ng-controller=\"Ctrl2\">\n\t\t<angular>测试link2函数</angular>\n\t</div>\n```\n这样的话我们用刚开始上面的方法就不行了，就要用到指令了，下面我们来看一下代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<angular textTwo=\"text()\">测试link函数</angular>\n\t</div>\n\t<div ng-controller=\"Ctrl2\">\n\t\t<angular textTwo=\"text2()\">测试link2函数</angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app = angular.module('app', [])\napp.controller('Ctrl', ['$scope', function($scope){\n\t$scope.text = function(){\n\t\tconsole.info(\"测试成功\")\n\t}\n}])\napp.controller('Ctrl2', ['$scope', function($scope){\n\t$scope.text2= function(){\n\t\tconsole.info(\"测试2成功\")\n\t}\n}])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'E', \n\t\t link:function(scope,element,attrs){\n\t\t \telement.bind(\"mouseenter\",function(){\n\t\t \t\t//scope.text() \n\t\t \t\t//scope.$apply(\"text()\")\n\t\t \t\tscope.$apply(attrs.texttwo)//注意一下，如果属性是用驼峰法写的，调用的时候要写成的小写，列如textTwo ，在调用的时候要写成texttwo\n\t\t \t})\n\t\t }\n\t};\n});\n</script>\n</html>\n输出的结果\n\n```\n![](/img/angular/02/08.png)我们通过attrs去获取里面方法\n指令之间的交互[见慕课网大漠穷秋](http://www.imooc.com/video/3083)\n","source":"_posts/angular02.md","raw":"---\ntitle: angualar--directive的用法\ncategories:\n  -angular1.x.x\n---\n## directive的基本用法\n首先我们来看一下简单的例子\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div>\n\t\t<angular></angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nangular.module('app', []).directive('angular',function(){\n\treturn {\n\t\t restrict: 'E', // E = Element, A = Attribute, C = Class, M = Comment\n\t\t template: '<div>hello,angular</div>',\n\t\t// templateUrl: '', 这里是html的模板的路径，如果需要的文本比较长的话，可以把模板单独提出来放在一个文件中\n\t\t replace: true,\n\t\t// transclude: true,\n\t\t// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),\n\t\tlink: function($scope, iElm, iAttrs, controller) {\n\t\t\t\n\t\t}\n\t};\n});\n</script>\n</html>\n```\n在页面上的输出结果为\n![](/img/angular/02/01.png)\n在directive中，我看来详细的看一下里面配置\n1、restrict中总共有四个，分别是E表示Element（元素）、A表示Attribute(属性)、C表示Class(表示html类)、M表示Comment(注释),下面我把代码做一下相应的调整\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div>\n\t\t<angular></angular>\n\t\t<div class=\"angular\"></div>\n\t\t<div angular></div>\n\t\t<!--记住下面的注释要打空格-->\n\t\t<!-- directive:angular -->\n\t\t<div></div>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nangular.module('app', []).directive('angular',function(){\n\treturn {\n\t\t restrict: 'EACM', // E = Element, A = Attribute, C = Class, M = Comment\n\t\t template: '<div>hello,angular</div>',\n\t\t// templateUrl: '', 这里是html的模板的路径，如果需要的文本比较长的话，可以把模板单独提出来放在一个文件中\n\t\t replace: true,\n\t\t// transclude: true,\n\t\t// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn){ return function linking(scope, elm, attrs){}})),\n\t\tlink: function($scope, iElm, iAttrs, controller) {\n\t\t\t\n\t\t}\n\t};\n});\n</script>\n</html>\n```\n![](/img/angular/02/02.png)\nangular中，在restrict中最常用的是E和A这两个属性，其中C和M很少用，特别是C会产生混乱。\n2、replace属性为true时，会替换directive指向的元素;为false时将directive的内容作为子元素插入到directive指向的元素。默认为false，\n下面看看replace为false时，最后生成的文档结构\n![](/img/angular/02/03.png)\n在replace为false时，注释是没有被生成渲染出来的，\n当replace为true时，最后生成文档的样式\n![](/img/angular/02/04.png)\n3、transclude表示变换\n```html\n\t<angular>\n\t\t<div>如果我们想把这段文字和div也保存并显示出来的话，我们用replace是无法实现的，这就要要用到了transclude了</div>\n\t</angular>\n```\n下面我们来看代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div>\n\t\t<angular>\n\t\t\t<div>如果我们想把这段文字和div也保存并显示出来的话，我们用replace是无法实现的，这就要要用到了transclude了</div>\n\t\t</angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nangular.module('app', []).directive('angular',function(){\n\treturn {\n\t\t restrict: 'E', \n\t\t template: '<div>hello,angular<div ng-transclude></div></div>',\n\t\t transclude: true,\n\t\tlink: function($scope, iElm, iAttrs, controller) {\n\t\t\t\n\t\t}\n\t};\n});\n</script>\n</html>\n```\n显示出来的结果\n![](/img/angular/02/05.png)\n我们从上面的代码中可以看到，在template中有个ng-transclude，这就是把angular元素里面的值变换到这儿，然后让在页面上显示出来，从而不会被替换掉\n4、compile与link函数\n![](/img/angular/02/06.png)\n从上面这张图片中可以清楚的看出关系，一般不会自己自定义compile函数，因为那样会覆盖掉本身的compile函数，一般是写link函数\n## 指令与控制器之间的交互\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<angular>测试link函数</angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app = angular.module('app', [])\napp.controller('Ctrl', ['$scope', function($scope){\n\t$scope.text = function(){\n\t\tconsole.info(\"测试成功\")\n\t}\n}])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'E', \n\t\t link:function(scope,element,attr){\n\t\t \telement.bind(\"mouseenter\",function(){\n\t\t \t\t//scope.text() \n\t\t \t\tscope.$apply(\"text()\")\n\t\t \t})\n\t\t }\n\t};\n});\n</script>\n</html>\n```\n当鼠标移上去的时候，在控制台上打印出\n![](/img/angular/02/07.png)\n操作DOM元素最好在link函数上操作\n如果有两个angular元素呢\n```html\n\t<div ng-controller=\"Ctrl\">\n\t\t<angular>测试link函数</angular>\n\t</div>\n\t<div ng-controller=\"Ctrl2\">\n\t\t<angular>测试link2函数</angular>\n\t</div>\n```\n这样的话我们用刚开始上面的方法就不行了，就要用到指令了，下面我们来看一下代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<angular textTwo=\"text()\">测试link函数</angular>\n\t</div>\n\t<div ng-controller=\"Ctrl2\">\n\t\t<angular textTwo=\"text2()\">测试link2函数</angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app = angular.module('app', [])\napp.controller('Ctrl', ['$scope', function($scope){\n\t$scope.text = function(){\n\t\tconsole.info(\"测试成功\")\n\t}\n}])\napp.controller('Ctrl2', ['$scope', function($scope){\n\t$scope.text2= function(){\n\t\tconsole.info(\"测试2成功\")\n\t}\n}])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'E', \n\t\t link:function(scope,element,attrs){\n\t\t \telement.bind(\"mouseenter\",function(){\n\t\t \t\t//scope.text() \n\t\t \t\t//scope.$apply(\"text()\")\n\t\t \t\tscope.$apply(attrs.texttwo)//注意一下，如果属性是用驼峰法写的，调用的时候要写成的小写，列如textTwo ，在调用的时候要写成texttwo\n\t\t \t})\n\t\t }\n\t};\n});\n</script>\n</html>\n输出的结果\n\n```\n![](/img/angular/02/08.png)我们通过attrs去获取里面方法\n指令之间的交互[见慕课网大漠穷秋](http://www.imooc.com/video/3083)\n","slug":"angular02","published":1,"date":"2017-02-09T03:25:20.782Z","updated":"2017-01-14T09:19:27.055Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lmg000394unpzc6hslg","content":"<h2 id=\"directive的基本用法\"><a href=\"#directive的基本用法\" class=\"headerlink\" title=\"directive的基本用法\"></a>directive的基本用法</h2><p>首先我们来看一下简单的例子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">angular.module(<span class=\"string\">'app'</span>, []).directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'E'</span>, <span class=\"comment\">// E = Element, A = Attribute, C = Class, M = Comment</span></div><div class=\"line\">\t\t template: <span class=\"string\">'&lt;div&gt;hello,angular&lt;/div&gt;'</span>,</div><div class=\"line\">\t\t<span class=\"comment\">// templateUrl: '', 这里是html的模板的路径，如果需要的文本比较长的话，可以把模板单独提出来放在一个文件中</span></div><div class=\"line\">\t\t replace: <span class=\"literal\">true</span>,</div><div class=\"line\">\t\t<span class=\"comment\">// transclude: true,</span></div><div class=\"line\">\t\t<span class=\"comment\">// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn)&#123; return function linking(scope, elm, attrs)&#123;&#125;&#125;)),</span></div><div class=\"line\">\t\tlink: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, iElm, iAttrs, controller</span>) </span>&#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在页面上的输出结果为<br><img src=\"/img/angular/02/01.png\" alt=\"\"><br>在directive中，我看来详细的看一下里面配置<br>1、restrict中总共有四个，分别是E表示Element（元素）、A表示Attribute(属性)、C表示Class(表示html类)、M表示Comment(注释),下面我把代码做一下相应的调整<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"angular\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--记住下面的注释要打空格--&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- directive:angular --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">angular.module(<span class=\"string\">'app'</span>, []).directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'EACM'</span>, <span class=\"comment\">// E = Element, A = Attribute, C = Class, M = Comment</span></div><div class=\"line\">\t\t template: <span class=\"string\">'&lt;div&gt;hello,angular&lt;/div&gt;'</span>,</div><div class=\"line\">\t\t<span class=\"comment\">// templateUrl: '', 这里是html的模板的路径，如果需要的文本比较长的话，可以把模板单独提出来放在一个文件中</span></div><div class=\"line\">\t\t replace: <span class=\"literal\">true</span>,</div><div class=\"line\">\t\t<span class=\"comment\">// transclude: true,</span></div><div class=\"line\">\t\t<span class=\"comment\">// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn)&#123; return function linking(scope, elm, attrs)&#123;&#125;&#125;)),</span></div><div class=\"line\">\t\tlink: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, iElm, iAttrs, controller</span>) </span>&#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/angular/02/02.png\" alt=\"\"><br>angular中，在restrict中最常用的是E和A这两个属性，其中C和M很少用，特别是C会产生混乱。<br>2、replace属性为true时，会替换directive指向的元素;为false时将directive的内容作为子元素插入到directive指向的元素。默认为false，<br>下面看看replace为false时，最后生成的文档结构<br><img src=\"/img/angular/02/03.png\" alt=\"\"><br>在replace为false时，注释是没有被生成渲染出来的，<br>当replace为true时，最后生成文档的样式<br><img src=\"/img/angular/02/04.png\" alt=\"\"><br>3、transclude表示变换<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>如果我们想把这段文字和div也保存并显示出来的话，我们用replace是无法实现的，这就要要用到了transclude了<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>下面我们来看代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>如果我们想把这段文字和div也保存并显示出来的话，我们用replace是无法实现的，这就要要用到了transclude了<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">angular.module(<span class=\"string\">'app'</span>, []).directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'E'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;hello,angular&lt;div ng-transclude&gt;&lt;/div&gt;&lt;/div&gt;'</span>,</div><div class=\"line\">\t\t <span class=\"attr\">transclude</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">\t\t<span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, iElm, iAttrs, controller</span>) </span>&#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>显示出来的结果<br><img src=\"/img/angular/02/05.png\" alt=\"\"><br>我们从上面的代码中可以看到，在template中有个ng-transclude，这就是把angular元素里面的值变换到这儿，然后让在页面上显示出来，从而不会被替换掉<br>4、compile与link函数<br><img src=\"/img/angular/02/06.png\" alt=\"\"><br>从上面这张图片中可以清楚的看出关系，一般不会自己自定义compile函数，因为那样会覆盖掉本身的compile函数，一般是写link函数</p>\n<h2 id=\"指令与控制器之间的交互\"><a href=\"#指令与控制器之间的交互\" class=\"headerlink\" title=\"指令与控制器之间的交互\"></a>指令与控制器之间的交互</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span>测试link函数<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.text = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"测试成功\"</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'E'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">link</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope,element,attr</span>)</span>&#123;</div><div class=\"line\">\t\t \telement.bind(<span class=\"string\">\"mouseenter\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t \t\t<span class=\"comment\">//scope.text() </span></div><div class=\"line\">\t\t \t\tscope.$apply(<span class=\"string\">\"text()\"</span>)</div><div class=\"line\">\t\t \t&#125;)</div><div class=\"line\">\t\t &#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当鼠标移上去的时候，在控制台上打印出<br><img src=\"/img/angular/02/07.png\" alt=\"\"><br>操作DOM元素最好在link函数上操作<br>如果有两个angular元素呢<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span>测试link函数<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl2\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span>测试link2函数<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样的话我们用刚开始上面的方法就不行了，就要用到指令了，下面我们来看一下代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">textTwo</span>=<span class=\"string\">\"text()\"</span>&gt;</span>测试link函数<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl2\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">textTwo</span>=<span class=\"string\">\"text2()\"</span>&gt;</span>测试link2函数<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.text = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"测试成功\"</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl2'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.text2= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"测试2成功\"</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'E'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">link</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope,element,attrs</span>)</span>&#123;</div><div class=\"line\">\t\t \telement.bind(<span class=\"string\">\"mouseenter\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t \t\t<span class=\"comment\">//scope.text() </span></div><div class=\"line\">\t\t \t\t<span class=\"comment\">//scope.$apply(\"text()\")</span></div><div class=\"line\">\t\t \t\tscope.$apply(attrs.texttwo)<span class=\"comment\">//注意一下，如果属性是用驼峰法写的，调用的时候要写成的小写，列如textTwo ，在调用的时候要写成texttwo</span></div><div class=\"line\">\t\t \t&#125;)</div><div class=\"line\">\t\t &#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">输出的结果</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/angular/02/08.png\" alt=\"\">我们通过attrs去获取里面方法<br>指令之间的交互<a href=\"http://www.imooc.com/video/3083\" target=\"_blank\" rel=\"external\">见慕课网大漠穷秋</a></p>\n","excerpt":"","more":"<h2 id=\"directive的基本用法\"><a href=\"#directive的基本用法\" class=\"headerlink\" title=\"directive的基本用法\"></a>directive的基本用法</h2><p>首先我们来看一下简单的例子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">angular.module(<span class=\"string\">'app'</span>, []).directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'E'</span>, <span class=\"comment\">// E = Element, A = Attribute, C = Class, M = Comment</span></div><div class=\"line\">\t\t template: <span class=\"string\">'&lt;div&gt;hello,angular&lt;/div&gt;'</span>,</div><div class=\"line\">\t\t<span class=\"comment\">// templateUrl: '', 这里是html的模板的路径，如果需要的文本比较长的话，可以把模板单独提出来放在一个文件中</span></div><div class=\"line\">\t\t replace: <span class=\"literal\">true</span>,</div><div class=\"line\">\t\t<span class=\"comment\">// transclude: true,</span></div><div class=\"line\">\t\t<span class=\"comment\">// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn)&#123; return function linking(scope, elm, attrs)&#123;&#125;&#125;)),</span></div><div class=\"line\">\t\tlink: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, iElm, iAttrs, controller</span>) </span>&#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>在页面上的输出结果为<br><img src=\"/img/angular/02/01.png\" alt=\"\"><br>在directive中，我看来详细的看一下里面配置<br>1、restrict中总共有四个，分别是E表示Element（元素）、A表示Attribute(属性)、C表示Class(表示html类)、M表示Comment(注释),下面我把代码做一下相应的调整<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"angular\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!--记住下面的注释要打空格--&gt;</span></div><div class=\"line\">\t\t<span class=\"comment\">&lt;!-- directive:angular --&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">angular.module(<span class=\"string\">'app'</span>, []).directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'EACM'</span>, <span class=\"comment\">// E = Element, A = Attribute, C = Class, M = Comment</span></div><div class=\"line\">\t\t template: <span class=\"string\">'&lt;div&gt;hello,angular&lt;/div&gt;'</span>,</div><div class=\"line\">\t\t<span class=\"comment\">// templateUrl: '', 这里是html的模板的路径，如果需要的文本比较长的话，可以把模板单独提出来放在一个文件中</span></div><div class=\"line\">\t\t replace: <span class=\"literal\">true</span>,</div><div class=\"line\">\t\t<span class=\"comment\">// transclude: true,</span></div><div class=\"line\">\t\t<span class=\"comment\">// compile: function(tElement, tAttrs, function transclude(function(scope, cloneLinkingFn)&#123; return function linking(scope, elm, attrs)&#123;&#125;&#125;)),</span></div><div class=\"line\">\t\tlink: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, iElm, iAttrs, controller</span>) </span>&#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/angular/02/02.png\" alt=\"\"><br>angular中，在restrict中最常用的是E和A这两个属性，其中C和M很少用，特别是C会产生混乱。<br>2、replace属性为true时，会替换directive指向的元素;为false时将directive的内容作为子元素插入到directive指向的元素。默认为false，<br>下面看看replace为false时，最后生成的文档结构<br><img src=\"/img/angular/02/03.png\" alt=\"\"><br>在replace为false时，注释是没有被生成渲染出来的，<br>当replace为true时，最后生成文档的样式<br><img src=\"/img/angular/02/04.png\" alt=\"\"><br>3、transclude表示变换<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>如果我们想把这段文字和div也保存并显示出来的话，我们用replace是无法实现的，这就要要用到了transclude了<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>下面我们来看代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>如果我们想把这段文字和div也保存并显示出来的话，我们用replace是无法实现的，这就要要用到了transclude了<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">angular.module(<span class=\"string\">'app'</span>, []).directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'E'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">template</span>: <span class=\"string\">'&lt;div&gt;hello,angular&lt;div ng-transclude&gt;&lt;/div&gt;&lt;/div&gt;'</span>,</div><div class=\"line\">\t\t <span class=\"attr\">transclude</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">\t\t<span class=\"attr\">link</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, iElm, iAttrs, controller</span>) </span>&#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>显示出来的结果<br><img src=\"/img/angular/02/05.png\" alt=\"\"><br>我们从上面的代码中可以看到，在template中有个ng-transclude，这就是把angular元素里面的值变换到这儿，然后让在页面上显示出来，从而不会被替换掉<br>4、compile与link函数<br><img src=\"/img/angular/02/06.png\" alt=\"\"><br>从上面这张图片中可以清楚的看出关系，一般不会自己自定义compile函数，因为那样会覆盖掉本身的compile函数，一般是写link函数</p>\n<h2 id=\"指令与控制器之间的交互\"><a href=\"#指令与控制器之间的交互\" class=\"headerlink\" title=\"指令与控制器之间的交互\"></a>指令与控制器之间的交互</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span>测试link函数<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.text = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"测试成功\"</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'E'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">link</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope,element,attr</span>)</span>&#123;</div><div class=\"line\">\t\t \telement.bind(<span class=\"string\">\"mouseenter\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t \t\t<span class=\"comment\">//scope.text() </span></div><div class=\"line\">\t\t \t\tscope.$apply(<span class=\"string\">\"text()\"</span>)</div><div class=\"line\">\t\t \t&#125;)</div><div class=\"line\">\t\t &#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>当鼠标移上去的时候，在控制台上打印出<br><img src=\"/img/angular/02/07.png\" alt=\"\"><br>操作DOM元素最好在link函数上操作<br>如果有两个angular元素呢<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span>测试link函数<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl2\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span>测试link2函数<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>这样的话我们用刚开始上面的方法就不行了，就要用到指令了，下面我们来看一下代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">textTwo</span>=<span class=\"string\">\"text()\"</span>&gt;</span>测试link函数<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl2\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">textTwo</span>=<span class=\"string\">\"text2()\"</span>&gt;</span>测试link2函数<span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.text = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"测试成功\"</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl2'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.text2= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"测试2成功\"</span>)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'E'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">link</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope,element,attrs</span>)</span>&#123;</div><div class=\"line\">\t\t \telement.bind(<span class=\"string\">\"mouseenter\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t \t\t<span class=\"comment\">//scope.text() </span></div><div class=\"line\">\t\t \t\t<span class=\"comment\">//scope.$apply(\"text()\")</span></div><div class=\"line\">\t\t \t\tscope.$apply(attrs.texttwo)<span class=\"comment\">//注意一下，如果属性是用驼峰法写的，调用的时候要写成的小写，列如textTwo ，在调用的时候要写成texttwo</span></div><div class=\"line\">\t\t \t&#125;)</div><div class=\"line\">\t\t &#125;</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">输出的结果</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/angular/02/08.png\" alt=\"\">我们通过attrs去获取里面方法<br>指令之间的交互<a href=\"http://www.imooc.com/video/3083\">见慕课网大漠穷秋</a></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories:\n  -TypeScript\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-02-09T03:25:20.797Z","updated":"2017-01-06T07:51:17.129Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lmj000494unsazaar6q","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"JavaScript--对象(01)","_content":"1、“一切都是对象”,在js中\"一切都是对象\"，并不是所有都是对象，值类型就不是对象\n\n下面我们通过typeof函数输出所有的类型\n\n```javascript\nconsole.info(typeof(x))    //undefined\n\n  console.info(typeof(true))   //boolean\n\n  console.info(typeof(\"hyData\")) //string\n\n  console.info(typeof(100))   //number\n\n  console.info(typeof(function(){}))  //function\n\n  console.info(typeof([1,2,3,5,6]))   //object\n\n  console.info(typeof({\"name\":\"hy\",\"age\":4}))  //object\n \n  console.info(typeof(null))     //object\n\n  console.info(typeof(new Number(10)))   //object\n```\n\n其中string number boolean undefined 是值类型，其余都是对象，都是引用类型 ，\n\n[​值类型和引用类型的区别]: http://www.cnblogs.com/lxq1990/archive/2012/11/04/2754226.html\n\n\n\n值类型与引用类型的区别，我们以连锁店和连锁店钥匙来理解\n\n（1）值类型：变量的交换等于在一个新的地方安装总店的规范开了一个连锁店，各自经验互不影响\n\ndemo\n\n```javascript\nvar str1 = \"tang quan kun\";\nvar str2 = str1;\nstr1=\"tqk\"\nconsole.info(str2) //tang quan kun\n```\n\n把一个值类型str1的值传给str2时，实际上是个str2分配了一个地址和内存，所以改变str1的值时，str2不受影响\n\n（2）引用类型：变量的交换等同于一个店在配了一把钥匙给老板娘，老板跟老板娘共同管理这家店，相互之间会有影响\n\ndemo\n\n```javascript\nvar obj1 ={\n  \"name\":\"tang quan kun\",\n  \"age\":24\n} \nvar obj2 = obj1\nconsole.info(obj2.name)  //tang quan kun\nobj1.name = \"tqk\"\nconsole.info(obj2.name)   //tqk\n```\n\n从上面可以看出，只要是改变了obj1后，obj2也会跟着改变，那是因为在obj2 = obj1时，没有给obj2开辟一个空间，而是把obj2指向了obj1\n\n如果要判读一个值类型为什么类型用typeof判读，如果判读一个引用类型为什么类型用instanceof进行判断\n\n```javascript\n  var fun = function(){} ;\n  console.info(fun instanceof Function )  //true\n  console.info(fun instanceof Object )    //true\n```\n\n2、对象就是若干属性的集合，js不像java或者c++那样要new一个class出来，不像那么严格，js的对象可以任意的扩展 ，下面一个demo\n\n```javascript\n  var obj = {\n  \t  age:4,\n  \t  name:function(){\n  \t  \tconsole.info(\"hyData\")\n  \t  },\n  \t  other:{\n  \t  \t\"name\":\"xxx\",\n  \t  \t\"year\":2017\n  \t  }\n  }\n```\n\n其中obj是一个自定义对象，里面的name、age、other是属性，other又是一个 对象，里面有name、year属性。下面以函数为例子\n\n```javascript\n  var fn = function(){\n  \tconsole.info(\"come in\")\n  };\n  fn.name = \"hyData\";\n  fn.age = function(){\n  \tconsole.info(4)\n  };\n  fn.other ={\n  \t\"name\":\"xxx\",\n  \t\"year\":2017\n  };\n```\n\n上面的fn函数就被作为对象赋值了name、age、other属性。我们调用的时候可以以fn.other 这样调用，这样做的用处很多，例如jQuery中的get请求，$.get(...)","source":"_posts/JavaScript01.md","raw":"---\ntitle: JavaScript--对象(01)\ncategories:\n  -JavaScript\n---\n1、“一切都是对象”,在js中\"一切都是对象\"，并不是所有都是对象，值类型就不是对象\n\n下面我们通过typeof函数输出所有的类型\n\n```javascript\nconsole.info(typeof(x))    //undefined\n\n  console.info(typeof(true))   //boolean\n\n  console.info(typeof(\"hyData\")) //string\n\n  console.info(typeof(100))   //number\n\n  console.info(typeof(function(){}))  //function\n\n  console.info(typeof([1,2,3,5,6]))   //object\n\n  console.info(typeof({\"name\":\"hy\",\"age\":4}))  //object\n \n  console.info(typeof(null))     //object\n\n  console.info(typeof(new Number(10)))   //object\n```\n\n其中string number boolean undefined 是值类型，其余都是对象，都是引用类型 ，\n\n[​值类型和引用类型的区别]: http://www.cnblogs.com/lxq1990/archive/2012/11/04/2754226.html\n\n\n\n值类型与引用类型的区别，我们以连锁店和连锁店钥匙来理解\n\n（1）值类型：变量的交换等于在一个新的地方安装总店的规范开了一个连锁店，各自经验互不影响\n\ndemo\n\n```javascript\nvar str1 = \"tang quan kun\";\nvar str2 = str1;\nstr1=\"tqk\"\nconsole.info(str2) //tang quan kun\n```\n\n把一个值类型str1的值传给str2时，实际上是个str2分配了一个地址和内存，所以改变str1的值时，str2不受影响\n\n（2）引用类型：变量的交换等同于一个店在配了一把钥匙给老板娘，老板跟老板娘共同管理这家店，相互之间会有影响\n\ndemo\n\n```javascript\nvar obj1 ={\n  \"name\":\"tang quan kun\",\n  \"age\":24\n} \nvar obj2 = obj1\nconsole.info(obj2.name)  //tang quan kun\nobj1.name = \"tqk\"\nconsole.info(obj2.name)   //tqk\n```\n\n从上面可以看出，只要是改变了obj1后，obj2也会跟着改变，那是因为在obj2 = obj1时，没有给obj2开辟一个空间，而是把obj2指向了obj1\n\n如果要判读一个值类型为什么类型用typeof判读，如果判读一个引用类型为什么类型用instanceof进行判断\n\n```javascript\n  var fun = function(){} ;\n  console.info(fun instanceof Function )  //true\n  console.info(fun instanceof Object )    //true\n```\n\n2、对象就是若干属性的集合，js不像java或者c++那样要new一个class出来，不像那么严格，js的对象可以任意的扩展 ，下面一个demo\n\n```javascript\n  var obj = {\n  \t  age:4,\n  \t  name:function(){\n  \t  \tconsole.info(\"hyData\")\n  \t  },\n  \t  other:{\n  \t  \t\"name\":\"xxx\",\n  \t  \t\"year\":2017\n  \t  }\n  }\n```\n\n其中obj是一个自定义对象，里面的name、age、other是属性，other又是一个 对象，里面有name、year属性。下面以函数为例子\n\n```javascript\n  var fn = function(){\n  \tconsole.info(\"come in\")\n  };\n  fn.name = \"hyData\";\n  fn.age = function(){\n  \tconsole.info(4)\n  };\n  fn.other ={\n  \t\"name\":\"xxx\",\n  \t\"year\":2017\n  };\n```\n\n上面的fn函数就被作为对象赋值了name、age、other属性。我们调用的时候可以以fn.other 这样调用，这样做的用处很多，例如jQuery中的get请求，$.get(...)","slug":"JavaScript01","published":1,"date":"2017-02-14T03:32:08.617Z","updated":"2017-02-14T03:33:32.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lmq000594untz9fjxg2","content":"<p>1、“一切都是对象”,在js中”一切都是对象”，并不是所有都是对象，值类型就不是对象</p>\n<p>下面我们通过typeof函数输出所有的类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(x))    <span class=\"comment\">//undefined</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"literal\">true</span>))   <span class=\"comment\">//boolean</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"string\">\"hyData\"</span>)) <span class=\"comment\">//string</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"number\">100</span>))   <span class=\"comment\">//number</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;))  <span class=\"comment\">//function</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]))   <span class=\"comment\">//object</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"hy\"</span>,<span class=\"string\">\"age\"</span>:<span class=\"number\">4</span>&#125;))  <span class=\"comment\">//object</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"literal\">null</span>))     <span class=\"comment\">//object</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">10</span>)))   <span class=\"comment\">//object</span></div></pre></td></tr></table></figure>\n<p>其中string number boolean undefined 是值类型，其余都是对象，都是引用类型 ，</p>\n<p>值类型与引用类型的区别，我们以连锁店和连锁店钥匙来理解</p>\n<p>（1）值类型：变量的交换等于在一个新的地方安装总店的规范开了一个连锁店，各自经验互不影响</p>\n<p>demo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> str2 = str1;</div><div class=\"line\">str1=<span class=\"string\">\"tqk\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.info(str2) <span class=\"comment\">//tang quan kun</span></div></pre></td></tr></table></figure>\n<p>把一个值类型str1的值传给str2时，实际上是个str2分配了一个地址和内存，所以改变str1的值时，str2不受影响</p>\n<p>（2）引用类型：变量的交换等同于一个店在配了一把钥匙给老板娘，老板跟老板娘共同管理这家店，相互之间会有影响</p>\n<p>demo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj1 =&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>:<span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">  <span class=\"string\">\"age\"</span>:<span class=\"number\">24</span></div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1</div><div class=\"line\"><span class=\"built_in\">console</span>.info(obj2.name)  <span class=\"comment\">//tang quan kun</span></div><div class=\"line\">obj1.name = <span class=\"string\">\"tqk\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.info(obj2.name)   <span class=\"comment\">//tqk</span></div></pre></td></tr></table></figure>\n<p>从上面可以看出，只要是改变了obj1后，obj2也会跟着改变，那是因为在obj2 = obj1时，没有给obj2开辟一个空间，而是把obj2指向了obj1</p>\n<p>如果要判读一个值类型为什么类型用typeof判读，如果判读一个引用类型为什么类型用instanceof进行判断</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; ;</div><div class=\"line\"><span class=\"built_in\">console</span>.info(fun <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span> )  <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.info(fun <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> )    <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>2、对象就是若干属性的集合，js不像java或者c++那样要new一个class出来，不像那么严格，js的对象可以任意的扩展 ，下面一个demo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">\t  <span class=\"attr\">age</span>:<span class=\"number\">4</span>,</div><div class=\"line\">\t  <span class=\"attr\">name</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t  \t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"hyData\"</span>)</div><div class=\"line\">\t  &#125;,</div><div class=\"line\">\t  <span class=\"attr\">other</span>:&#123;</div><div class=\"line\">\t  \t<span class=\"string\">\"name\"</span>:<span class=\"string\">\"xxx\"</span>,</div><div class=\"line\">\t  \t<span class=\"string\">\"year\"</span>:<span class=\"number\">2017</span></div><div class=\"line\">\t  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中obj是一个自定义对象，里面的name、age、other是属性，other又是一个 对象，里面有name、year属性。下面以函数为例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"come in\"</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">fn.name = <span class=\"string\">\"hyData\"</span>;</div><div class=\"line\">fn.age = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.info(<span class=\"number\">4</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">fn.other =&#123;</div><div class=\"line\">\t<span class=\"string\">\"name\"</span>:<span class=\"string\">\"xxx\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"year\"</span>:<span class=\"number\">2017</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>上面的fn函数就被作为对象赋值了name、age、other属性。我们调用的时候可以以fn.other 这样调用，这样做的用处很多，例如jQuery中的get请求，$.get(…)</p>\n","excerpt":"","more":"<p>1、“一切都是对象”,在js中”一切都是对象”，并不是所有都是对象，值类型就不是对象</p>\n<p>下面我们通过typeof函数输出所有的类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(x))    <span class=\"comment\">//undefined</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"literal\">true</span>))   <span class=\"comment\">//boolean</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"string\">\"hyData\"</span>)) <span class=\"comment\">//string</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"number\">100</span>))   <span class=\"comment\">//number</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;))  <span class=\"comment\">//function</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]))   <span class=\"comment\">//object</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(&#123;<span class=\"string\">\"name\"</span>:<span class=\"string\">\"hy\"</span>,<span class=\"string\">\"age\"</span>:<span class=\"number\">4</span>&#125;))  <span class=\"comment\">//object</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"literal\">null</span>))     <span class=\"comment\">//object</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.info(<span class=\"keyword\">typeof</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">10</span>)))   <span class=\"comment\">//object</span></div></pre></td></tr></table></figure>\n<p>其中string number boolean undefined 是值类型，其余都是对象，都是引用类型 ，</p>\n<p>值类型与引用类型的区别，我们以连锁店和连锁店钥匙来理解</p>\n<p>（1）值类型：变量的交换等于在一个新的地方安装总店的规范开了一个连锁店，各自经验互不影响</p>\n<p>demo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> str2 = str1;</div><div class=\"line\">str1=<span class=\"string\">\"tqk\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.info(str2) <span class=\"comment\">//tang quan kun</span></div></pre></td></tr></table></figure>\n<p>把一个值类型str1的值传给str2时，实际上是个str2分配了一个地址和内存，所以改变str1的值时，str2不受影响</p>\n<p>（2）引用类型：变量的交换等同于一个店在配了一把钥匙给老板娘，老板跟老板娘共同管理这家店，相互之间会有影响</p>\n<p>demo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj1 =&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>:<span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">  <span class=\"string\">\"age\"</span>:<span class=\"number\">24</span></div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">var</span> obj2 = obj1</div><div class=\"line\"><span class=\"built_in\">console</span>.info(obj2.name)  <span class=\"comment\">//tang quan kun</span></div><div class=\"line\">obj1.name = <span class=\"string\">\"tqk\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.info(obj2.name)   <span class=\"comment\">//tqk</span></div></pre></td></tr></table></figure>\n<p>从上面可以看出，只要是改变了obj1后，obj2也会跟着改变，那是因为在obj2 = obj1时，没有给obj2开辟一个空间，而是把obj2指向了obj1</p>\n<p>如果要判读一个值类型为什么类型用typeof判读，如果判读一个引用类型为什么类型用instanceof进行判断</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125; ;</div><div class=\"line\"><span class=\"built_in\">console</span>.info(fun <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span> )  <span class=\"comment\">//true</span></div><div class=\"line\"><span class=\"built_in\">console</span>.info(fun <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> )    <span class=\"comment\">//true</span></div></pre></td></tr></table></figure>\n<p>2、对象就是若干属性的集合，js不像java或者c++那样要new一个class出来，不像那么严格，js的对象可以任意的扩展 ，下面一个demo</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</div><div class=\"line\">\t  <span class=\"attr\">age</span>:<span class=\"number\">4</span>,</div><div class=\"line\">\t  <span class=\"attr\">name</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t  \t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"hyData\"</span>)</div><div class=\"line\">\t  &#125;,</div><div class=\"line\">\t  <span class=\"attr\">other</span>:&#123;</div><div class=\"line\">\t  \t<span class=\"string\">\"name\"</span>:<span class=\"string\">\"xxx\"</span>,</div><div class=\"line\">\t  \t<span class=\"string\">\"year\"</span>:<span class=\"number\">2017</span></div><div class=\"line\">\t  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>其中obj是一个自定义对象，里面的name、age、other是属性，other又是一个 对象，里面有name、year属性。下面以函数为例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"come in\"</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">fn.name = <span class=\"string\">\"hyData\"</span>;</div><div class=\"line\">fn.age = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.info(<span class=\"number\">4</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\">fn.other =&#123;</div><div class=\"line\">\t<span class=\"string\">\"name\"</span>:<span class=\"string\">\"xxx\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"year\"</span>:<span class=\"number\">2017</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>上面的fn函数就被作为对象赋值了name、age、other属性。我们调用的时候可以以fn.other 这样调用，这样做的用处很多，例如jQuery中的get请求，$.get(…)</p>\n"},{"title":"gitlab在centos7上的安装及一些配置","_content":"前期的准备，centos7+虚拟机（或者真实机）,本教程介绍的是Linux的yum安装，这样会自动解决一些依赖关系\n首先安装好centos，并确定已经电脑联网\n\n1、安装gitlab\n\n在centos7上,执行以下命令，将在系统防火墙里面开放HTTP和SSH端口.在执行以下命令的时候最好更新一下yum，该gitlab是在root下面安装。\n\n    yum update\n\n然后在安装\n\n    sudo yum install curl policycoreutils openssh-server openssh-clients\n    sudo systemctl enable sshd\n    sudo systemctl start sshd\n    sudo yum install postfix\n    sudo systemctl enable postfix\n    sudo systemctl start postfix\n    sudo firewall-cmd --permanent --add-service=http\n    sudo systemctl reload firewalld\n\n2、添加GitLab仓库,并安装到服务器上\n\n    curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash\n    sudo yum install gitlab-ce\n\n3、 启动GitLab\n\n    sudo gitlab-ctl reconfigure\n\n4、使用浏览器访问GitLab\n\n首次访问GitLab,系统会让你重新设置管理员的密码,设置成功后会返回登录界面.\n\n默认的管理员账号是root,如果你想更改默认管理员账号,请输入上面设置的新密码登录系统后修改帐号名.\n\n5、gitlab创建备份\n\n使用一条命令即可创建完整的gitlab备份\n\n    gitlab-rake gitlab:backup:create\n\n使用以上命令会在/var/opt/gitlab/backups目录下创建一个名称类似为148402929020170110gitlab_backup.tar的压缩包,这个压缩包就是Gitlab整个的完整部分, 其中开头的20170110是备份创建的日期，可以进入到备份的目录下查看\n\n    cd /var/opt/gitlab/backups\n\n然后在执行\n\n    ls\n\n就可以查看你所有的备份\n\n6、gitlab修改备份文件默认目录\n\n你也可以通过修改/etc/gitlab/gitlab.rb来修改默认存放备份文件的目录\n\n    gitlab_rails['backup_path'] = '/mnt/backups'\n\n/mnt/backups修改为你想存放备份的目录即可, 修改完成之后使用gitlab-ctl reconfigure命令重载配置文件即可.\n\n7、gitlab自动备份\n\n通过通过crontab使用备份命令实现自动备份\n\n    sudo su -\n    crontab -e\n\n加入以下, 实现每天凌晨6点进行一次自动备份:\n\n    0 6 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create\n\n建议每隔几天备份，不需要每天都备份，如果数据比较重要的话，就每天自动备份\n\n8、gitlab恢复\n\n    # 停止相关数据连接服务\n    gitlab-ctl stop unicorn\n    gitlab-ctl stop sidekiq\n    \n    # 从148402929020170110编号备份中恢复\n    gitlab-rake gitlab:backup:restore BACKUP=148402929020170110\n    \n    # 启动Gitlab\n    sudo gitlab-ctl start\n\n9、gitlab迁移\n\n迁移如同备份与恢复的步骤一样, 只需要将老服务器/var/opt/gitlab/backups目录下的备份文件拷贝到新服务器上的/var/opt/gitlab/backups即可(如果你没修改过默认备份目录的话). 但是需要注意的是新服务器上的Gitlab的版本必须与创建备份时的Gitlab版本号相同. 比如新服务器安装的是最新的7.60版本的Gitlab, 那么迁移之前, 最好将老服务器的Gitlab 升级为7.60在进行备份\n\n10、gitlab服务器ip地址设置，解决仓库地址为localhost的问题\n\n修改gitlab.yml 文件的localhost的即可,进入一下文件\n\n    cd /opt/gitlab/embedded/service/gitlab-rails/config  \n\n修改gitlab.yml \n\n    vi gitlab.yml\n\n打开文件后把host:localhost改为lost:你对应的ip就行了\n\n然后重启gitlab\n\n    sudo gitlab-ctl restart  \n\n然后打开浏览器，输入ip就行行了啦\n","source":"_posts/gitlab.md","raw":"---\ntitle: gitlab在centos7上的安装及一些配置\ncategories:\n  -gitlab\n---\n前期的准备，centos7+虚拟机（或者真实机）,本教程介绍的是Linux的yum安装，这样会自动解决一些依赖关系\n首先安装好centos，并确定已经电脑联网\n\n1、安装gitlab\n\n在centos7上,执行以下命令，将在系统防火墙里面开放HTTP和SSH端口.在执行以下命令的时候最好更新一下yum，该gitlab是在root下面安装。\n\n    yum update\n\n然后在安装\n\n    sudo yum install curl policycoreutils openssh-server openssh-clients\n    sudo systemctl enable sshd\n    sudo systemctl start sshd\n    sudo yum install postfix\n    sudo systemctl enable postfix\n    sudo systemctl start postfix\n    sudo firewall-cmd --permanent --add-service=http\n    sudo systemctl reload firewalld\n\n2、添加GitLab仓库,并安装到服务器上\n\n    curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash\n    sudo yum install gitlab-ce\n\n3、 启动GitLab\n\n    sudo gitlab-ctl reconfigure\n\n4、使用浏览器访问GitLab\n\n首次访问GitLab,系统会让你重新设置管理员的密码,设置成功后会返回登录界面.\n\n默认的管理员账号是root,如果你想更改默认管理员账号,请输入上面设置的新密码登录系统后修改帐号名.\n\n5、gitlab创建备份\n\n使用一条命令即可创建完整的gitlab备份\n\n    gitlab-rake gitlab:backup:create\n\n使用以上命令会在/var/opt/gitlab/backups目录下创建一个名称类似为148402929020170110gitlab_backup.tar的压缩包,这个压缩包就是Gitlab整个的完整部分, 其中开头的20170110是备份创建的日期，可以进入到备份的目录下查看\n\n    cd /var/opt/gitlab/backups\n\n然后在执行\n\n    ls\n\n就可以查看你所有的备份\n\n6、gitlab修改备份文件默认目录\n\n你也可以通过修改/etc/gitlab/gitlab.rb来修改默认存放备份文件的目录\n\n    gitlab_rails['backup_path'] = '/mnt/backups'\n\n/mnt/backups修改为你想存放备份的目录即可, 修改完成之后使用gitlab-ctl reconfigure命令重载配置文件即可.\n\n7、gitlab自动备份\n\n通过通过crontab使用备份命令实现自动备份\n\n    sudo su -\n    crontab -e\n\n加入以下, 实现每天凌晨6点进行一次自动备份:\n\n    0 6 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create\n\n建议每隔几天备份，不需要每天都备份，如果数据比较重要的话，就每天自动备份\n\n8、gitlab恢复\n\n    # 停止相关数据连接服务\n    gitlab-ctl stop unicorn\n    gitlab-ctl stop sidekiq\n    \n    # 从148402929020170110编号备份中恢复\n    gitlab-rake gitlab:backup:restore BACKUP=148402929020170110\n    \n    # 启动Gitlab\n    sudo gitlab-ctl start\n\n9、gitlab迁移\n\n迁移如同备份与恢复的步骤一样, 只需要将老服务器/var/opt/gitlab/backups目录下的备份文件拷贝到新服务器上的/var/opt/gitlab/backups即可(如果你没修改过默认备份目录的话). 但是需要注意的是新服务器上的Gitlab的版本必须与创建备份时的Gitlab版本号相同. 比如新服务器安装的是最新的7.60版本的Gitlab, 那么迁移之前, 最好将老服务器的Gitlab 升级为7.60在进行备份\n\n10、gitlab服务器ip地址设置，解决仓库地址为localhost的问题\n\n修改gitlab.yml 文件的localhost的即可,进入一下文件\n\n    cd /opt/gitlab/embedded/service/gitlab-rails/config  \n\n修改gitlab.yml \n\n    vi gitlab.yml\n\n打开文件后把host:localhost改为lost:你对应的ip就行了\n\n然后重启gitlab\n\n    sudo gitlab-ctl restart  \n\n然后打开浏览器，输入ip就行行了啦\n","slug":"gitlab","published":1,"date":"2017-02-09T03:25:20.792Z","updated":"2017-01-11T02:39:21.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lmv000794un4wrfp2nd","content":"<p>前期的准备，centos7+虚拟机（或者真实机）,本教程介绍的是Linux的yum安装，这样会自动解决一些依赖关系<br>首先安装好centos，并确定已经电脑联网</p>\n<p>1、安装gitlab</p>\n<p>在centos7上,执行以下命令，将在系统防火墙里面开放HTTP和SSH端口.在执行以下命令的时候最好更新一下yum，该gitlab是在root下面安装。</p>\n<pre><code>yum update\n</code></pre><p>然后在安装</p>\n<pre><code>sudo yum install curl policycoreutils openssh-server openssh-clients\nsudo systemctl enable sshd\nsudo systemctl start sshd\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\nsudo firewall-cmd --permanent --add-service=http\nsudo systemctl reload firewalld\n</code></pre><p>2、添加GitLab仓库,并安装到服务器上</p>\n<pre><code>curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash\nsudo yum install gitlab-ce\n</code></pre><p>3、 启动GitLab</p>\n<pre><code>sudo gitlab-ctl reconfigure\n</code></pre><p>4、使用浏览器访问GitLab</p>\n<p>首次访问GitLab,系统会让你重新设置管理员的密码,设置成功后会返回登录界面.</p>\n<p>默认的管理员账号是root,如果你想更改默认管理员账号,请输入上面设置的新密码登录系统后修改帐号名.</p>\n<p>5、gitlab创建备份</p>\n<p>使用一条命令即可创建完整的gitlab备份</p>\n<pre><code>gitlab-rake gitlab:backup:create\n</code></pre><p>使用以上命令会在/var/opt/gitlab/backups目录下创建一个名称类似为148402929020170110gitlab_backup.tar的压缩包,这个压缩包就是Gitlab整个的完整部分, 其中开头的20170110是备份创建的日期，可以进入到备份的目录下查看</p>\n<pre><code>cd /var/opt/gitlab/backups\n</code></pre><p>然后在执行</p>\n<pre><code>ls\n</code></pre><p>就可以查看你所有的备份</p>\n<p>6、gitlab修改备份文件默认目录</p>\n<p>你也可以通过修改/etc/gitlab/gitlab.rb来修改默认存放备份文件的目录</p>\n<pre><code>gitlab_rails[&apos;backup_path&apos;] = &apos;/mnt/backups&apos;\n</code></pre><p>/mnt/backups修改为你想存放备份的目录即可, 修改完成之后使用gitlab-ctl reconfigure命令重载配置文件即可.</p>\n<p>7、gitlab自动备份</p>\n<p>通过通过crontab使用备份命令实现自动备份</p>\n<pre><code>sudo su -\ncrontab -e\n</code></pre><p>加入以下, 实现每天凌晨6点进行一次自动备份:</p>\n<pre><code>0 6 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create\n</code></pre><p>建议每隔几天备份，不需要每天都备份，如果数据比较重要的话，就每天自动备份</p>\n<p>8、gitlab恢复</p>\n<pre><code># 停止相关数据连接服务\ngitlab-ctl stop unicorn\ngitlab-ctl stop sidekiq\n\n# 从148402929020170110编号备份中恢复\ngitlab-rake gitlab:backup:restore BACKUP=148402929020170110\n\n# 启动Gitlab\nsudo gitlab-ctl start\n</code></pre><p>9、gitlab迁移</p>\n<p>迁移如同备份与恢复的步骤一样, 只需要将老服务器/var/opt/gitlab/backups目录下的备份文件拷贝到新服务器上的/var/opt/gitlab/backups即可(如果你没修改过默认备份目录的话). 但是需要注意的是新服务器上的Gitlab的版本必须与创建备份时的Gitlab版本号相同. 比如新服务器安装的是最新的7.60版本的Gitlab, 那么迁移之前, 最好将老服务器的Gitlab 升级为7.60在进行备份</p>\n<p>10、gitlab服务器ip地址设置，解决仓库地址为localhost的问题</p>\n<p>修改gitlab.yml 文件的localhost的即可,进入一下文件</p>\n<pre><code>cd /opt/gitlab/embedded/service/gitlab-rails/config  \n</code></pre><p>修改gitlab.yml </p>\n<pre><code>vi gitlab.yml\n</code></pre><p>打开文件后把host:localhost改为lost:你对应的ip就行了</p>\n<p>然后重启gitlab</p>\n<pre><code>sudo gitlab-ctl restart  \n</code></pre><p>然后打开浏览器，输入ip就行行了啦</p>\n","excerpt":"","more":"<p>前期的准备，centos7+虚拟机（或者真实机）,本教程介绍的是Linux的yum安装，这样会自动解决一些依赖关系<br>首先安装好centos，并确定已经电脑联网</p>\n<p>1、安装gitlab</p>\n<p>在centos7上,执行以下命令，将在系统防火墙里面开放HTTP和SSH端口.在执行以下命令的时候最好更新一下yum，该gitlab是在root下面安装。</p>\n<pre><code>yum update\n</code></pre><p>然后在安装</p>\n<pre><code>sudo yum install curl policycoreutils openssh-server openssh-clients\nsudo systemctl enable sshd\nsudo systemctl start sshd\nsudo yum install postfix\nsudo systemctl enable postfix\nsudo systemctl start postfix\nsudo firewall-cmd --permanent --add-service=http\nsudo systemctl reload firewalld\n</code></pre><p>2、添加GitLab仓库,并安装到服务器上</p>\n<pre><code>curl -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash\nsudo yum install gitlab-ce\n</code></pre><p>3、 启动GitLab</p>\n<pre><code>sudo gitlab-ctl reconfigure\n</code></pre><p>4、使用浏览器访问GitLab</p>\n<p>首次访问GitLab,系统会让你重新设置管理员的密码,设置成功后会返回登录界面.</p>\n<p>默认的管理员账号是root,如果你想更改默认管理员账号,请输入上面设置的新密码登录系统后修改帐号名.</p>\n<p>5、gitlab创建备份</p>\n<p>使用一条命令即可创建完整的gitlab备份</p>\n<pre><code>gitlab-rake gitlab:backup:create\n</code></pre><p>使用以上命令会在/var/opt/gitlab/backups目录下创建一个名称类似为148402929020170110gitlab_backup.tar的压缩包,这个压缩包就是Gitlab整个的完整部分, 其中开头的20170110是备份创建的日期，可以进入到备份的目录下查看</p>\n<pre><code>cd /var/opt/gitlab/backups\n</code></pre><p>然后在执行</p>\n<pre><code>ls\n</code></pre><p>就可以查看你所有的备份</p>\n<p>6、gitlab修改备份文件默认目录</p>\n<p>你也可以通过修改/etc/gitlab/gitlab.rb来修改默认存放备份文件的目录</p>\n<pre><code>gitlab_rails[&apos;backup_path&apos;] = &apos;/mnt/backups&apos;\n</code></pre><p>/mnt/backups修改为你想存放备份的目录即可, 修改完成之后使用gitlab-ctl reconfigure命令重载配置文件即可.</p>\n<p>7、gitlab自动备份</p>\n<p>通过通过crontab使用备份命令实现自动备份</p>\n<pre><code>sudo su -\ncrontab -e\n</code></pre><p>加入以下, 实现每天凌晨6点进行一次自动备份:</p>\n<pre><code>0 6 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create\n</code></pre><p>建议每隔几天备份，不需要每天都备份，如果数据比较重要的话，就每天自动备份</p>\n<p>8、gitlab恢复</p>\n<pre><code># 停止相关数据连接服务\ngitlab-ctl stop unicorn\ngitlab-ctl stop sidekiq\n\n# 从148402929020170110编号备份中恢复\ngitlab-rake gitlab:backup:restore BACKUP=148402929020170110\n\n# 启动Gitlab\nsudo gitlab-ctl start\n</code></pre><p>9、gitlab迁移</p>\n<p>迁移如同备份与恢复的步骤一样, 只需要将老服务器/var/opt/gitlab/backups目录下的备份文件拷贝到新服务器上的/var/opt/gitlab/backups即可(如果你没修改过默认备份目录的话). 但是需要注意的是新服务器上的Gitlab的版本必须与创建备份时的Gitlab版本号相同. 比如新服务器安装的是最新的7.60版本的Gitlab, 那么迁移之前, 最好将老服务器的Gitlab 升级为7.60在进行备份</p>\n<p>10、gitlab服务器ip地址设置，解决仓库地址为localhost的问题</p>\n<p>修改gitlab.yml 文件的localhost的即可,进入一下文件</p>\n<pre><code>cd /opt/gitlab/embedded/service/gitlab-rails/config  \n</code></pre><p>修改gitlab.yml </p>\n<pre><code>vi gitlab.yml\n</code></pre><p>打开文件后把host:localhost改为lost:你对应的ip就行了</p>\n<p>然后重启gitlab</p>\n<pre><code>sudo gitlab-ctl restart  \n</code></pre><p>然后打开浏览器，输入ip就行行了啦</p>\n"},{"title":"TypeScript--函数新特性(03)","_content":"Welcome to [TypeScript](http://www.typescriptlang.org/)! If you want know more , please Check [more](http://www.typescriptlang.org/) In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教\n## 第一节 Rest and Spread 操作符\n### Rest and Spread 操作符\n主要是用来声明任意数量的方法参数\n```javascript\nfunction test(...args) {\n    args.forEach(function (arg) {\n        console.log(arg)\n    })\n}\n\ntest(1, 2, 3)\n\ntest(5,6,9,7,5)\n```\n其中 ... 就是Rest and Spread 操作符,从上面的test(1, 2, 3)，test(5,6,9,7,5) 可以看出可以传多个参数进去\n![](/img/02/string.png)\n扩展，上面还有一个返过来的做法，它是es6的一个语法，目前这个版本的ts还不支持，后面估计会支持的\n![](/img/02/string1.png)\n如果用test(...args1)这种方法ts代码会报错,但是生成的js办法没有问题，我们来看一下打印出来的结果\n![](/img/02/string2.png)\n因为test函数接收a,b,c三个参数，第一次调用test()传入的是1,2两个参数,所以打印出来的是1,2, undefined ,第二次调用的时候是传入了7,8,9,10，由于test只接收三个参数，所以打印出来只有7,8,9\n## 第二节 generator函数\n### generator函数\n控制函数的执行过程，手工暂停和恢复代码执行，在es5里面，如果调用一个方法后，不能够用什么方法让这样方式执行了一般停住了，但是在后面的es6中，新增了一个关键字yield,可以实现该方法，yield就像给代码打了一个断点，代码执行到yield的时候停住了，在调用yield的时候执行下一步,由于目前的ts版本还不支持，我们用另外一个编辑器来看一下简单的例子\n![](/img/02/string3.png)\n首先我们通过\n```javascript\n\tfunction* toDo(){}\n```\n声明一个generator函数，申明generator函数很简单，只要在function后加 * 就可以了，通过上面的方法我们可以看出当第一次执行函数的时候打印出来是start。我们从toDo函数中看到有一个关键字yield，因为是申明了generator函数，所以后面调用函数的时候不能够直接toDo(),要先申明一个变量 var fun1 = toDo() 然后在fun1.next() 第一次fun1.next()的时候，函数执行到了yield然后就停住了，就不会往下面执行了，在执行一次fun1.next()就会往下一步执行。\n![](/img/02/string4.png)\n下面来一个比较复杂点儿generator函数，\n```javascript\nfunction* getPrice(stock){\n\twhile(true){\n\t\tyield Math.random()*100;\n\t}\n}\nvar priceGenerator = getPrice(\"ts\")\nvar limitPrice = 15;\nvar price = 100;\nwhile(price>limitPrice){\n\tprice = priceGenerator.next().value;\n\tconsole.log(`the generator return ${price}`)\n}\n```\n![](/img/02/string5.jpg)\n当价格price大于limitPrice就会取一次值，通过yield来控制函数执行\n## 第三节 destructuring析构表达式\n### destructuring析构表达式\n通过表达式将对象或数组拆解成任意数量的变量\n1、第一种情况\n```javascript\nfunction test() {\n    return {\n        name1: \"tang quan kun\",\n        gender: \"男\"\n    }\n}\n//es5的写法\n\nvar name1 = test().name1\nvar gender = test().gender\n\n\n//ts的析构表达式\nvar {name1,gender} = test()\n```\n注意：在var {name1,gender} = test()中，解析的var {name1,gender}中的字段名要跟test()中返回的字段名要一样，否则会报错，如果不想跟一样可以用\nvar {name2:name1,gender} = test()给name1定义一个别名\n```javascript\nfunction test() {\n    return {\n        name1: \"tang quan kun\",\n        gender: \"男\"\n    }\n}\n//es5的写法\n\nvar name1 = test().name1\nvar gender = test().gender\n\n\n//ts的析构表达式\nvar {name2:name1,gender} = test()\n```\n2、获取的是一个对象\n```javascript\nfunction test() {\n    return {\n        name1: \"tang quan kun\",\n        age:{\n            lastage: 23,\n            thisage:24\n        }\n    }\n}\nvar {name1,age:{lastage}} = test()\nconsole.log(name1)   //tang quan kun\nconsole.log(lastage) //23\n```\n3、从数组中去取值\n```javascript\nvar arry = [1, 2, 3, 4]\nvar [number1, number2] = arry\nconsole.log(number1) //1\nconsole.log(number2) //2\n```\n如果想取3和4\n```javscript\nvar arry = [1, 2, 3, 4]\nvar [ , ,number1, number2] = arry\nconsole.log(number1) //3\nconsole.log(number2) //4\n```\n如果想取1和4\n```javascript\nvar arry = [1, 2, 3, 4]\nvar [number1, , , number2] = arry\nconsole.log(number1) //1\nconsole.log(number2) //4\n```\n析构表达式结合前面的Rest and Spread 操作符\n```javascript\nvar arry = [1, 2, 3, 4]\nfunction todo([number1, number2, ...other]) {\n    console.log(number1)  //1\n    console.log(number2)  //2\n    console.log(other)   //[3,4]\n}\ntodo(arry)\n```\n把number1赋值为1 number2赋值为2 other赋值为一个数组[3,4]","source":"_posts/typescript03.md","raw":"---\ntitle: TypeScript--函数新特性(03)\ncategories:\n  -TypeScript\n---\nWelcome to [TypeScript](http://www.typescriptlang.org/)! If you want know more , please Check [more](http://www.typescriptlang.org/) In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教\n## 第一节 Rest and Spread 操作符\n### Rest and Spread 操作符\n主要是用来声明任意数量的方法参数\n```javascript\nfunction test(...args) {\n    args.forEach(function (arg) {\n        console.log(arg)\n    })\n}\n\ntest(1, 2, 3)\n\ntest(5,6,9,7,5)\n```\n其中 ... 就是Rest and Spread 操作符,从上面的test(1, 2, 3)，test(5,6,9,7,5) 可以看出可以传多个参数进去\n![](/img/02/string.png)\n扩展，上面还有一个返过来的做法，它是es6的一个语法，目前这个版本的ts还不支持，后面估计会支持的\n![](/img/02/string1.png)\n如果用test(...args1)这种方法ts代码会报错,但是生成的js办法没有问题，我们来看一下打印出来的结果\n![](/img/02/string2.png)\n因为test函数接收a,b,c三个参数，第一次调用test()传入的是1,2两个参数,所以打印出来的是1,2, undefined ,第二次调用的时候是传入了7,8,9,10，由于test只接收三个参数，所以打印出来只有7,8,9\n## 第二节 generator函数\n### generator函数\n控制函数的执行过程，手工暂停和恢复代码执行，在es5里面，如果调用一个方法后，不能够用什么方法让这样方式执行了一般停住了，但是在后面的es6中，新增了一个关键字yield,可以实现该方法，yield就像给代码打了一个断点，代码执行到yield的时候停住了，在调用yield的时候执行下一步,由于目前的ts版本还不支持，我们用另外一个编辑器来看一下简单的例子\n![](/img/02/string3.png)\n首先我们通过\n```javascript\n\tfunction* toDo(){}\n```\n声明一个generator函数，申明generator函数很简单，只要在function后加 * 就可以了，通过上面的方法我们可以看出当第一次执行函数的时候打印出来是start。我们从toDo函数中看到有一个关键字yield，因为是申明了generator函数，所以后面调用函数的时候不能够直接toDo(),要先申明一个变量 var fun1 = toDo() 然后在fun1.next() 第一次fun1.next()的时候，函数执行到了yield然后就停住了，就不会往下面执行了，在执行一次fun1.next()就会往下一步执行。\n![](/img/02/string4.png)\n下面来一个比较复杂点儿generator函数，\n```javascript\nfunction* getPrice(stock){\n\twhile(true){\n\t\tyield Math.random()*100;\n\t}\n}\nvar priceGenerator = getPrice(\"ts\")\nvar limitPrice = 15;\nvar price = 100;\nwhile(price>limitPrice){\n\tprice = priceGenerator.next().value;\n\tconsole.log(`the generator return ${price}`)\n}\n```\n![](/img/02/string5.jpg)\n当价格price大于limitPrice就会取一次值，通过yield来控制函数执行\n## 第三节 destructuring析构表达式\n### destructuring析构表达式\n通过表达式将对象或数组拆解成任意数量的变量\n1、第一种情况\n```javascript\nfunction test() {\n    return {\n        name1: \"tang quan kun\",\n        gender: \"男\"\n    }\n}\n//es5的写法\n\nvar name1 = test().name1\nvar gender = test().gender\n\n\n//ts的析构表达式\nvar {name1,gender} = test()\n```\n注意：在var {name1,gender} = test()中，解析的var {name1,gender}中的字段名要跟test()中返回的字段名要一样，否则会报错，如果不想跟一样可以用\nvar {name2:name1,gender} = test()给name1定义一个别名\n```javascript\nfunction test() {\n    return {\n        name1: \"tang quan kun\",\n        gender: \"男\"\n    }\n}\n//es5的写法\n\nvar name1 = test().name1\nvar gender = test().gender\n\n\n//ts的析构表达式\nvar {name2:name1,gender} = test()\n```\n2、获取的是一个对象\n```javascript\nfunction test() {\n    return {\n        name1: \"tang quan kun\",\n        age:{\n            lastage: 23,\n            thisage:24\n        }\n    }\n}\nvar {name1,age:{lastage}} = test()\nconsole.log(name1)   //tang quan kun\nconsole.log(lastage) //23\n```\n3、从数组中去取值\n```javascript\nvar arry = [1, 2, 3, 4]\nvar [number1, number2] = arry\nconsole.log(number1) //1\nconsole.log(number2) //2\n```\n如果想取3和4\n```javscript\nvar arry = [1, 2, 3, 4]\nvar [ , ,number1, number2] = arry\nconsole.log(number1) //3\nconsole.log(number2) //4\n```\n如果想取1和4\n```javascript\nvar arry = [1, 2, 3, 4]\nvar [number1, , , number2] = arry\nconsole.log(number1) //1\nconsole.log(number2) //4\n```\n析构表达式结合前面的Rest and Spread 操作符\n```javascript\nvar arry = [1, 2, 3, 4]\nfunction todo([number1, number2, ...other]) {\n    console.log(number1)  //1\n    console.log(number2)  //2\n    console.log(other)   //[3,4]\n}\ntodo(arry)\n```\n把number1赋值为1 number2赋值为2 other赋值为一个数组[3,4]","slug":"typescript03","published":1,"date":"2017-02-09T03:25:20.807Z","updated":"2017-01-06T07:51:15.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5ln1000994un4esb996b","content":"<p>Welcome to <a href=\"http://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">TypeScript</a>! If you want know more , please Check <a href=\"http://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">more</a> In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教</p>\n<h2 id=\"第一节-Rest-and-Spread-操作符\"><a href=\"#第一节-Rest-and-Spread-操作符\" class=\"headerlink\" title=\"第一节 Rest and Spread 操作符\"></a>第一节 Rest and Spread 操作符</h2><h3 id=\"Rest-and-Spread-操作符\"><a href=\"#Rest-and-Spread-操作符\" class=\"headerlink\" title=\"Rest and Spread 操作符\"></a>Rest and Spread 操作符</h3><p>主要是用来声明任意数量的方法参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">    args.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(arg)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">test(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">test(<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>)</div></pre></td></tr></table></figure></p>\n<p>其中 … 就是Rest and Spread 操作符,从上面的test(1, 2, 3)，test(5,6,9,7,5) 可以看出可以传多个参数进去<br><img src=\"/img/02/string.png\" alt=\"\"><br>扩展，上面还有一个返过来的做法，它是es6的一个语法，目前这个版本的ts还不支持，后面估计会支持的<br><img src=\"/img/02/string1.png\" alt=\"\"><br>如果用test(…args1)这种方法ts代码会报错,但是生成的js办法没有问题，我们来看一下打印出来的结果<br><img src=\"/img/02/string2.png\" alt=\"\"><br>因为test函数接收a,b,c三个参数，第一次调用test()传入的是1,2两个参数,所以打印出来的是1,2, undefined ,第二次调用的时候是传入了7,8,9,10，由于test只接收三个参数，所以打印出来只有7,8,9</p>\n<h2 id=\"第二节-generator函数\"><a href=\"#第二节-generator函数\" class=\"headerlink\" title=\"第二节 generator函数\"></a>第二节 generator函数</h2><h3 id=\"generator函数\"><a href=\"#generator函数\" class=\"headerlink\" title=\"generator函数\"></a>generator函数</h3><p>控制函数的执行过程，手工暂停和恢复代码执行，在es5里面，如果调用一个方法后，不能够用什么方法让这样方式执行了一般停住了，但是在后面的es6中，新增了一个关键字yield,可以实现该方法，yield就像给代码打了一个断点，代码执行到yield的时候停住了，在调用yield的时候执行下一步,由于目前的ts版本还不支持，我们用另外一个编辑器来看一下简单的例子<br><img src=\"/img/02/string3.png\" alt=\"\"><br>首先我们通过<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">toDo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>声明一个generator函数，申明generator函数很简单，只要在function后加 * 就可以了，通过上面的方法我们可以看出当第一次执行函数的时候打印出来是start。我们从toDo函数中看到有一个关键字yield，因为是申明了generator函数，所以后面调用函数的时候不能够直接toDo(),要先申明一个变量 var fun1 = toDo() 然后在fun1.next() 第一次fun1.next()的时候，函数执行到了yield然后就停住了，就不会往下面执行了，在执行一次fun1.next()就会往下一步执行。<br><img src=\"/img/02/string4.png\" alt=\"\"><br>下面来一个比较复杂点儿generator函数，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">getPrice</span>(<span class=\"params\">stock</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">yield</span> <span class=\"built_in\">Math</span>.random()*<span class=\"number\">100</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> priceGenerator = getPrice(<span class=\"string\">\"ts\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> limitPrice = <span class=\"number\">15</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> price = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">while</span>(price&gt;limitPrice)&#123;</div><div class=\"line\">\tprice = priceGenerator.next().value;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`the generator return <span class=\"subst\">$&#123;price&#125;</span>`</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/02/string5.jpg\" alt=\"\"><br>当价格price大于limitPrice就会取一次值，通过yield来控制函数执行</p>\n<h2 id=\"第三节-destructuring析构表达式\"><a href=\"#第三节-destructuring析构表达式\" class=\"headerlink\" title=\"第三节 destructuring析构表达式\"></a>第三节 destructuring析构表达式</h2><h3 id=\"destructuring析构表达式\"><a href=\"#destructuring析构表达式\" class=\"headerlink\" title=\"destructuring析构表达式\"></a>destructuring析构表达式</h3><p>通过表达式将对象或数组拆解成任意数量的变量<br>1、第一种情况<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">name1</span>: <span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">        <span class=\"attr\">gender</span>: <span class=\"string\">\"男\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//es5的写法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> name1 = test().name1</div><div class=\"line\"><span class=\"keyword\">var</span> gender = test().gender</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ts的析构表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;name1,gender&#125; = test()</div></pre></td></tr></table></figure></p>\n<p>注意：在var {name1,gender} = test()中，解析的var {name1,gender}中的字段名要跟test()中返回的字段名要一样，否则会报错，如果不想跟一样可以用<br>var {name2:name1,gender} = test()给name1定义一个别名<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">name1</span>: <span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">        <span class=\"attr\">gender</span>: <span class=\"string\">\"男\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//es5的写法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> name1 = test().name1</div><div class=\"line\"><span class=\"keyword\">var</span> gender = test().gender</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ts的析构表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">name2</span>:name1,gender&#125; = test()</div></pre></td></tr></table></figure></p>\n<p>2、获取的是一个对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">name1</span>: <span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">        <span class=\"attr\">age</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">lastage</span>: <span class=\"number\">23</span>,</div><div class=\"line\">            <span class=\"attr\">thisage</span>:<span class=\"number\">24</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;name1,<span class=\"attr\">age</span>:&#123;lastage&#125;&#125; = test()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(name1)   <span class=\"comment\">//tang quan kun</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(lastage) <span class=\"comment\">//23</span></div></pre></td></tr></table></figure></p>\n<p>3、从数组中去取值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> [number1, number2] = arry</div><div class=\"line\"><span class=\"built_in\">console</span>.log(number1) <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(number2) <span class=\"comment\">//2</span></div></pre></td></tr></table></figure></p>\n<p>如果想取3和4<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arry = [1, 2, 3, 4]</div><div class=\"line\">var [ , ,number1, number2] = arry</div><div class=\"line\">console.log(number1) //3</div><div class=\"line\">console.log(number2) //4</div></pre></td></tr></table></figure></p>\n<p>如果想取1和4<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> [number1, , , number2] = arry</div><div class=\"line\"><span class=\"built_in\">console</span>.log(number1) <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(number2) <span class=\"comment\">//4</span></div></pre></td></tr></table></figure></p>\n<p>析构表达式结合前面的Rest and Spread 操作符<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">todo</span>(<span class=\"params\">[number1, number2, ...other]</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(number1)  <span class=\"comment\">//1</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(number2)  <span class=\"comment\">//2</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(other)   <span class=\"comment\">//[3,4]</span></div><div class=\"line\">&#125;</div><div class=\"line\">todo(arry)</div></pre></td></tr></table></figure></p>\n<p>把number1赋值为1 number2赋值为2 other赋值为一个数组[3,4]</p>\n","excerpt":"","more":"<p>Welcome to <a href=\"http://www.typescriptlang.org/\">TypeScript</a>! If you want know more , please Check <a href=\"http://www.typescriptlang.org/\">more</a> In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教</p>\n<h2 id=\"第一节-Rest-and-Spread-操作符\"><a href=\"#第一节-Rest-and-Spread-操作符\" class=\"headerlink\" title=\"第一节 Rest and Spread 操作符\"></a>第一节 Rest and Spread 操作符</h2><h3 id=\"Rest-and-Spread-操作符\"><a href=\"#Rest-and-Spread-操作符\" class=\"headerlink\" title=\"Rest and Spread 操作符\"></a>Rest and Spread 操作符</h3><p>主要是用来声明任意数量的方法参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">    args.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(arg)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">test(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</div><div class=\"line\"></div><div class=\"line\">test(<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">9</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>)</div></pre></td></tr></table></figure></p>\n<p>其中 … 就是Rest and Spread 操作符,从上面的test(1, 2, 3)，test(5,6,9,7,5) 可以看出可以传多个参数进去<br><img src=\"/img/02/string.png\" alt=\"\"><br>扩展，上面还有一个返过来的做法，它是es6的一个语法，目前这个版本的ts还不支持，后面估计会支持的<br><img src=\"/img/02/string1.png\" alt=\"\"><br>如果用test(…args1)这种方法ts代码会报错,但是生成的js办法没有问题，我们来看一下打印出来的结果<br><img src=\"/img/02/string2.png\" alt=\"\"><br>因为test函数接收a,b,c三个参数，第一次调用test()传入的是1,2两个参数,所以打印出来的是1,2, undefined ,第二次调用的时候是传入了7,8,9,10，由于test只接收三个参数，所以打印出来只有7,8,9</p>\n<h2 id=\"第二节-generator函数\"><a href=\"#第二节-generator函数\" class=\"headerlink\" title=\"第二节 generator函数\"></a>第二节 generator函数</h2><h3 id=\"generator函数\"><a href=\"#generator函数\" class=\"headerlink\" title=\"generator函数\"></a>generator函数</h3><p>控制函数的执行过程，手工暂停和恢复代码执行，在es5里面，如果调用一个方法后，不能够用什么方法让这样方式执行了一般停住了，但是在后面的es6中，新增了一个关键字yield,可以实现该方法，yield就像给代码打了一个断点，代码执行到yield的时候停住了，在调用yield的时候执行下一步,由于目前的ts版本还不支持，我们用另外一个编辑器来看一下简单的例子<br><img src=\"/img/02/string3.png\" alt=\"\"><br>首先我们通过<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">toDo</span>(<span class=\"params\"></span>)</span>&#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>声明一个generator函数，申明generator函数很简单，只要在function后加 * 就可以了，通过上面的方法我们可以看出当第一次执行函数的时候打印出来是start。我们从toDo函数中看到有一个关键字yield，因为是申明了generator函数，所以后面调用函数的时候不能够直接toDo(),要先申明一个变量 var fun1 = toDo() 然后在fun1.next() 第一次fun1.next()的时候，函数执行到了yield然后就停住了，就不会往下面执行了，在执行一次fun1.next()就会往下一步执行。<br><img src=\"/img/02/string4.png\" alt=\"\"><br>下面来一个比较复杂点儿generator函数，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">getPrice</span>(<span class=\"params\">stock</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">yield</span> <span class=\"built_in\">Math</span>.random()*<span class=\"number\">100</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> priceGenerator = getPrice(<span class=\"string\">\"ts\"</span>)</div><div class=\"line\"><span class=\"keyword\">var</span> limitPrice = <span class=\"number\">15</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> price = <span class=\"number\">100</span>;</div><div class=\"line\"><span class=\"keyword\">while</span>(price&gt;limitPrice)&#123;</div><div class=\"line\">\tprice = priceGenerator.next().value;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`the generator return <span class=\"subst\">$&#123;price&#125;</span>`</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/02/string5.jpg\" alt=\"\"><br>当价格price大于limitPrice就会取一次值，通过yield来控制函数执行</p>\n<h2 id=\"第三节-destructuring析构表达式\"><a href=\"#第三节-destructuring析构表达式\" class=\"headerlink\" title=\"第三节 destructuring析构表达式\"></a>第三节 destructuring析构表达式</h2><h3 id=\"destructuring析构表达式\"><a href=\"#destructuring析构表达式\" class=\"headerlink\" title=\"destructuring析构表达式\"></a>destructuring析构表达式</h3><p>通过表达式将对象或数组拆解成任意数量的变量<br>1、第一种情况<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">name1</span>: <span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">        <span class=\"attr\">gender</span>: <span class=\"string\">\"男\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//es5的写法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> name1 = test().name1</div><div class=\"line\"><span class=\"keyword\">var</span> gender = test().gender</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ts的析构表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;name1,gender&#125; = test()</div></pre></td></tr></table></figure></p>\n<p>注意：在var {name1,gender} = test()中，解析的var {name1,gender}中的字段名要跟test()中返回的字段名要一样，否则会报错，如果不想跟一样可以用<br>var {name2:name1,gender} = test()给name1定义一个别名<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">name1</span>: <span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">        <span class=\"attr\">gender</span>: <span class=\"string\">\"男\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//es5的写法</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> name1 = test().name1</div><div class=\"line\"><span class=\"keyword\">var</span> gender = test().gender</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//ts的析构表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> &#123;<span class=\"attr\">name2</span>:name1,gender&#125; = test()</div></pre></td></tr></table></figure></p>\n<p>2、获取的是一个对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">name1</span>: <span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">        <span class=\"attr\">age</span>:&#123;</div><div class=\"line\">            <span class=\"attr\">lastage</span>: <span class=\"number\">23</span>,</div><div class=\"line\">            <span class=\"attr\">thisage</span>:<span class=\"number\">24</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> &#123;name1,<span class=\"attr\">age</span>:&#123;lastage&#125;&#125; = test()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(name1)   <span class=\"comment\">//tang quan kun</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(lastage) <span class=\"comment\">//23</span></div></pre></td></tr></table></figure></p>\n<p>3、从数组中去取值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> [number1, number2] = arry</div><div class=\"line\"><span class=\"built_in\">console</span>.log(number1) <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(number2) <span class=\"comment\">//2</span></div></pre></td></tr></table></figure></p>\n<p>如果想取3和4<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arry = [1, 2, 3, 4]</div><div class=\"line\">var [ , ,number1, number2] = arry</div><div class=\"line\">console.log(number1) //3</div><div class=\"line\">console.log(number2) //4</div></pre></td></tr></table></figure></p>\n<p>如果想取1和4<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> [number1, , , number2] = arry</div><div class=\"line\"><span class=\"built_in\">console</span>.log(number1) <span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(number2) <span class=\"comment\">//4</span></div></pre></td></tr></table></figure></p>\n<p>析构表达式结合前面的Rest and Spread 操作符<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arry = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">todo</span>(<span class=\"params\">[number1, number2, ...other]</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(number1)  <span class=\"comment\">//1</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(number2)  <span class=\"comment\">//2</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(other)   <span class=\"comment\">//[3,4]</span></div><div class=\"line\">&#125;</div><div class=\"line\">todo(arry)</div></pre></td></tr></table></figure></p>\n<p>把number1赋值为1 number2赋值为2 other赋值为一个数组[3,4]</p>\n"},{"title":"TypeScript--面向对象特性(05)-类","_content":"由于面向对象比较多，所以我这儿就分两个篇章来大致的讲一下面向对象特性，首先先讲讲类\n## 类(class)\n### 类(class) 类的定义\n类是TypeScript的核心，使用TS开发时，大部分代码都是写在类里面的，这里我们会简单的介绍一下类的定义，构造函数，以及类的继承等等\n下面我来看一下简单的一个类的定义\n```javascript\n//声明一个类\nclass Person {\n    name: string;\n    todo() {\n        console.info(\"to do somethin\")\n    }\n}\n//实例化一个类\nvar p1 = new Person()\np1.name = \"tang quan kun\"\np1.todo()\n```\n首先我们通过class实例定义一个类，然后在通过关键字new实例化一个对象，实例化就可以调用里面方法，如果大家学过c++或者java的都知道，ts中的类也有访问控制符分别是public（所有类都可以访问）、private（只有本类可以访问）、protected（当前类和子类可以访问，后面继承会讲到），想必学过java的人都知道这几个，定义类的时候，默认就是public，跟上面的代码一样，下面来看看private\n```javascript\n//声明一个类\nclass Person {\n    private name: string;\n    protected age: number;\n       todo() {\n        console.info(\"to do somethin\")\n    }\n}\n//实例化一个类\nvar p1 = new Person()\np1.name = \"tang quan kun\" //如果name为private，这样直接访问会报错，只会在本类中可以访问，\np1.age = 24 //如果age为protected,这样直接访问也会出错，只有在本类或者之类可以访问\np1.todo()  //todo为public时，所有的都可以访问  \n```\n### 构造函数\n  构造函数是类里面的一个特殊的方法，只有在类被实例化的时候会被调用，并且只调用一次，他就是constructor\n```javascript\n  //声明一个类\nclass Person {\n    private name: string;\n   //构造函数\n    constructor(name: string) {\n        this.name = name  \n    };\n       todo() {\n        console.info(this.name)\n    }\n}\nvar p1 = new Person(\"tang quan kun\")\np1.todo() // tang quan kun\n```\n这个类在被实例化的时候必要要传一个name进去，在实例化的时候就调用了constructor函数，所以后面打印出来就是 tang quan kun,在构造函数中的参数是必须要申明属性访问控制控制符的，上面的name的访问控制符为private\n```javascript\n//声明一个类\nclass Person {\n   //构造函数\n    constructor(name: string) {  //这种写法是错误的的，因为这样是没有声明name属性的，相当于类Person里面没有name属性\n        this.name = name  \n    };\n       todo() {\n        console.info(this.name)\n    }\n}\nvar p1 = new Person(\"tang quan kun\")\np1.todo()\n\n//声明一个类\nclass Person {\n   //构造函数\n    constructor(private name: string) {  //这种写法才是正确\n        this.name = name  \n    };\n       todo() {\n        console.info(this.name)\n    }\n}\nvar p1 = new Person(\"tang quan kun\")\np1.todo()\n```\n### 类的继承\n类的继承这儿设计到两个关键字那就是extends 和 super  extends 主要用来声明类的继承关系，super用来调用父类的构造方法或者函数\n1、下面我们来看一下extends,extends用来声明一种继承关系，所谓继承关系就是是的关系，下面我们来看看一个例子\n```javascript\nclass Person {\n    constructor(private name: string) {\n        this.name = name  \n    };\n       todo() {\n        console.info(this.name)\n    }\n}\n\nclass Man extends Person{\n\n}\nvar p1 = new Man(\"tang quan kun\")\np1.todo() //tang quan kun\n```\n通过上面的列子可以看出，Man类通过extends继承了类Person,Man就继承了Person中所有的方法和属性。在继承的类Man中我们可以也可以增加新的方法和属性\n![](/img/05/01.png)\n从上面的例子可以看出Man可以自己进行扩展属性和方法\n2、super的用法，super有两种用法，第一种是拿来调父类的构造函数，先看一个demo，\n```javascript\nclass Person {\n    constructor(protected name: string) {\n        this.name = name  \n        console.info(\"i an is class Person\")\n    };\n       todo() {\n        console.info(this.name)\n    }\n}\nclass Man extends Person{\n    constructor(name: string, age: number) {\n        super(name)  //运用super调用父类的构造函数\n        this.age = age\n        console.info(\"i an is class Man\")\n    }\n    age: number;\n    work() {\n    }\n}\nvar p1 = new Man(\"tang quan kun\", 24)\n```\n打印出来的结果\n![](/img/05/02.png)\n在构造Man这个类的时候会通过super调用Person类的构造方法，这是super的一个用法，另外一个用法就是用个super调用父类的方法\n```javascript\nclass Person {\n    constructor(protected name: string) {\n        this.name = name  \n        console.info(\"i an is class Person\")\n    };\n       todo() {\n        console.info(\"在Person中执行的\")\n    }\n}\nclass Man extends Person{\n    constructor(name: string, age: number) {\n        super(name)  //运用super调用父类的构造函数\n        this.age = age\n        console.info(\"i an is class Man\")\n    }\n    age: number;\n    work() {\n        super.todo()  //运用super调用父类的方法\n        this.todoafter()\n    }\n    private todoafter() {\n        console.info(\"在Man执行的\")\n    }\n}\nvar p1 = new Man(\"tang quan kun\", 24)\np1.work()\n```\n打印出来的结果\n![](/img/05/03.png)\n我们可以从上面的结果中可以看出,super的两种方法，一种是调用父类的构造方法，一种是调用父类的方法或者属性","source":"_posts/typescript05.md","raw":"---\ntitle: TypeScript--面向对象特性(05)-类\ncategories:\n  -TypeScript\n---\n由于面向对象比较多，所以我这儿就分两个篇章来大致的讲一下面向对象特性，首先先讲讲类\n## 类(class)\n### 类(class) 类的定义\n类是TypeScript的核心，使用TS开发时，大部分代码都是写在类里面的，这里我们会简单的介绍一下类的定义，构造函数，以及类的继承等等\n下面我来看一下简单的一个类的定义\n```javascript\n//声明一个类\nclass Person {\n    name: string;\n    todo() {\n        console.info(\"to do somethin\")\n    }\n}\n//实例化一个类\nvar p1 = new Person()\np1.name = \"tang quan kun\"\np1.todo()\n```\n首先我们通过class实例定义一个类，然后在通过关键字new实例化一个对象，实例化就可以调用里面方法，如果大家学过c++或者java的都知道，ts中的类也有访问控制符分别是public（所有类都可以访问）、private（只有本类可以访问）、protected（当前类和子类可以访问，后面继承会讲到），想必学过java的人都知道这几个，定义类的时候，默认就是public，跟上面的代码一样，下面来看看private\n```javascript\n//声明一个类\nclass Person {\n    private name: string;\n    protected age: number;\n       todo() {\n        console.info(\"to do somethin\")\n    }\n}\n//实例化一个类\nvar p1 = new Person()\np1.name = \"tang quan kun\" //如果name为private，这样直接访问会报错，只会在本类中可以访问，\np1.age = 24 //如果age为protected,这样直接访问也会出错，只有在本类或者之类可以访问\np1.todo()  //todo为public时，所有的都可以访问  \n```\n### 构造函数\n  构造函数是类里面的一个特殊的方法，只有在类被实例化的时候会被调用，并且只调用一次，他就是constructor\n```javascript\n  //声明一个类\nclass Person {\n    private name: string;\n   //构造函数\n    constructor(name: string) {\n        this.name = name  \n    };\n       todo() {\n        console.info(this.name)\n    }\n}\nvar p1 = new Person(\"tang quan kun\")\np1.todo() // tang quan kun\n```\n这个类在被实例化的时候必要要传一个name进去，在实例化的时候就调用了constructor函数，所以后面打印出来就是 tang quan kun,在构造函数中的参数是必须要申明属性访问控制控制符的，上面的name的访问控制符为private\n```javascript\n//声明一个类\nclass Person {\n   //构造函数\n    constructor(name: string) {  //这种写法是错误的的，因为这样是没有声明name属性的，相当于类Person里面没有name属性\n        this.name = name  \n    };\n       todo() {\n        console.info(this.name)\n    }\n}\nvar p1 = new Person(\"tang quan kun\")\np1.todo()\n\n//声明一个类\nclass Person {\n   //构造函数\n    constructor(private name: string) {  //这种写法才是正确\n        this.name = name  \n    };\n       todo() {\n        console.info(this.name)\n    }\n}\nvar p1 = new Person(\"tang quan kun\")\np1.todo()\n```\n### 类的继承\n类的继承这儿设计到两个关键字那就是extends 和 super  extends 主要用来声明类的继承关系，super用来调用父类的构造方法或者函数\n1、下面我们来看一下extends,extends用来声明一种继承关系，所谓继承关系就是是的关系，下面我们来看看一个例子\n```javascript\nclass Person {\n    constructor(private name: string) {\n        this.name = name  \n    };\n       todo() {\n        console.info(this.name)\n    }\n}\n\nclass Man extends Person{\n\n}\nvar p1 = new Man(\"tang quan kun\")\np1.todo() //tang quan kun\n```\n通过上面的列子可以看出，Man类通过extends继承了类Person,Man就继承了Person中所有的方法和属性。在继承的类Man中我们可以也可以增加新的方法和属性\n![](/img/05/01.png)\n从上面的例子可以看出Man可以自己进行扩展属性和方法\n2、super的用法，super有两种用法，第一种是拿来调父类的构造函数，先看一个demo，\n```javascript\nclass Person {\n    constructor(protected name: string) {\n        this.name = name  \n        console.info(\"i an is class Person\")\n    };\n       todo() {\n        console.info(this.name)\n    }\n}\nclass Man extends Person{\n    constructor(name: string, age: number) {\n        super(name)  //运用super调用父类的构造函数\n        this.age = age\n        console.info(\"i an is class Man\")\n    }\n    age: number;\n    work() {\n    }\n}\nvar p1 = new Man(\"tang quan kun\", 24)\n```\n打印出来的结果\n![](/img/05/02.png)\n在构造Man这个类的时候会通过super调用Person类的构造方法，这是super的一个用法，另外一个用法就是用个super调用父类的方法\n```javascript\nclass Person {\n    constructor(protected name: string) {\n        this.name = name  \n        console.info(\"i an is class Person\")\n    };\n       todo() {\n        console.info(\"在Person中执行的\")\n    }\n}\nclass Man extends Person{\n    constructor(name: string, age: number) {\n        super(name)  //运用super调用父类的构造函数\n        this.age = age\n        console.info(\"i an is class Man\")\n    }\n    age: number;\n    work() {\n        super.todo()  //运用super调用父类的方法\n        this.todoafter()\n    }\n    private todoafter() {\n        console.info(\"在Man执行的\")\n    }\n}\nvar p1 = new Man(\"tang quan kun\", 24)\np1.work()\n```\n打印出来的结果\n![](/img/05/03.png)\n我们可以从上面的结果中可以看出,super的两种方法，一种是调用父类的构造方法，一种是调用父类的方法或者属性","slug":"typescript05","published":1,"date":"2017-02-09T03:25:20.815Z","updated":"2017-01-07T07:36:07.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lna000b94unl5txq68v","content":"<p>由于面向对象比较多，所以我这儿就分两个篇章来大致的讲一下面向对象特性，首先先讲讲类</p>\n<h2 id=\"类-class\"><a href=\"#类-class\" class=\"headerlink\" title=\"类(class)\"></a>类(class)</h2><h3 id=\"类-class-类的定义\"><a href=\"#类-class-类的定义\" class=\"headerlink\" title=\"类(class) 类的定义\"></a>类(class) 类的定义</h3><p>类是TypeScript的核心，使用TS开发时，大部分代码都是写在类里面的，这里我们会简单的介绍一下类的定义，构造函数，以及类的继承等等<br>下面我来看一下简单的一个类的定义<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    name: string;</div><div class=\"line\">    todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"to do somethin\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//实例化一个类</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person()</div><div class=\"line\">p1.name = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\">p1.todo()</div></pre></td></tr></table></figure></p>\n<p>首先我们通过class实例定义一个类，然后在通过关键字new实例化一个对象，实例化就可以调用里面方法，如果大家学过c++或者java的都知道，ts中的类也有访问控制符分别是public（所有类都可以访问）、private（只有本类可以访问）、protected（当前类和子类可以访问，后面继承会讲到），想必学过java的人都知道这几个，定义类的时候，默认就是public，跟上面的代码一样，下面来看看private<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    private name: string;</div><div class=\"line\">    protected age: number;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"to do somethin\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//实例化一个类</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person()</div><div class=\"line\">p1.name = <span class=\"string\">\"tang quan kun\"</span> <span class=\"comment\">//如果name为private，这样直接访问会报错，只会在本类中可以访问，</span></div><div class=\"line\">p1.age = <span class=\"number\">24</span> <span class=\"comment\">//如果age为protected,这样直接访问也会出错，只有在本类或者之类可以访问</span></div><div class=\"line\">p1.todo()  <span class=\"comment\">//todo为public时，所有的都可以访问</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>  构造函数是类里面的一个特殊的方法，只有在类被实例化的时候会被调用，并且只调用一次，他就是constructor<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//声明一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    private name: string;</div><div class=\"line\">   <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"tang quan kun\"</span>)</div><div class=\"line\">p1.todo() <span class=\"comment\">// tang quan kun</span></div></pre></td></tr></table></figure></p>\n<p>这个类在被实例化的时候必要要传一个name进去，在实例化的时候就调用了constructor函数，所以后面打印出来就是 tang quan kun,在构造函数中的参数是必须要申明属性访问控制控制符的，上面的name的访问控制符为private<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string) &#123;  <span class=\"comment\">//这种写法是错误的的，因为这样是没有声明name属性的，相当于类Person里面没有name属性</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"tang quan kun\"</span>)</div><div class=\"line\">p1.todo()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//声明一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private name: string) &#123;  <span class=\"comment\">//这种写法才是正确</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"tang quan kun\"</span>)</div><div class=\"line\">p1.todo()</div></pre></td></tr></table></figure></p>\n<h3 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h3><p>类的继承这儿设计到两个关键字那就是extends 和 super  extends 主要用来声明类的继承关系，super用来调用父类的构造方法或者函数<br>1、下面我们来看一下extends,extends用来声明一种继承关系，所谓继承关系就是是的关系，下面我们来看看一个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private name: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Man(<span class=\"string\">\"tang quan kun\"</span>)</div><div class=\"line\">p1.todo() <span class=\"comment\">//tang quan kun</span></div></pre></td></tr></table></figure></p>\n<p>通过上面的列子可以看出，Man类通过extends继承了类Person,Man就继承了Person中所有的方法和属性。在继承的类Man中我们可以也可以增加新的方法和属性<br><img src=\"/img/05/01.png\" alt=\"\"><br>从上面的例子可以看出Man可以自己进行扩展属性和方法<br>2、super的用法，super有两种用法，第一种是拿来调父类的构造函数，先看一个demo，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(protected name: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Person\"</span>)</div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, age: number) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name)  <span class=\"comment\">//运用super调用父类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Man\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    age: number;</div><div class=\"line\">    work() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Man(<span class=\"string\">\"tang quan kun\"</span>, <span class=\"number\">24</span>)</div></pre></td></tr></table></figure></p>\n<p>打印出来的结果<br><img src=\"/img/05/02.png\" alt=\"\"><br>在构造Man这个类的时候会通过super调用Person类的构造方法，这是super的一个用法，另外一个用法就是用个super调用父类的方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(protected name: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Person\"</span>)</div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"在Person中执行的\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, age: number) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name)  <span class=\"comment\">//运用super调用父类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Man\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    age: number;</div><div class=\"line\">    work() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.todo()  <span class=\"comment\">//运用super调用父类的方法</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.todoafter()</div><div class=\"line\">    &#125;</div><div class=\"line\">    private todoafter() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"在Man执行的\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Man(<span class=\"string\">\"tang quan kun\"</span>, <span class=\"number\">24</span>)</div><div class=\"line\">p1.work()</div></pre></td></tr></table></figure></p>\n<p>打印出来的结果<br><img src=\"/img/05/03.png\" alt=\"\"><br>我们可以从上面的结果中可以看出,super的两种方法，一种是调用父类的构造方法，一种是调用父类的方法或者属性</p>\n","excerpt":"","more":"<p>由于面向对象比较多，所以我这儿就分两个篇章来大致的讲一下面向对象特性，首先先讲讲类</p>\n<h2 id=\"类-class\"><a href=\"#类-class\" class=\"headerlink\" title=\"类(class)\"></a>类(class)</h2><h3 id=\"类-class-类的定义\"><a href=\"#类-class-类的定义\" class=\"headerlink\" title=\"类(class) 类的定义\"></a>类(class) 类的定义</h3><p>类是TypeScript的核心，使用TS开发时，大部分代码都是写在类里面的，这里我们会简单的介绍一下类的定义，构造函数，以及类的继承等等<br>下面我来看一下简单的一个类的定义<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    name: string;</div><div class=\"line\">    todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"to do somethin\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//实例化一个类</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person()</div><div class=\"line\">p1.name = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\">p1.todo()</div></pre></td></tr></table></figure></p>\n<p>首先我们通过class实例定义一个类，然后在通过关键字new实例化一个对象，实例化就可以调用里面方法，如果大家学过c++或者java的都知道，ts中的类也有访问控制符分别是public（所有类都可以访问）、private（只有本类可以访问）、protected（当前类和子类可以访问，后面继承会讲到），想必学过java的人都知道这几个，定义类的时候，默认就是public，跟上面的代码一样，下面来看看private<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    private name: string;</div><div class=\"line\">    protected age: number;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"to do somethin\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//实例化一个类</span></div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person()</div><div class=\"line\">p1.name = <span class=\"string\">\"tang quan kun\"</span> <span class=\"comment\">//如果name为private，这样直接访问会报错，只会在本类中可以访问，</span></div><div class=\"line\">p1.age = <span class=\"number\">24</span> <span class=\"comment\">//如果age为protected,这样直接访问也会出错，只有在本类或者之类可以访问</span></div><div class=\"line\">p1.todo()  <span class=\"comment\">//todo为public时，所有的都可以访问</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>  构造函数是类里面的一个特殊的方法，只有在类被实例化的时候会被调用，并且只调用一次，他就是constructor<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">  <span class=\"comment\">//声明一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    private name: string;</div><div class=\"line\">   <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"tang quan kun\"</span>)</div><div class=\"line\">p1.todo() <span class=\"comment\">// tang quan kun</span></div></pre></td></tr></table></figure></p>\n<p>这个类在被实例化的时候必要要传一个name进去，在实例化的时候就调用了constructor函数，所以后面打印出来就是 tang quan kun,在构造函数中的参数是必须要申明属性访问控制控制符的，上面的name的访问控制符为private<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//声明一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string) &#123;  <span class=\"comment\">//这种写法是错误的的，因为这样是没有声明name属性的，相当于类Person里面没有name属性</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"tang quan kun\"</span>)</div><div class=\"line\">p1.todo()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//声明一个类</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">   <span class=\"comment\">//构造函数</span></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private name: string) &#123;  <span class=\"comment\">//这种写法才是正确</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"tang quan kun\"</span>)</div><div class=\"line\">p1.todo()</div></pre></td></tr></table></figure></p>\n<h3 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h3><p>类的继承这儿设计到两个关键字那就是extends 和 super  extends 主要用来声明类的继承关系，super用来调用父类的构造方法或者函数<br>1、下面我们来看一下extends,extends用来声明一种继承关系，所谓继承关系就是是的关系，下面我们来看看一个例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(private name: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Man(<span class=\"string\">\"tang quan kun\"</span>)</div><div class=\"line\">p1.todo() <span class=\"comment\">//tang quan kun</span></div></pre></td></tr></table></figure></p>\n<p>通过上面的列子可以看出，Man类通过extends继承了类Person,Man就继承了Person中所有的方法和属性。在继承的类Man中我们可以也可以增加新的方法和属性<br><img src=\"/img/05/01.png\" alt=\"\"><br>从上面的例子可以看出Man可以自己进行扩展属性和方法<br>2、super的用法，super有两种用法，第一种是拿来调父类的构造函数，先看一个demo，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(protected name: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Person\"</span>)</div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, age: number) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name)  <span class=\"comment\">//运用super调用父类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Man\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    age: number;</div><div class=\"line\">    work() &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Man(<span class=\"string\">\"tang quan kun\"</span>, <span class=\"number\">24</span>)</div></pre></td></tr></table></figure></p>\n<p>打印出来的结果<br><img src=\"/img/05/02.png\" alt=\"\"><br>在构造Man这个类的时候会通过super调用Person类的构造方法，这是super的一个用法，另外一个用法就是用个super调用父类的方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(protected name: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Person\"</span>)</div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"在Person中执行的\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, age: number) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name)  <span class=\"comment\">//运用super调用父类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Man\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    age: number;</div><div class=\"line\">    work() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.todo()  <span class=\"comment\">//运用super调用父类的方法</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.todoafter()</div><div class=\"line\">    &#125;</div><div class=\"line\">    private todoafter() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"在Man执行的\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Man(<span class=\"string\">\"tang quan kun\"</span>, <span class=\"number\">24</span>)</div><div class=\"line\">p1.work()</div></pre></td></tr></table></figure></p>\n<p>打印出来的结果<br><img src=\"/img/05/03.png\" alt=\"\"><br>我们可以从上面的结果中可以看出,super的两种方法，一种是调用父类的构造方法，一种是调用父类的方法或者属性</p>\n"},{"title":"angualar--service与Provider","_content":"在前面我们提到过，最好不去复用controller里面的代码，我们要把里面相同的代码抽出来然后放到service里面\n## 首先我们看一下$http服务\n我们先看一下http 的例子\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<ul>\n\t\t\t<li ng-repeat=\"list in lists\">\n\t\t\t\t<label>名字</label>：{{list.name}}\n\t\t\t\t<label>年龄</label>:{{list.age}}\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app =  angular.module('app', [])\napp.controller('Ctrl', ['$scope','$http',function($scope,$http){\n\t$http({\n\t\tmethod:'GET',\n\t\turl:'data.json',\n\t}).success(function(data,status,headers,config){\n\t\t$scope.lists = data\n\t}).error(function(data,status,headers,config){\n\t\t\n\t})\n}])\n\n</script>\n</html>\n```\n其中data.json为\n```json\n[{\n\t\"name\":\"张三丰\",\n\t\"age\":24\n},{\n\t\"name\":\"张无忌\",\n\t\"age\":25\n},{\n\t\"name\":\"赵敏\",\n\t\"age\":19\n}]\n```\n输出的结果\n![](/img/angular/04/01.png)\n其中http请求有很多配置，可以到文档里面去看\n## 使用factory封装自己的http服务\n下面我们先来看一一个列子\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n\t<script src=\"text.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<ul>\n\t\t\t<li ng-repeat=\"list in lists\">\n\t\t\t\t<label>名字</label>：{{list.name}}\n\t\t\t\t<label>年龄</label>:{{list.age}}\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</body>\n</html>\n```\ntext.js文件\n```javascript\nvar app =  angular.module('app', [])\n//封装自己的service\napp.factory('CtrlService', ['$http','$q',function($http,$q){\n\treturn {\n\t\tgetData:function(){\n\t\t\treturn $http({\n\t\t\t\tmethod:'GET',\n\t\t\t\turl:'data.json',\n\t\t\t})  //return 一个promise\n\t\t}\n\t}\n}])\napp.controller('Ctrl', ['$scope','CtrlService',function($scope,CtrlService){\n\tCtrlService.getData().success(function(responseData,status,headers,config){\n\t\t\t\t\t\t\t$scope.lists = responseData\n\n\t\t\t\t\t\t}).error(function(responseData,status,headers,config){})\n}])\n\n```\n输出的结果\n![](/img/angular/04/01.png)我们把http请求封装在factory中，封装成自己的一个service，这样controller就处理业务逻辑,不同的controller都可以调用这个service\nservice的特性：\n\t1、service都是单例的\n\t2、service由$injector负责实例化\n\t3、service在整个应用的生命周期中存在，可以用来共享数据\n\t4、在需要使用的地方利用依赖注入机制注入service\n\t5、自定义的service需要写在内置的service后面\n\t6、内置service的命名以$符号开头，自定义service应该避免\n其中service、provider、factory本质都是provider,只是里面的写法和参数不同\n## angular中的 constant、value、service、factory、provider的常用几种方法\n","source":"_posts/angular04.md","raw":"---\ntitle: angualar--service与Provider\ncategories:\n  -angular1.x.x\n---\n在前面我们提到过，最好不去复用controller里面的代码，我们要把里面相同的代码抽出来然后放到service里面\n## 首先我们看一下$http服务\n我们先看一下http 的例子\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<ul>\n\t\t\t<li ng-repeat=\"list in lists\">\n\t\t\t\t<label>名字</label>：{{list.name}}\n\t\t\t\t<label>年龄</label>:{{list.age}}\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app =  angular.module('app', [])\napp.controller('Ctrl', ['$scope','$http',function($scope,$http){\n\t$http({\n\t\tmethod:'GET',\n\t\turl:'data.json',\n\t}).success(function(data,status,headers,config){\n\t\t$scope.lists = data\n\t}).error(function(data,status,headers,config){\n\t\t\n\t})\n}])\n\n</script>\n</html>\n```\n其中data.json为\n```json\n[{\n\t\"name\":\"张三丰\",\n\t\"age\":24\n},{\n\t\"name\":\"张无忌\",\n\t\"age\":25\n},{\n\t\"name\":\"赵敏\",\n\t\"age\":19\n}]\n```\n输出的结果\n![](/img/angular/04/01.png)\n其中http请求有很多配置，可以到文档里面去看\n## 使用factory封装自己的http服务\n下面我们先来看一一个列子\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n\t<script src=\"text.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<ul>\n\t\t\t<li ng-repeat=\"list in lists\">\n\t\t\t\t<label>名字</label>：{{list.name}}\n\t\t\t\t<label>年龄</label>:{{list.age}}\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n</body>\n</html>\n```\ntext.js文件\n```javascript\nvar app =  angular.module('app', [])\n//封装自己的service\napp.factory('CtrlService', ['$http','$q',function($http,$q){\n\treturn {\n\t\tgetData:function(){\n\t\t\treturn $http({\n\t\t\t\tmethod:'GET',\n\t\t\t\turl:'data.json',\n\t\t\t})  //return 一个promise\n\t\t}\n\t}\n}])\napp.controller('Ctrl', ['$scope','CtrlService',function($scope,CtrlService){\n\tCtrlService.getData().success(function(responseData,status,headers,config){\n\t\t\t\t\t\t\t$scope.lists = responseData\n\n\t\t\t\t\t\t}).error(function(responseData,status,headers,config){})\n}])\n\n```\n输出的结果\n![](/img/angular/04/01.png)我们把http请求封装在factory中，封装成自己的一个service，这样controller就处理业务逻辑,不同的controller都可以调用这个service\nservice的特性：\n\t1、service都是单例的\n\t2、service由$injector负责实例化\n\t3、service在整个应用的生命周期中存在，可以用来共享数据\n\t4、在需要使用的地方利用依赖注入机制注入service\n\t5、自定义的service需要写在内置的service后面\n\t6、内置service的命名以$符号开头，自定义service应该避免\n其中service、provider、factory本质都是provider,只是里面的写法和参数不同\n## angular中的 constant、value、service、factory、provider的常用几种方法\n","slug":"angular04","published":1,"date":"2017-02-09T03:25:20.789Z","updated":"2017-01-20T09:23:38.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lne000c94unksz6c9eq","content":"<p>在前面我们提到过，最好不去复用controller里面的代码，我们要把里面相同的代码抽出来然后放到service里面</p>\n<h2 id=\"首先我们看一下-http服务\"><a href=\"#首先我们看一下-http服务\" class=\"headerlink\" title=\"首先我们看一下$http服务\"></a>首先我们看一下$http服务</h2><p>我们先看一下http 的例子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"list in lists\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>名字<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>：&#123;&#123;list.name&#125;&#125;</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>:&#123;&#123;list.age&#125;&#125;</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>,<span class=\"string\">'$http'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope,$http</span>)</span>&#123;</div><div class=\"line\">\t$http(&#123;</div><div class=\"line\">\t\t<span class=\"attr\">method</span>:<span class=\"string\">'GET'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">url</span>:<span class=\"string\">'data.json'</span>,</div><div class=\"line\">\t&#125;).success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data,status,headers,config</span>)</span>&#123;</div><div class=\"line\">\t\t$scope.lists = data</div><div class=\"line\">\t&#125;).error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data,status,headers,config</span>)</span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;])</div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>其中data.json为<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&#123;</div><div class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"张三丰\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">24</span></div><div class=\"line\">&#125;,&#123;</div><div class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"张无忌\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">25</span></div><div class=\"line\">&#125;,&#123;</div><div class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"赵敏\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">19</span></div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<p>输出的结果<br><img src=\"/img/angular/04/01.png\" alt=\"\"><br>其中http请求有很多配置，可以到文档里面去看</p>\n<h2 id=\"使用factory封装自己的http服务\"><a href=\"#使用factory封装自己的http服务\" class=\"headerlink\" title=\"使用factory封装自己的http服务\"></a>使用factory封装自己的http服务</h2><p>下面我们先来看一一个列子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"text.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"list in lists\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>名字<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>：&#123;&#123;list.name&#125;&#125;</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>:&#123;&#123;list.age&#125;&#125;</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>text.js文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\"><span class=\"comment\">//封装自己的service</span></div><div class=\"line\">app.factory(<span class=\"string\">'CtrlService'</span>, [<span class=\"string\">'$http'</span>,<span class=\"string\">'$q'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$http,$q</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t<span class=\"attr\">getData</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> $http(&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">method</span>:<span class=\"string\">'GET'</span>,</div><div class=\"line\">\t\t\t\t<span class=\"attr\">url</span>:<span class=\"string\">'data.json'</span>,</div><div class=\"line\">\t\t\t&#125;)  <span class=\"comment\">//return 一个promise</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>,<span class=\"string\">'CtrlService'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope,CtrlService</span>)</span>&#123;</div><div class=\"line\">\tCtrlService.getData().success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">responseData,status,headers,config</span>)</span>&#123;</div><div class=\"line\">\t\t\t\t\t\t\t$scope.lists = responseData</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t\t&#125;).error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">responseData,status,headers,config</span>)</span>&#123;&#125;)</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure></p>\n<p>输出的结果<br><img src=\"/img/angular/04/01.png\" alt=\"\">我们把http请求封装在factory中，封装成自己的一个service，这样controller就处理业务逻辑,不同的controller都可以调用这个service<br>service的特性：<br>    1、service都是单例的<br>    2、service由$injector负责实例化<br>    3、service在整个应用的生命周期中存在，可以用来共享数据<br>    4、在需要使用的地方利用依赖注入机制注入service<br>    5、自定义的service需要写在内置的service后面<br>    6、内置service的命名以$符号开头，自定义service应该避免<br>其中service、provider、factory本质都是provider,只是里面的写法和参数不同</p>\n<h2 id=\"angular中的-constant、value、service、factory、provider的常用几种方法\"><a href=\"#angular中的-constant、value、service、factory、provider的常用几种方法\" class=\"headerlink\" title=\"angular中的 constant、value、service、factory、provider的常用几种方法\"></a>angular中的 constant、value、service、factory、provider的常用几种方法</h2>","excerpt":"","more":"<p>在前面我们提到过，最好不去复用controller里面的代码，我们要把里面相同的代码抽出来然后放到service里面</p>\n<h2 id=\"首先我们看一下-http服务\"><a href=\"#首先我们看一下-http服务\" class=\"headerlink\" title=\"首先我们看一下$http服务\"></a>首先我们看一下$http服务</h2><p>我们先看一下http 的例子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"list in lists\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>名字<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>：&#123;&#123;list.name&#125;&#125;</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>:&#123;&#123;list.age&#125;&#125;</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>,<span class=\"string\">'$http'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope,$http</span>)</span>&#123;</div><div class=\"line\">\t$http(&#123;</div><div class=\"line\">\t\t<span class=\"attr\">method</span>:<span class=\"string\">'GET'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">url</span>:<span class=\"string\">'data.json'</span>,</div><div class=\"line\">\t&#125;).success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data,status,headers,config</span>)</span>&#123;</div><div class=\"line\">\t\t$scope.lists = data</div><div class=\"line\">\t&#125;).error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data,status,headers,config</span>)</span>&#123;</div><div class=\"line\">\t\t</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;])</div><div class=\"line\"></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>其中data.json为<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">[&#123;</div><div class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"张三丰\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">24</span></div><div class=\"line\">&#125;,&#123;</div><div class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"张无忌\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">25</span></div><div class=\"line\">&#125;,&#123;</div><div class=\"line\">\t<span class=\"attr\">\"name\"</span>:<span class=\"string\">\"赵敏\"</span>,</div><div class=\"line\">\t<span class=\"attr\">\"age\"</span>:<span class=\"number\">19</span></div><div class=\"line\">&#125;]</div></pre></td></tr></table></figure></p>\n<p>输出的结果<br><img src=\"/img/angular/04/01.png\" alt=\"\"><br>其中http请求有很多配置，可以到文档里面去看</p>\n<h2 id=\"使用factory封装自己的http服务\"><a href=\"#使用factory封装自己的http服务\" class=\"headerlink\" title=\"使用factory封装自己的http服务\"></a>使用factory封装自己的http服务</h2><p>下面我们先来看一一个列子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"text.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"list in lists\"</span>&gt;</span></div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>名字<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>：&#123;&#123;list.name&#125;&#125;</div><div class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>年龄<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span>:&#123;&#123;list.age&#125;&#125;</div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>text.js文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\"><span class=\"comment\">//封装自己的service</span></div><div class=\"line\">app.factory(<span class=\"string\">'CtrlService'</span>, [<span class=\"string\">'$http'</span>,<span class=\"string\">'$q'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$http,$q</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t<span class=\"attr\">getData</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> $http(&#123;</div><div class=\"line\">\t\t\t\t<span class=\"attr\">method</span>:<span class=\"string\">'GET'</span>,</div><div class=\"line\">\t\t\t\t<span class=\"attr\">url</span>:<span class=\"string\">'data.json'</span>,</div><div class=\"line\">\t\t\t&#125;)  <span class=\"comment\">//return 一个promise</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>,<span class=\"string\">'CtrlService'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope,CtrlService</span>)</span>&#123;</div><div class=\"line\">\tCtrlService.getData().success(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">responseData,status,headers,config</span>)</span>&#123;</div><div class=\"line\">\t\t\t\t\t\t\t$scope.lists = responseData</div><div class=\"line\"></div><div class=\"line\">\t\t\t\t\t\t&#125;).error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">responseData,status,headers,config</span>)</span>&#123;&#125;)</div><div class=\"line\">&#125;])</div></pre></td></tr></table></figure></p>\n<p>输出的结果<br><img src=\"/img/angular/04/01.png\" alt=\"\">我们把http请求封装在factory中，封装成自己的一个service，这样controller就处理业务逻辑,不同的controller都可以调用这个service<br>service的特性：<br>    1、service都是单例的<br>    2、service由$injector负责实例化<br>    3、service在整个应用的生命周期中存在，可以用来共享数据<br>    4、在需要使用的地方利用依赖注入机制注入service<br>    5、自定义的service需要写在内置的service后面<br>    6、内置service的命名以$符号开头，自定义service应该避免<br>其中service、provider、factory本质都是provider,只是里面的写法和参数不同</p>\n<h2 id=\"angular中的-constant、value、service、factory、provider的常用几种方法\"><a href=\"#angular中的-constant、value、service、factory、provider的常用几种方法\" class=\"headerlink\" title=\"angular中的 constant、value、service、factory、provider的常用几种方法\"></a>angular中的 constant、value、service、factory、provider的常用几种方法</h2>"},{"title":"TypeScript--面向对象特性(06)-泛型","_content":"所谓的泛型就是参数化的类型，一般用来限制集合的内容\n## 泛型\n### 泛型\n下面我们来看一个实际的例子\n```javascript\nclass Person {\n    constructor(protected name: string) {\n        this.name = name  \n        console.info(\"i an is class Person\")\n    };\n       todo() {\n        console.info(\"在Person中执行的\")\n    }\n}\nclass Man extends Person{\n    constructor(name: string, age: number) {\n        super(name)  //运用super调用父类的构造函数\n        this.age = age\n        console.info(\"i an is class Man\")\n    }\n    age: number;\n    work() {\n        super.todo()  //运用super调用父类的方法\n        this.todoafter()\n    }\n    private todoafter() {\n        console.info(\"在Man执行的\")\n    }\n}\nvar arr: Array<Person> = []\narr[0] = new Person(\"tang quan kun\") //不报错\narr[1] = new Man(\"tang quan kun\", 24)  //不报错\narr[2] = 2 //报错\n```\n为什么arr[0] = new Person(\"tang quan kun\") arr[1] = new Man(\"tang quan kun\", 24) 都是true都是可以的呢，而arr[2] = 2是会报错，那是因为var arr: Array<Person> = [],其中<Person>就是这个数组的泛型，它指定了数组arr只能够存放Person,因为Man 和 Person都是Person类，而2不是Person类，所以会报错。","source":"_posts/typescript06.md","raw":"---\ntitle: TypeScript--面向对象特性(06)-泛型\ncategories:\n  -TypeScript\n---\n所谓的泛型就是参数化的类型，一般用来限制集合的内容\n## 泛型\n### 泛型\n下面我们来看一个实际的例子\n```javascript\nclass Person {\n    constructor(protected name: string) {\n        this.name = name  \n        console.info(\"i an is class Person\")\n    };\n       todo() {\n        console.info(\"在Person中执行的\")\n    }\n}\nclass Man extends Person{\n    constructor(name: string, age: number) {\n        super(name)  //运用super调用父类的构造函数\n        this.age = age\n        console.info(\"i an is class Man\")\n    }\n    age: number;\n    work() {\n        super.todo()  //运用super调用父类的方法\n        this.todoafter()\n    }\n    private todoafter() {\n        console.info(\"在Man执行的\")\n    }\n}\nvar arr: Array<Person> = []\narr[0] = new Person(\"tang quan kun\") //不报错\narr[1] = new Man(\"tang quan kun\", 24)  //不报错\narr[2] = 2 //报错\n```\n为什么arr[0] = new Person(\"tang quan kun\") arr[1] = new Man(\"tang quan kun\", 24) 都是true都是可以的呢，而arr[2] = 2是会报错，那是因为var arr: Array<Person> = [],其中<Person>就是这个数组的泛型，它指定了数组arr只能够存放Person,因为Man 和 Person都是Person类，而2不是Person类，所以会报错。","slug":"typescript06","published":1,"date":"2017-02-09T03:25:20.818Z","updated":"2017-01-07T07:50:13.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lnk000f94unpmwi2h0s","content":"<p>所谓的泛型就是参数化的类型，一般用来限制集合的内容</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><h3 id=\"泛型-1\"><a href=\"#泛型-1\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>下面我们来看一个实际的例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(protected name: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Person\"</span>)</div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"在Person中执行的\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, age: number) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name)  <span class=\"comment\">//运用super调用父类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Man\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    age: number;</div><div class=\"line\">    work() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.todo()  <span class=\"comment\">//运用super调用父类的方法</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.todoafter()</div><div class=\"line\">    &#125;</div><div class=\"line\">    private todoafter() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"在Man执行的\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr: <span class=\"built_in\">Array</span>&lt;Person&gt; = []</div><div class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"tang quan kun\"</span>) <span class=\"comment\">//不报错</span></div><div class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> Man(<span class=\"string\">\"tang quan kun\"</span>, <span class=\"number\">24</span>)  <span class=\"comment\">//不报错</span></div><div class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"number\">2</span> <span class=\"comment\">//报错</span></div></pre></td></tr></table></figure></p>\n<p>为什么arr[0] = new Person(“tang quan kun”) arr[1] = new Man(“tang quan kun”, 24) 都是true都是可以的呢，而arr[2] = 2是会报错，那是因为var arr: Array<person> = [],其中<person>就是这个数组的泛型，它指定了数组arr只能够存放Person,因为Man 和 Person都是Person类，而2不是Person类，所以会报错。</person></person></p>\n","excerpt":"","more":"<p>所谓的泛型就是参数化的类型，一般用来限制集合的内容</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><h3 id=\"泛型-1\"><a href=\"#泛型-1\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><p>下面我们来看一个实际的例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(protected name: string) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name  </div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Person\"</span>)</div><div class=\"line\">    &#125;;</div><div class=\"line\">       todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"在Person中执行的\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(name: string, age: number) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(name)  <span class=\"comment\">//运用super调用父类的构造函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is class Man\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    age: number;</div><div class=\"line\">    work() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.todo()  <span class=\"comment\">//运用super调用父类的方法</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.todoafter()</div><div class=\"line\">    &#125;</div><div class=\"line\">    private todoafter() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"在Man执行的\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> arr: <span class=\"built_in\">Array</span>&lt;Person&gt; = []</div><div class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"tang quan kun\"</span>) <span class=\"comment\">//不报错</span></div><div class=\"line\">arr[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> Man(<span class=\"string\">\"tang quan kun\"</span>, <span class=\"number\">24</span>)  <span class=\"comment\">//不报错</span></div><div class=\"line\">arr[<span class=\"number\">2</span>] = <span class=\"number\">2</span> <span class=\"comment\">//报错</span></div></pre></td></tr></table></figure></p>\n<p>为什么arr[0] = new Person(“tang quan kun”) arr[1] = new Man(“tang quan kun”, 24) 都是true都是可以的呢，而arr[2] = 2是会报错，那是因为var arr: Array<Person> = [],其中<Person>就是这个数组的泛型，它指定了数组arr只能够存放Person,因为Man 和 Person都是Person类，而2不是Person类，所以会报错。</p>\n"},{"title":"TypeScript--表达式与循环(04)","_content":"主要是箭头表达式和for of循环\n## 第一节 箭头表达式\n### 箭头表达式\n用来声明匿名函数，消除传统匿名函数的this指针问题，(这儿有点儿争议)，下面我们来看一个简单demo\n![](/img/04/01.png)\n从上面的ts和js对比结果可以看出，ts定义一个匿名函数，然后返回num1和num2相加，这里没有用到return，如果要是多行的要写大括号和return的\n![](/img/04/02.png)\n匿名函数有几种方法类型，第一种是没有任何参数的\n```javascript\nvar sum = () => {\n    console.info(\"tang quan kun \")\n}\n转化为js\nvar sum = function () {\n    console.info(\"tang quan kun \");\n};\n```\n第二种只有一个参数\n```javascript\nvar sum = num => {\n    console.info(num)\n}\n转化为的js\nvar sum = function (num) {\n    console.info(num);\n};\n\n```\n下面来看一个简单的例子\n```javascript\nvar arr = [1, 2, 3, 4, 5, 6]\nconsole.info(arr.filter(val=>val%2==0)) //[2,4,6]\n//转化为的js\nvar arr = [1, 2, 3, 4, 5, 6];\nconsole.info(arr.filter(function (val) { return val % 2 == 0; }));\n```\n这个filter参数就是一个匿名函数，接受一个参数,对接收的val进行判断，如果是偶数就返回true，并把这个值留在数组里面，奇数都被过滤掉了这样不仅是缩短了代码量，并且最大的一个好处就是解决了this指针的问题，在传统的js代码里，this老爱容易搞晕\n下面来举一个传统的js关键字出现的一些问题\n```javascript\nfunction getName(name: string) {\n    this.name = name\n    setInterval(function () {\n       console.info(\"this name is:\"+this.name) \n    },1000)\n}\nvar start = new getName(\"tang quan kun\")\n```\n![](/img/04/03.png)\n可以从结果中看到，打印出来出来的this.name什么都没有，但是按照我们逻辑打印出来的this.name应该是tang quan kun，我们实例一个getName对象，并传一个 tang quan kun ，所以this.name应该是有值，下面我们换一种方法来\n```javascript\nfunction getName(name: string) {\n    this.name = name\n    setInterval(()=> {\n       console.info(\"this name is:\"+this.name) \n    },1000)\n}\nvar start = new getName(\"tang quan kun\")\n```\n![](/img/04/04.png)\n现在打印出来的就有值了，仔细对比一下上面两段代码，我们只是把setInterval里面的匿名函数进行了一个小的修改，把传统的匿名函数改成了箭头的函数，这样做的结果就符合我想要的结果\n## 第一节 新的循环\n### 新的循环\n在做新的循环（ for of）的时候，我们先来看看传统的js的用到的循环，forEach 、for in 进行比较\n```javascript\n\tvar arr = [1, 2, 3, 4]\n\tarr.name = \"tang quan kun\"  //这种写法在ts会报错，但是编译成js是可以运行的\n\tarr.forEach(val=>console.info(val)) //[1,2,3,4]\n```\n从上面打印出来的结果可以知道，对数组做的name是没有打印出来的，那是因为forEach会循环数组里面的元素，但是会把里面属性跟忽略掉，所以打印出来就是[1,2,3,4],还有就是forEach函数运行起来后，是不能够跳出来，不像其他函数一样满足某个条件可以break\n```javascript\nvar arr = [1, 2, 3, 4]\narr.name = \"tang quan kun\"\nfor (var n in arr) {\n    console.info(n) [0,1,2,3,name]\n}\n```\n为什么打印出来是[0,1,2,3,name],因为for in便利的数组里面的属性的名字，而不是值，因为不管是数组或者对象都是以一个键值对形式存在，for in循环是循环的键值对（key）这儿就不多介绍，如果要用for in获取值可以通过以下方法\n```javascript\nvar arr = [1, 2, 3, 4]\narr.name = \"tang quan kun\"\nfor (var n in arr) {\n    console.info(arr[n]) //[1,2,3,4,tang quan kun]\n}\n```\n下面我们来一个新的循环for of ，它跟forEach有点儿一样，唯一不同的就是可以打断，可以break\n```javascript\nvar arr = [1, 2, 3, 4]\narr.name = \"tang quan kun\"\nfor (var n of arr) {\n    console.info(n) //[1,2,3,4]\n}\n```\n这打印出来跟forEach一样的结果，下面来看看break\n```javascript\nvar arr = [1, 2, 3, 4]\narr.name = \"tang quan kun\"\nfor (var n of arr) {\n    if (n >2) {\n        break\n    }\n    console.info(n) //[1,2]\n}\n```\n上面当大于2的时候就跳出了，for of也可以对字符串进行循环\n```javascript\nvar str = \"tang quan kun\"\nfor (var n of str){\n    console.info(n)\n} \n```\n打印出的结果\n![](/img/04/05.png)\n","source":"_posts/typescript04.md","raw":"---\ntitle: TypeScript--表达式与循环(04)\ncategories:\n  -TypeScript\n---\n主要是箭头表达式和for of循环\n## 第一节 箭头表达式\n### 箭头表达式\n用来声明匿名函数，消除传统匿名函数的this指针问题，(这儿有点儿争议)，下面我们来看一个简单demo\n![](/img/04/01.png)\n从上面的ts和js对比结果可以看出，ts定义一个匿名函数，然后返回num1和num2相加，这里没有用到return，如果要是多行的要写大括号和return的\n![](/img/04/02.png)\n匿名函数有几种方法类型，第一种是没有任何参数的\n```javascript\nvar sum = () => {\n    console.info(\"tang quan kun \")\n}\n转化为js\nvar sum = function () {\n    console.info(\"tang quan kun \");\n};\n```\n第二种只有一个参数\n```javascript\nvar sum = num => {\n    console.info(num)\n}\n转化为的js\nvar sum = function (num) {\n    console.info(num);\n};\n\n```\n下面来看一个简单的例子\n```javascript\nvar arr = [1, 2, 3, 4, 5, 6]\nconsole.info(arr.filter(val=>val%2==0)) //[2,4,6]\n//转化为的js\nvar arr = [1, 2, 3, 4, 5, 6];\nconsole.info(arr.filter(function (val) { return val % 2 == 0; }));\n```\n这个filter参数就是一个匿名函数，接受一个参数,对接收的val进行判断，如果是偶数就返回true，并把这个值留在数组里面，奇数都被过滤掉了这样不仅是缩短了代码量，并且最大的一个好处就是解决了this指针的问题，在传统的js代码里，this老爱容易搞晕\n下面来举一个传统的js关键字出现的一些问题\n```javascript\nfunction getName(name: string) {\n    this.name = name\n    setInterval(function () {\n       console.info(\"this name is:\"+this.name) \n    },1000)\n}\nvar start = new getName(\"tang quan kun\")\n```\n![](/img/04/03.png)\n可以从结果中看到，打印出来出来的this.name什么都没有，但是按照我们逻辑打印出来的this.name应该是tang quan kun，我们实例一个getName对象，并传一个 tang quan kun ，所以this.name应该是有值，下面我们换一种方法来\n```javascript\nfunction getName(name: string) {\n    this.name = name\n    setInterval(()=> {\n       console.info(\"this name is:\"+this.name) \n    },1000)\n}\nvar start = new getName(\"tang quan kun\")\n```\n![](/img/04/04.png)\n现在打印出来的就有值了，仔细对比一下上面两段代码，我们只是把setInterval里面的匿名函数进行了一个小的修改，把传统的匿名函数改成了箭头的函数，这样做的结果就符合我想要的结果\n## 第一节 新的循环\n### 新的循环\n在做新的循环（ for of）的时候，我们先来看看传统的js的用到的循环，forEach 、for in 进行比较\n```javascript\n\tvar arr = [1, 2, 3, 4]\n\tarr.name = \"tang quan kun\"  //这种写法在ts会报错，但是编译成js是可以运行的\n\tarr.forEach(val=>console.info(val)) //[1,2,3,4]\n```\n从上面打印出来的结果可以知道，对数组做的name是没有打印出来的，那是因为forEach会循环数组里面的元素，但是会把里面属性跟忽略掉，所以打印出来就是[1,2,3,4],还有就是forEach函数运行起来后，是不能够跳出来，不像其他函数一样满足某个条件可以break\n```javascript\nvar arr = [1, 2, 3, 4]\narr.name = \"tang quan kun\"\nfor (var n in arr) {\n    console.info(n) [0,1,2,3,name]\n}\n```\n为什么打印出来是[0,1,2,3,name],因为for in便利的数组里面的属性的名字，而不是值，因为不管是数组或者对象都是以一个键值对形式存在，for in循环是循环的键值对（key）这儿就不多介绍，如果要用for in获取值可以通过以下方法\n```javascript\nvar arr = [1, 2, 3, 4]\narr.name = \"tang quan kun\"\nfor (var n in arr) {\n    console.info(arr[n]) //[1,2,3,4,tang quan kun]\n}\n```\n下面我们来一个新的循环for of ，它跟forEach有点儿一样，唯一不同的就是可以打断，可以break\n```javascript\nvar arr = [1, 2, 3, 4]\narr.name = \"tang quan kun\"\nfor (var n of arr) {\n    console.info(n) //[1,2,3,4]\n}\n```\n这打印出来跟forEach一样的结果，下面来看看break\n```javascript\nvar arr = [1, 2, 3, 4]\narr.name = \"tang quan kun\"\nfor (var n of arr) {\n    if (n >2) {\n        break\n    }\n    console.info(n) //[1,2]\n}\n```\n上面当大于2的时候就跳出了，for of也可以对字符串进行循环\n```javascript\nvar str = \"tang quan kun\"\nfor (var n of str){\n    console.info(n)\n} \n```\n打印出的结果\n![](/img/04/05.png)\n","slug":"typescript04","published":1,"date":"2017-02-09T03:25:20.811Z","updated":"2017-01-06T10:24:13.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lnn000g94uns1jy2qsm","content":"<p>主要是箭头表达式和for of循环</p>\n<h2 id=\"第一节-箭头表达式\"><a href=\"#第一节-箭头表达式\" class=\"headerlink\" title=\"第一节 箭头表达式\"></a>第一节 箭头表达式</h2><h3 id=\"箭头表达式\"><a href=\"#箭头表达式\" class=\"headerlink\" title=\"箭头表达式\"></a>箭头表达式</h3><p>用来声明匿名函数，消除传统匿名函数的this指针问题，(这儿有点儿争议)，下面我们来看一个简单demo<br><img src=\"/img/04/01.png\" alt=\"\"><br>从上面的ts和js对比结果可以看出，ts定义一个匿名函数，然后返回num1和num2相加，这里没有用到return，如果要是多行的要写大括号和return的<br><img src=\"/img/04/02.png\" alt=\"\"><br>匿名函数有几种方法类型，第一种是没有任何参数的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">\"tang quan kun \"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">转化为js</div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">\"tang quan kun \"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>第二种只有一个参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(num)</div><div class=\"line\">&#125;</div><div class=\"line\">转化为的js</div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(num);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>下面来看一个简单的例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div><div class=\"line\"><span class=\"built_in\">console</span>.info(arr.filter(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>val%<span class=\"number\">2</span>==<span class=\"number\">0</span>)) <span class=\"comment\">//[2,4,6]</span></div><div class=\"line\"><span class=\"comment\">//转化为的js</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.info(arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123; <span class=\"keyword\">return</span> val % <span class=\"number\">2</span> == <span class=\"number\">0</span>; &#125;));</div></pre></td></tr></table></figure></p>\n<p>这个filter参数就是一个匿名函数，接受一个参数,对接收的val进行判断，如果是偶数就返回true，并把这个值留在数组里面，奇数都被过滤掉了这样不仅是缩短了代码量，并且最大的一个好处就是解决了this指针的问题，在传统的js代码里，this老爱容易搞晕<br>下面来举一个传统的js关键字出现的一些问题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\">name: string</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.info(<span class=\"string\">\"this name is:\"</span>+<span class=\"keyword\">this</span>.name) </div><div class=\"line\">    &#125;,<span class=\"number\">1000</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> getName(<span class=\"string\">\"tang quan kun\"</span>)</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/04/03.png\" alt=\"\"><br>可以从结果中看到，打印出来出来的this.name什么都没有，但是按照我们逻辑打印出来的this.name应该是tang quan kun，我们实例一个getName对象，并传一个 tang quan kun ，所以this.name应该是有值，下面我们换一种方法来<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\">name: string</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.info(<span class=\"string\">\"this name is:\"</span>+<span class=\"keyword\">this</span>.name) </div><div class=\"line\">    &#125;,<span class=\"number\">1000</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> getName(<span class=\"string\">\"tang quan kun\"</span>)</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/04/04.png\" alt=\"\"><br>现在打印出来的就有值了，仔细对比一下上面两段代码，我们只是把setInterval里面的匿名函数进行了一个小的修改，把传统的匿名函数改成了箭头的函数，这样做的结果就符合我想要的结果</p>\n<h2 id=\"第一节-新的循环\"><a href=\"#第一节-新的循环\" class=\"headerlink\" title=\"第一节 新的循环\"></a>第一节 新的循环</h2><h3 id=\"新的循环\"><a href=\"#新的循环\" class=\"headerlink\" title=\"新的循环\"></a>新的循环</h3><p>在做新的循环（ for of）的时候，我们先来看看传统的js的用到的循环，forEach 、for in 进行比较<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">arr.name = <span class=\"string\">\"tang quan kun\"</span>  <span class=\"comment\">//这种写法在ts会报错，但是编译成js是可以运行的</span></div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span><span class=\"built_in\">console</span>.info(val)) <span class=\"comment\">//[1,2,3,4]</span></div></pre></td></tr></table></figure></p>\n<p>从上面打印出来的结果可以知道，对数组做的name是没有打印出来的，那是因为forEach会循环数组里面的元素，但是会把里面属性跟忽略掉，所以打印出来就是[1,2,3,4],还有就是forEach函数运行起来后，是不能够跳出来，不像其他函数一样满足某个条件可以break<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">arr.name = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(n) [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,name]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为什么打印出来是[0,1,2,3,name],因为for in便利的数组里面的属性的名字，而不是值，因为不管是数组或者对象都是以一个键值对形式存在，for in循环是循环的键值对（key）这儿就不多介绍，如果要用for in获取值可以通过以下方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">arr.name = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(arr[n]) <span class=\"comment\">//[1,2,3,4,tang quan kun]</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面我们来一个新的循环for of ，它跟forEach有点儿一样，唯一不同的就是可以打断，可以break<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">arr.name = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(n) <span class=\"comment\">//[1,2,3,4]</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这打印出来跟forEach一样的结果，下面来看看break<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">arr.name = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(n) <span class=\"comment\">//[1,2]</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面当大于2的时候就跳出了，for of也可以对字符串进行循环<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">of</span> str)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(n)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>打印出的结果<br><img src=\"/img/04/05.png\" alt=\"\"></p>\n","excerpt":"","more":"<p>主要是箭头表达式和for of循环</p>\n<h2 id=\"第一节-箭头表达式\"><a href=\"#第一节-箭头表达式\" class=\"headerlink\" title=\"第一节 箭头表达式\"></a>第一节 箭头表达式</h2><h3 id=\"箭头表达式\"><a href=\"#箭头表达式\" class=\"headerlink\" title=\"箭头表达式\"></a>箭头表达式</h3><p>用来声明匿名函数，消除传统匿名函数的this指针问题，(这儿有点儿争议)，下面我们来看一个简单demo<br><img src=\"/img/04/01.png\" alt=\"\"><br>从上面的ts和js对比结果可以看出，ts定义一个匿名函数，然后返回num1和num2相加，这里没有用到return，如果要是多行的要写大括号和return的<br><img src=\"/img/04/02.png\" alt=\"\"><br>匿名函数有几种方法类型，第一种是没有任何参数的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">\"tang quan kun \"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">转化为js</div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(<span class=\"string\">\"tang quan kun \"</span>);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>第二种只有一个参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(num)</div><div class=\"line\">&#125;</div><div class=\"line\">转化为的js</div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(num);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>下面来看一个简单的例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</div><div class=\"line\"><span class=\"built_in\">console</span>.info(arr.filter(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span>val%<span class=\"number\">2</span>==<span class=\"number\">0</span>)) <span class=\"comment\">//[2,4,6]</span></div><div class=\"line\"><span class=\"comment\">//转化为的js</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.info(arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123; <span class=\"keyword\">return</span> val % <span class=\"number\">2</span> == <span class=\"number\">0</span>; &#125;));</div></pre></td></tr></table></figure></p>\n<p>这个filter参数就是一个匿名函数，接受一个参数,对接收的val进行判断，如果是偶数就返回true，并把这个值留在数组里面，奇数都被过滤掉了这样不仅是缩短了代码量，并且最大的一个好处就是解决了this指针的问题，在传统的js代码里，this老爱容易搞晕<br>下面来举一个传统的js关键字出现的一些问题<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\">name: string</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.info(<span class=\"string\">\"this name is:\"</span>+<span class=\"keyword\">this</span>.name) </div><div class=\"line\">    &#125;,<span class=\"number\">1000</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> getName(<span class=\"string\">\"tang quan kun\"</span>)</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/04/03.png\" alt=\"\"><br>可以从结果中看到，打印出来出来的this.name什么都没有，但是按照我们逻辑打印出来的this.name应该是tang quan kun，我们实例一个getName对象，并传一个 tang quan kun ，所以this.name应该是有值，下面我们换一种方法来<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getName</span>(<span class=\"params\">name: string</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name</div><div class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.info(<span class=\"string\">\"this name is:\"</span>+<span class=\"keyword\">this</span>.name) </div><div class=\"line\">    &#125;,<span class=\"number\">1000</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> start = <span class=\"keyword\">new</span> getName(<span class=\"string\">\"tang quan kun\"</span>)</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/04/04.png\" alt=\"\"><br>现在打印出来的就有值了，仔细对比一下上面两段代码，我们只是把setInterval里面的匿名函数进行了一个小的修改，把传统的匿名函数改成了箭头的函数，这样做的结果就符合我想要的结果</p>\n<h2 id=\"第一节-新的循环\"><a href=\"#第一节-新的循环\" class=\"headerlink\" title=\"第一节 新的循环\"></a>第一节 新的循环</h2><h3 id=\"新的循环\"><a href=\"#新的循环\" class=\"headerlink\" title=\"新的循环\"></a>新的循环</h3><p>在做新的循环（ for of）的时候，我们先来看看传统的js的用到的循环，forEach 、for in 进行比较<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">arr.name = <span class=\"string\">\"tang quan kun\"</span>  <span class=\"comment\">//这种写法在ts会报错，但是编译成js是可以运行的</span></div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">val</span>=&gt;</span><span class=\"built_in\">console</span>.info(val)) <span class=\"comment\">//[1,2,3,4]</span></div></pre></td></tr></table></figure></p>\n<p>从上面打印出来的结果可以知道，对数组做的name是没有打印出来的，那是因为forEach会循环数组里面的元素，但是会把里面属性跟忽略掉，所以打印出来就是[1,2,3,4],还有就是forEach函数运行起来后，是不能够跳出来，不像其他函数一样满足某个条件可以break<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">arr.name = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(n) [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,name]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为什么打印出来是[0,1,2,3,name],因为for in便利的数组里面的属性的名字，而不是值，因为不管是数组或者对象都是以一个键值对形式存在，for in循环是循环的键值对（key）这儿就不多介绍，如果要用for in获取值可以通过以下方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">arr.name = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">in</span> arr) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(arr[n]) <span class=\"comment\">//[1,2,3,4,tang quan kun]</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面我们来一个新的循环for of ，它跟forEach有点儿一样，唯一不同的就是可以打断，可以break<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">arr.name = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(n) <span class=\"comment\">//[1,2,3,4]</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这打印出来跟forEach一样的结果，下面来看看break<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</div><div class=\"line\">arr.name = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">of</span> arr) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (n &gt;<span class=\"number\">2</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(n) <span class=\"comment\">//[1,2]</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面当大于2的时候就跳出了，for of也可以对字符串进行循环<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> n <span class=\"keyword\">of</span> str)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.info(n)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>打印出的结果<br><img src=\"/img/04/05.png\" alt=\"\"></p>\n"},{"title":"TypeScript--字符串新特性(01)","_content":"Welcome to [TypeScript](http://www.typescriptlang.org/)! If you want know more , please Check [more](http://www.typescriptlang.org/) In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教\n\n## 第一节 字符串新特性\n### 多行字符串\n传统js，如果你双引号想给一个字符串换行的话，必要用用 + 进行串起来，\n``` javascript\n\tvar content = \"hello\"\n\t\t      +\"TypeScript\"\n```\n然而在ts中，引入了一个新的多行字符串，用一个双撇号去声明一个字符串，就是键盘上tab键上面那个号\n```typesctipt\n\tvar content = `hello\n\t            Typescript`\n```\n我们可以通过TypeScript官网中的在线环境进行ts和js装换，[ts和js的转换](http://www.typescriptlang.org/play/index.html)\n![](/img/01/string.png)\n### 字符串模板\n所谓的字符串模板就是在一个多行表达式中插入一个变量或者一个方法\n``` javascript\n\tvar content = \"tang quang kun\";\n\tvar getName = function () {\n    return \"tang quan kun\";\n\t}\n\tconsole.log(`hello ${content}`)\n\tconsole.log(`hello ${getName()}`)\n```\n![](/img/01/string2.png)\n从上面的ts转换到js的可以看到，是如何转换的\n注意：如果字符串模板不是在双撇号中，而是在双引号中会以普通字符串进行解析\n![](/img/01/string3.png)\n使用字符串模板的一个好处\n```javascript\nvar content = \"tang quang kun\";\nvar getName = function () {\n    return \"tang quan kun\";\n}\nvar text = `<div>\n        <h1>可以使用字符串模板直接添加值值</h1>\n        <span>${content}</span> \n        <span>${getName()}</span> \n    </div>\n`\n```\n无论是开发速度或者可读性都不js要好的多\n### 自动拆分字符串\n所谓自动拆分字符串，就是当你再用字符串模板去调用一个方法的时候，这个字符串模板表达式的值会自动赋给被调用方法中的参数\n``` javascript\nfunction test(template, name, gender) {\n    console.log(template);\n    console.log(name)\n    console.log(gender)\n}\n\nvar myName = \"tang quan kun\";\nvar getGender = function(){\n    return \"男\";\n}\ntest`my name is ${myName},my gender is ${getGender()}`\n```\n![](/img/01/string4.png)\n从打印的结果可以看,其中第一个打印的是一个字符串的数组，第二打印的是tang quan kun 第三个打印的是 男，第一个参数template接收是传入的字符串，第二个为拆分的${myName}，第三个为拆分是${getGender}\n\n\n","source":"_posts/typescript01.md","raw":"---\ntitle: TypeScript--字符串新特性(01)\ncategories:\n  -TypeScript\n---\nWelcome to [TypeScript](http://www.typescriptlang.org/)! If you want know more , please Check [more](http://www.typescriptlang.org/) In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教\n\n## 第一节 字符串新特性\n### 多行字符串\n传统js，如果你双引号想给一个字符串换行的话，必要用用 + 进行串起来，\n``` javascript\n\tvar content = \"hello\"\n\t\t      +\"TypeScript\"\n```\n然而在ts中，引入了一个新的多行字符串，用一个双撇号去声明一个字符串，就是键盘上tab键上面那个号\n```typesctipt\n\tvar content = `hello\n\t            Typescript`\n```\n我们可以通过TypeScript官网中的在线环境进行ts和js装换，[ts和js的转换](http://www.typescriptlang.org/play/index.html)\n![](/img/01/string.png)\n### 字符串模板\n所谓的字符串模板就是在一个多行表达式中插入一个变量或者一个方法\n``` javascript\n\tvar content = \"tang quang kun\";\n\tvar getName = function () {\n    return \"tang quan kun\";\n\t}\n\tconsole.log(`hello ${content}`)\n\tconsole.log(`hello ${getName()}`)\n```\n![](/img/01/string2.png)\n从上面的ts转换到js的可以看到，是如何转换的\n注意：如果字符串模板不是在双撇号中，而是在双引号中会以普通字符串进行解析\n![](/img/01/string3.png)\n使用字符串模板的一个好处\n```javascript\nvar content = \"tang quang kun\";\nvar getName = function () {\n    return \"tang quan kun\";\n}\nvar text = `<div>\n        <h1>可以使用字符串模板直接添加值值</h1>\n        <span>${content}</span> \n        <span>${getName()}</span> \n    </div>\n`\n```\n无论是开发速度或者可读性都不js要好的多\n### 自动拆分字符串\n所谓自动拆分字符串，就是当你再用字符串模板去调用一个方法的时候，这个字符串模板表达式的值会自动赋给被调用方法中的参数\n``` javascript\nfunction test(template, name, gender) {\n    console.log(template);\n    console.log(name)\n    console.log(gender)\n}\n\nvar myName = \"tang quan kun\";\nvar getGender = function(){\n    return \"男\";\n}\ntest`my name is ${myName},my gender is ${getGender()}`\n```\n![](/img/01/string4.png)\n从打印的结果可以看,其中第一个打印的是一个字符串的数组，第二打印的是tang quan kun 第三个打印的是 男，第一个参数template接收是传入的字符串，第二个为拆分的${myName}，第三个为拆分是${getGender}\n\n\n","slug":"typescript01","published":1,"date":"2017-02-09T03:25:20.800Z","updated":"2017-01-07T07:37:26.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lnt000j94uni1y6axiy","content":"<p>Welcome to <a href=\"http://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">TypeScript</a>! If you want know more , please Check <a href=\"http://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">more</a> In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教</p>\n<h2 id=\"第一节-字符串新特性\"><a href=\"#第一节-字符串新特性\" class=\"headerlink\" title=\"第一节 字符串新特性\"></a>第一节 字符串新特性</h2><h3 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h3><p>传统js，如果你双引号想给一个字符串换行的话，必要用用 + 进行串起来，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">\"hello\"</span></div><div class=\"line\">\t      +<span class=\"string\">\"TypeScript\"</span></div></pre></td></tr></table></figure></p>\n<p>然而在ts中，引入了一个新的多行字符串，用一个双撇号去声明一个字符串，就是键盘上tab键上面那个号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var content = `hello</div><div class=\"line\">            Typescript`</div></pre></td></tr></table></figure></p>\n<p>我们可以通过TypeScript官网中的在线环境进行ts和js装换，<a href=\"http://www.typescriptlang.org/play/index.html\" target=\"_blank\" rel=\"external\">ts和js的转换</a><br><img src=\"/img/01/string.png\" alt=\"\"></p>\n<h3 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h3><p>所谓的字符串模板就是在一个多行表达式中插入一个变量或者一个方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">\"tang quang kun\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;content&#125;</span>`</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;getName()&#125;</span>`</span>)</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/01/string2.png\" alt=\"\"><br>从上面的ts转换到js的可以看到，是如何转换的<br>注意：如果字符串模板不是在双撇号中，而是在双引号中会以普通字符串进行解析<br><img src=\"/img/01/string3.png\" alt=\"\"><br>使用字符串模板的一个好处<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">\"tang quang kun\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">`&lt;div&gt;</span></div><div class=\"line\">        &lt;h1&gt;可以使用字符串模板直接添加值值&lt;/h1&gt;</div><div class=\"line\">        &lt;span&gt;<span class=\"subst\">$&#123;content&#125;</span>&lt;/span&gt; </div><div class=\"line\">        &lt;span&gt;<span class=\"subst\">$&#123;getName()&#125;</span>&lt;/span&gt; </div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">`</div></pre></td></tr></table></figure></p>\n<p>无论是开发速度或者可读性都不js要好的多</p>\n<h3 id=\"自动拆分字符串\"><a href=\"#自动拆分字符串\" class=\"headerlink\" title=\"自动拆分字符串\"></a>自动拆分字符串</h3><p>所谓自动拆分字符串，就是当你再用字符串模板去调用一个方法的时候，这个字符串模板表达式的值会自动赋给被调用方法中的参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">template, name, gender</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(template);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(gender)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> getGender = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"男\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">test<span class=\"string\">`my name is <span class=\"subst\">$&#123;myName&#125;</span>,my gender is <span class=\"subst\">$&#123;getGender()&#125;</span>`</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/01/string4.png\" alt=\"\"><br>从打印的结果可以看,其中第一个打印的是一个字符串的数组，第二打印的是tang quan kun 第三个打印的是 男，第一个参数template接收是传入的字符串，第二个为拆分的${myName}，第三个为拆分是${getGender}</p>\n","excerpt":"","more":"<p>Welcome to <a href=\"http://www.typescriptlang.org/\">TypeScript</a>! If you want know more , please Check <a href=\"http://www.typescriptlang.org/\">more</a> In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教</p>\n<h2 id=\"第一节-字符串新特性\"><a href=\"#第一节-字符串新特性\" class=\"headerlink\" title=\"第一节 字符串新特性\"></a>第一节 字符串新特性</h2><h3 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h3><p>传统js，如果你双引号想给一个字符串换行的话，必要用用 + 进行串起来，<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">\"hello\"</span></div><div class=\"line\">\t      +<span class=\"string\">\"TypeScript\"</span></div></pre></td></tr></table></figure></p>\n<p>然而在ts中，引入了一个新的多行字符串，用一个双撇号去声明一个字符串，就是键盘上tab键上面那个号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var content = `hello</div><div class=\"line\">            Typescript`</div></pre></td></tr></table></figure></p>\n<p>我们可以通过TypeScript官网中的在线环境进行ts和js装换，<a href=\"http://www.typescriptlang.org/play/index.html\">ts和js的转换</a><br><img src=\"/img/01/string.png\" alt=\"\"></p>\n<h3 id=\"字符串模板\"><a href=\"#字符串模板\" class=\"headerlink\" title=\"字符串模板\"></a>字符串模板</h3><p>所谓的字符串模板就是在一个多行表达式中插入一个变量或者一个方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">\"tang quang kun\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;content&#125;</span>`</span>)</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;getName()&#125;</span>`</span>)</div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/01/string2.png\" alt=\"\"><br>从上面的ts转换到js的可以看到，是如何转换的<br>注意：如果字符串模板不是在双撇号中，而是在双引号中会以普通字符串进行解析<br><img src=\"/img/01/string3.png\" alt=\"\"><br>使用字符串模板的一个好处<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> content = <span class=\"string\">\"tang quang kun\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> getName = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">`&lt;div&gt;</div><div class=\"line\">        &lt;h1&gt;可以使用字符串模板直接添加值值&lt;/h1&gt;</div><div class=\"line\">        &lt;span&gt;<span class=\"subst\">$&#123;content&#125;</span>&lt;/span&gt; </div><div class=\"line\">        &lt;span&gt;<span class=\"subst\">$&#123;getName()&#125;</span>&lt;/span&gt; </div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">`</span></div></pre></td></tr></table></figure></p>\n<p>无论是开发速度或者可读性都不js要好的多</p>\n<h3 id=\"自动拆分字符串\"><a href=\"#自动拆分字符串\" class=\"headerlink\" title=\"自动拆分字符串\"></a>自动拆分字符串</h3><p>所谓自动拆分字符串，就是当你再用字符串模板去调用一个方法的时候，这个字符串模板表达式的值会自动赋给被调用方法中的参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">template, name, gender</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(template);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(name)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(gender)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> myName = <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> getGender = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"男\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">test<span class=\"string\">`my name is <span class=\"subst\">$&#123;myName&#125;</span>,my gender is <span class=\"subst\">$&#123;getGender()&#125;</span>`</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"/img/01/string4.png\" alt=\"\"><br>从打印的结果可以看,其中第一个打印的是一个字符串的数组，第二打印的是tang quan kun 第三个打印的是 男，第一个参数template接收是传入的字符串，第二个为拆分的${myName}，第三个为拆分是${getGender}</p>\n"},{"title":"TypeScript--面向对象特性(07)-接口","_content":"用来建立某种代码约定，使得其它开发者在调用某个方法或者创建新的类时必须遵循接口所定义的代码约定，在JavaScript中没有接口这个概念，在typescript中提供两个关键字来支持接口。一个是interface，用来声明一个接口，另外一个是implements，用来申明某一个类实现了某一个接口，下面我们讲讲第一个interface\n```javascript\ninterface Person{\n    name: string,\n    age:number\n}\nclass Man{\n    constructor(public people: Person) {\n        \n    }\n}\nvar p1 = new Man({\n    name: \"tang quan kun\",\n    age:24\n})\n//这种方法ts会报错\nvar p2 = new Man({\n    name: \"tang quan kun\",\n    age: 24,\n    work:\"do work\"\n})\n```\n由上面可以看出，实例化p1是正确的是，而实例化p2就是错误的，那是因为当实例化对象的时候传入的参数必须满足接口Person里面的所有参数类型及属性，如果传入的参数不满足定义的接口的类型就会报错\n下面我们讲讲implements\n```javascript\ninterface Person{\n    todo()\n}\n//这样写ts不会报错\nclass Man implements Person{\n    todo() {\n        console.info(\"i an is man\")\n    }\n}\n//这样会报错\nclass Woman implements Person{\n\n}\n```\n为什么在定义类Man时不会报错，而在定义Woman时会报错，因为当一个类实现一个接口的时候，必须要实现接口里面方法，如果不能实现接口里面方法就会报错","source":"_posts/typescript07.md","raw":"---\ntitle: TypeScript--面向对象特性(07)-接口\ncategories:\n  -TypeScript\n---\n用来建立某种代码约定，使得其它开发者在调用某个方法或者创建新的类时必须遵循接口所定义的代码约定，在JavaScript中没有接口这个概念，在typescript中提供两个关键字来支持接口。一个是interface，用来声明一个接口，另外一个是implements，用来申明某一个类实现了某一个接口，下面我们讲讲第一个interface\n```javascript\ninterface Person{\n    name: string,\n    age:number\n}\nclass Man{\n    constructor(public people: Person) {\n        \n    }\n}\nvar p1 = new Man({\n    name: \"tang quan kun\",\n    age:24\n})\n//这种方法ts会报错\nvar p2 = new Man({\n    name: \"tang quan kun\",\n    age: 24,\n    work:\"do work\"\n})\n```\n由上面可以看出，实例化p1是正确的是，而实例化p2就是错误的，那是因为当实例化对象的时候传入的参数必须满足接口Person里面的所有参数类型及属性，如果传入的参数不满足定义的接口的类型就会报错\n下面我们讲讲implements\n```javascript\ninterface Person{\n    todo()\n}\n//这样写ts不会报错\nclass Man implements Person{\n    todo() {\n        console.info(\"i an is man\")\n    }\n}\n//这样会报错\nclass Woman implements Person{\n\n}\n```\n为什么在定义类Man时不会报错，而在定义Woman时会报错，因为当一个类实现一个接口的时候，必须要实现接口里面方法，如果不能实现接口里面方法就会报错","slug":"typescript07","published":1,"date":"2017-02-09T03:25:20.822Z","updated":"2017-01-07T08:30:01.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lnw000l94unzebqevk1","content":"<p>用来建立某种代码约定，使得其它开发者在调用某个方法或者创建新的类时必须遵循接口所定义的代码约定，在JavaScript中没有接口这个概念，在typescript中提供两个关键字来支持接口。一个是interface，用来声明一个接口，另外一个是implements，用来申明某一个类实现了某一个接口，下面我们讲讲第一个interface<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface Person&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: string,</div><div class=\"line\">    <span class=\"attr\">age</span>:number</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(public people: Person) &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Man(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">24</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//这种方法ts会报错</span></div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Man(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">24</span>,</div><div class=\"line\">    <span class=\"attr\">work</span>:<span class=\"string\">\"do work\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>由上面可以看出，实例化p1是正确的是，而实例化p2就是错误的，那是因为当实例化对象的时候传入的参数必须满足接口Person里面的所有参数类型及属性，如果传入的参数不满足定义的接口的类型就会报错<br>下面我们讲讲implements<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface Person&#123;</div><div class=\"line\">    todo()</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//这样写ts不会报错</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"title\">implements</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is man\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//这样会报错</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"title\">implements</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为什么在定义类Man时不会报错，而在定义Woman时会报错，因为当一个类实现一个接口的时候，必须要实现接口里面方法，如果不能实现接口里面方法就会报错</p>\n","excerpt":"","more":"<p>用来建立某种代码约定，使得其它开发者在调用某个方法或者创建新的类时必须遵循接口所定义的代码约定，在JavaScript中没有接口这个概念，在typescript中提供两个关键字来支持接口。一个是interface，用来声明一个接口，另外一个是implements，用来申明某一个类实现了某一个接口，下面我们讲讲第一个interface<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface Person&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: string,</div><div class=\"line\">    <span class=\"attr\">age</span>:number</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(public people: Person) &#123;</div><div class=\"line\">        </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Man(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">24</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//这种方法ts会报错</span></div><div class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Man(&#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"tang quan kun\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">24</span>,</div><div class=\"line\">    <span class=\"attr\">work</span>:<span class=\"string\">\"do work\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>由上面可以看出，实例化p1是正确的是，而实例化p2就是错误的，那是因为当实例化对象的时候传入的参数必须满足接口Person里面的所有参数类型及属性，如果传入的参数不满足定义的接口的类型就会报错<br>下面我们讲讲implements<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">interface Person&#123;</div><div class=\"line\">    todo()</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//这样写ts不会报错</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"title\">implements</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    todo() &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.info(<span class=\"string\">\"i an is man\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//这样会报错</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"title\">implements</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>为什么在定义类Man时不会报错，而在定义Woman时会报错，因为当一个类实现一个接口的时候，必须要实现接口里面方法，如果不能实现接口里面方法就会报错</p>\n"},{"title":"TypeScript--面向对象特性(08)-模块","_content":"模块可以帮助开发者将代码分割为可重用的单元。开发者可以自己决定将模块中的那些资源（类 方法 变量）暴露出去，暴露出去的资源就可以供其它模块儿调用。模块在ts就是文件的意思，一个模块就是一个文件，在模块中有两个关键字那就是export（导出） 和import（导入），这根es6中有点像，这两个关键字用来控制模块暴露和引入，一个模块可以暴露出资源也可以引用资源,下面来看一个demo\nmoduleA.ts\n```javascript\nexport var age:number = 24;\nvar name:string = \"tang quan kun \"\n\n\nexport function fun1(){\n\tconsole.info(\"a\")\n} \n\nfunction fun2(){\n\n}\n\nexport class A{\n\n}\nclass B{\n\n}\n```\nmoduleB.ts\n```javascript\nimport { age,fun1,A} from './moduleA';\nconsole.info(age)\n\nfun1()\n\nvar b = new A()\n\n\nexport function fun3(){\n\t\n}\n```\n在moduleB.ts文件中通过import关键字引入了模块moduleA.ts中暴露出来的方法、属性、类，然后在moduleB.ts中就可以用这些方法，并且在moduleB.ts中也可以通过export暴露出一个函数fun3\n\n","source":"_posts/typescript08.md","raw":"---\ntitle: TypeScript--面向对象特性(08)-模块\ncategories:\n  -TypeScript\n---\n模块可以帮助开发者将代码分割为可重用的单元。开发者可以自己决定将模块中的那些资源（类 方法 变量）暴露出去，暴露出去的资源就可以供其它模块儿调用。模块在ts就是文件的意思，一个模块就是一个文件，在模块中有两个关键字那就是export（导出） 和import（导入），这根es6中有点像，这两个关键字用来控制模块暴露和引入，一个模块可以暴露出资源也可以引用资源,下面来看一个demo\nmoduleA.ts\n```javascript\nexport var age:number = 24;\nvar name:string = \"tang quan kun \"\n\n\nexport function fun1(){\n\tconsole.info(\"a\")\n} \n\nfunction fun2(){\n\n}\n\nexport class A{\n\n}\nclass B{\n\n}\n```\nmoduleB.ts\n```javascript\nimport { age,fun1,A} from './moduleA';\nconsole.info(age)\n\nfun1()\n\nvar b = new A()\n\n\nexport function fun3(){\n\t\n}\n```\n在moduleB.ts文件中通过import关键字引入了模块moduleA.ts中暴露出来的方法、属性、类，然后在moduleB.ts中就可以用这些方法，并且在moduleB.ts中也可以通过export暴露出一个函数fun3\n\n","slug":"typescript08","published":1,"date":"2017-02-09T03:25:20.825Z","updated":"2017-01-07T09:36:46.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lo1000o94unyx47e5jf","content":"<p>模块可以帮助开发者将代码分割为可重用的单元。开发者可以自己决定将模块中的那些资源（类 方法 变量）暴露出去，暴露出去的资源就可以供其它模块儿调用。模块在ts就是文件的意思，一个模块就是一个文件，在模块中有两个关键字那就是export（导出） 和import（导入），这根es6中有点像，这两个关键字用来控制模块暴露和引入，一个模块可以暴露出资源也可以引用资源,下面来看一个demo<br>moduleA.ts<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> age:number = <span class=\"number\">24</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> name:string = <span class=\"string\">\"tang quan kun \"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"a\"</span>)</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>moduleB.ts<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; age,fun1,A&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./moduleA'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.info(age)</div><div class=\"line\"></div><div class=\"line\">fun1()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> A()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun3</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在moduleB.ts文件中通过import关键字引入了模块moduleA.ts中暴露出来的方法、属性、类，然后在moduleB.ts中就可以用这些方法，并且在moduleB.ts中也可以通过export暴露出一个函数fun3</p>\n","excerpt":"","more":"<p>模块可以帮助开发者将代码分割为可重用的单元。开发者可以自己决定将模块中的那些资源（类 方法 变量）暴露出去，暴露出去的资源就可以供其它模块儿调用。模块在ts就是文件的意思，一个模块就是一个文件，在模块中有两个关键字那就是export（导出） 和import（导入），这根es6中有点像，这两个关键字用来控制模块暴露和引入，一个模块可以暴露出资源也可以引用资源,下面来看一个demo<br>moduleA.ts<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> age:number = <span class=\"number\">24</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> name:string = <span class=\"string\">\"tang quan kun \"</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.info(<span class=\"string\">\"a\"</span>)</div><div class=\"line\">&#125; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>moduleB.ts<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; age,fun1,A&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./moduleA'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.info(age)</div><div class=\"line\"></div><div class=\"line\">fun1()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> A()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun3</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在moduleB.ts文件中通过import关键字引入了模块moduleA.ts中暴露出来的方法、属性、类，然后在moduleB.ts中就可以用这些方法，并且在moduleB.ts中也可以通过export暴露出一个函数fun3</p>\n"},{"title":"TypeScript--面向对象特性(10)-类型定义文件","_content":"如果要在ts中使用其它的框架，就要用到类型定义文件了，类型定义文件用来帮助开发者在TypeScript中使用已有的JavaScript的工具包，例如jQuery，echarts等等","source":"_posts/typescript10.md","raw":"---\ntitle: TypeScript--面向对象特性(10)-类型定义文件\ncategories:\n  -TypeScript\n---\n如果要在ts中使用其它的框架，就要用到类型定义文件了，类型定义文件用来帮助开发者在TypeScript中使用已有的JavaScript的工具包，例如jQuery，echarts等等","slug":"typescript10","published":1,"date":"2017-02-09T03:25:20.832Z","updated":"2017-01-07T10:15:46.775Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lo4000q94unyjtk1ce2","content":"<p>如果要在ts中使用其它的框架，就要用到类型定义文件了，类型定义文件用来帮助开发者在TypeScript中使用已有的JavaScript的工具包，例如jQuery，echarts等等</p>\n","excerpt":"","more":"<p>如果要在ts中使用其它的框架，就要用到类型定义文件了，类型定义文件用来帮助开发者在TypeScript中使用已有的JavaScript的工具包，例如jQuery，echarts等等</p>\n"},{"title":"TypeScript--参数新特性(02)","_content":"Welcome to [TypeScript](http://www.typescriptlang.org/)! If you want know more , please Check [more](http://www.typescriptlang.org/) In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教\n## 第一节 参数类型\n### 参数类型\n在参数名称后面使用冒号来指定参数的类型\n1、指定字符串型\n```javascript\n\tlet myName: string = \"tang quang kun\"\n\t    myName = 12 //error\n```\n如果后面在对myName赋其它类型的值则会有一个错误的提示\n\n2、类型推断机制\n```javascript\n\tlet myName = \"tang quang kun\"\n\t    myName = 12 // error \n```\n虽然没有对myName定义一个类型，但是刚开始给它赋值的类型为string，所有后面myName的类型九尾string，后面在给它赋值number就会报错\n如果想声明一个类型，既可以是string，又可以是number类型或者其它类型，我们就用any来声明\n```javascript\n\tlet myName:any = \"tang quang kun\"\n\t    myName = 12 // true \n```\n3、其它类型声明\n```javascript\nlet age: number = 24;   \nlet gender: boolean = true; \n\nfunction test(): void{\n    //void 声明不需要返回值值，如果有return返回值就会报错\n}\n```\n4、函数的声明\ntest函数返回一个字符串声明\n```javascript\nfunction test(): string{\n    return \"tang quan kun\"\n}\n```\n想要函数test返回相应类型，把string改为相应的类型即可\n\n5、函数参数的声明\n```javascript\nfunction test(name:string): string{\n    return name\n}\ntest(\"tang quan kun\") //true\ntest(24) //error\n}\n```\n可以对函数传入的参数类型声明\n6、自定义类型\n在ts中可以通过class或者接口来声明自己自定义的类型\n```javascript\nclass Person{\n    name: string;\n    age:number\n    \n}\nlet tangqk: Person = new Person();\ntangqk.name = \"tang quan kun\";\ntangqk.age = 24;\n```\n## 第二节 默认参数\n### 默认参数\n在参数声明后面用等号来指定参数的默认值\n```javascript\n\tlet name:string = \"tang quan kun\";\n```\n如何给方法的变量指定默认值\n```javascript\nfunction test(a: string, b: string, c: string = \"zzz\") {\n    console.log(a)\n    console.log(b)\n    console.log(c)\n}\ntest(\"xxx\",\"yyy\")\n```\n运行的结果如下\n![](/img/01/string5.png)\n注意：只能够把指定默认值得参数方式最后面，如果不放在最后面会报错误，以下的写法是错误的\n```javascript\nfunction test(a: string, c: string = \"zzz\", b: string) {\n    console.log(a)\n    console.log(b)\n    console.log(c)\n}\ntest(\"xxx\",\"yyy\")\n```\n## 第三节 可选参数\n### 可选参数\n在方法的后面用问号来标明此参数为可选参数\n```javascript\nfunction test(a: string, b?: string, c: string = \"zzz\") {\n    console.log(a)\n    console.log(b)\n    console.log(c)\n}\ntest(\"yyy\")\n```\n输出的结果如下\n![](/img/01/string6.png)\n因为b元素为可选元素，所以用test(\"yyy\")调用不会报错，c有默认值","source":"_posts/typescript02.md","raw":"---\ntitle: TypeScript--参数新特性(02)\ncategories:\n  -TypeScript\n---\nWelcome to [TypeScript](http://www.typescriptlang.org/)! If you want know more , please Check [more](http://www.typescriptlang.org/) In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教\n## 第一节 参数类型\n### 参数类型\n在参数名称后面使用冒号来指定参数的类型\n1、指定字符串型\n```javascript\n\tlet myName: string = \"tang quang kun\"\n\t    myName = 12 //error\n```\n如果后面在对myName赋其它类型的值则会有一个错误的提示\n\n2、类型推断机制\n```javascript\n\tlet myName = \"tang quang kun\"\n\t    myName = 12 // error \n```\n虽然没有对myName定义一个类型，但是刚开始给它赋值的类型为string，所有后面myName的类型九尾string，后面在给它赋值number就会报错\n如果想声明一个类型，既可以是string，又可以是number类型或者其它类型，我们就用any来声明\n```javascript\n\tlet myName:any = \"tang quang kun\"\n\t    myName = 12 // true \n```\n3、其它类型声明\n```javascript\nlet age: number = 24;   \nlet gender: boolean = true; \n\nfunction test(): void{\n    //void 声明不需要返回值值，如果有return返回值就会报错\n}\n```\n4、函数的声明\ntest函数返回一个字符串声明\n```javascript\nfunction test(): string{\n    return \"tang quan kun\"\n}\n```\n想要函数test返回相应类型，把string改为相应的类型即可\n\n5、函数参数的声明\n```javascript\nfunction test(name:string): string{\n    return name\n}\ntest(\"tang quan kun\") //true\ntest(24) //error\n}\n```\n可以对函数传入的参数类型声明\n6、自定义类型\n在ts中可以通过class或者接口来声明自己自定义的类型\n```javascript\nclass Person{\n    name: string;\n    age:number\n    \n}\nlet tangqk: Person = new Person();\ntangqk.name = \"tang quan kun\";\ntangqk.age = 24;\n```\n## 第二节 默认参数\n### 默认参数\n在参数声明后面用等号来指定参数的默认值\n```javascript\n\tlet name:string = \"tang quan kun\";\n```\n如何给方法的变量指定默认值\n```javascript\nfunction test(a: string, b: string, c: string = \"zzz\") {\n    console.log(a)\n    console.log(b)\n    console.log(c)\n}\ntest(\"xxx\",\"yyy\")\n```\n运行的结果如下\n![](/img/01/string5.png)\n注意：只能够把指定默认值得参数方式最后面，如果不放在最后面会报错误，以下的写法是错误的\n```javascript\nfunction test(a: string, c: string = \"zzz\", b: string) {\n    console.log(a)\n    console.log(b)\n    console.log(c)\n}\ntest(\"xxx\",\"yyy\")\n```\n## 第三节 可选参数\n### 可选参数\n在方法的后面用问号来标明此参数为可选参数\n```javascript\nfunction test(a: string, b?: string, c: string = \"zzz\") {\n    console.log(a)\n    console.log(b)\n    console.log(c)\n}\ntest(\"yyy\")\n```\n输出的结果如下\n![](/img/01/string6.png)\n因为b元素为可选元素，所以用test(\"yyy\")调用不会报错，c有默认值","slug":"typescript02","published":1,"date":"2017-02-09T03:25:20.804Z","updated":"2017-01-06T07:50:58.052Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lo8000t94unp94h3vr0","content":"<p>Welcome to <a href=\"http://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">TypeScript</a>! If you want know more , please Check <a href=\"http://www.typescriptlang.org/\" target=\"_blank\" rel=\"external\">more</a> In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教</p>\n<h2 id=\"第一节-参数类型\"><a href=\"#第一节-参数类型\" class=\"headerlink\" title=\"第一节 参数类型\"></a>第一节 参数类型</h2><h3 id=\"参数类型\"><a href=\"#参数类型\" class=\"headerlink\" title=\"参数类型\"></a>参数类型</h3><p>在参数名称后面使用冒号来指定参数的类型<br>1、指定字符串型<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myName: string = <span class=\"string\">\"tang quang kun\"</span></div><div class=\"line\">    myName = <span class=\"number\">12</span> <span class=\"comment\">//error</span></div></pre></td></tr></table></figure></p>\n<p>如果后面在对myName赋其它类型的值则会有一个错误的提示</p>\n<p>2、类型推断机制<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myName = <span class=\"string\">\"tang quang kun\"</span></div><div class=\"line\">    myName = <span class=\"number\">12</span> <span class=\"comment\">// error</span></div></pre></td></tr></table></figure></p>\n<p>虽然没有对myName定义一个类型，但是刚开始给它赋值的类型为string，所有后面myName的类型九尾string，后面在给它赋值number就会报错<br>如果想声明一个类型，既可以是string，又可以是number类型或者其它类型，我们就用any来声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myName:any = <span class=\"string\">\"tang quang kun\"</span></div><div class=\"line\">    myName = <span class=\"number\">12</span> <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>3、其它类型声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> age: number = <span class=\"number\">24</span>;   </div><div class=\"line\"><span class=\"keyword\">let</span> gender: boolean = <span class=\"literal\">true</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>): <span class=\"title\">void</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//void 声明不需要返回值值，如果有return返回值就会报错</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、函数的声明<br>test函数返回一个字符串声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>): <span class=\"title\">string</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>想要函数test返回相应类型，把string改为相应的类型即可</p>\n<p>5、函数参数的声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name:string</span>): <span class=\"title\">string</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name</div><div class=\"line\">&#125;</div><div class=\"line\">test(<span class=\"string\">\"tang quan kun\"</span>) <span class=\"comment\">//true</span></div><div class=\"line\">test(<span class=\"number\">24</span>) <span class=\"comment\">//error</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以对函数传入的参数类型声明<br>6、自定义类型<br>在ts中可以通过class或者接口来声明自己自定义的类型<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    name: string;</div><div class=\"line\">    age:number</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> tangqk: Person = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">tangqk.name = <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\">tangqk.age = <span class=\"number\">24</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"第二节-默认参数\"><a href=\"#第二节-默认参数\" class=\"headerlink\" title=\"第二节 默认参数\"></a>第二节 默认参数</h2><h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在参数声明后面用等号来指定参数的默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> name:string = <span class=\"string\">\"tang quan kun\"</span>;</div></pre></td></tr></table></figure></p>\n<p>如何给方法的变量指定默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a: string, b: string, c: string = <span class=\"string\">\"zzz\"</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(b)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(c)</div><div class=\"line\">&#125;</div><div class=\"line\">test(<span class=\"string\">\"xxx\"</span>,<span class=\"string\">\"yyy\"</span>)</div></pre></td></tr></table></figure></p>\n<p>运行的结果如下<br><img src=\"/img/01/string5.png\" alt=\"\"><br>注意：只能够把指定默认值得参数方式最后面，如果不放在最后面会报错误，以下的写法是错误的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a: string, c: string = <span class=\"string\">\"zzz\"</span>, b: string</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(b)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(c)</div><div class=\"line\">&#125;</div><div class=\"line\">test(<span class=\"string\">\"xxx\"</span>,<span class=\"string\">\"yyy\"</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"第三节-可选参数\"><a href=\"#第三节-可选参数\" class=\"headerlink\" title=\"第三节 可选参数\"></a>第三节 可选参数</h2><h3 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h3><p>在方法的后面用问号来标明此参数为可选参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a: string, b?: string, c: string = <span class=\"string\">\"zzz\"</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(b)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(c)</div><div class=\"line\">&#125;</div><div class=\"line\">test(<span class=\"string\">\"yyy\"</span>)</div></pre></td></tr></table></figure></p>\n<p>输出的结果如下<br><img src=\"/img/01/string6.png\" alt=\"\"><br>因为b元素为可选元素，所以用test(“yyy”)调用不会报错，c有默认值</p>\n","excerpt":"","more":"<p>Welcome to <a href=\"http://www.typescriptlang.org/\">TypeScript</a>! If you want know more , please Check <a href=\"http://www.typescriptlang.org/\">more</a> In this article , I shall describe some of grammar about TypeScript,刚开始准备写英文的，但是觉得麻烦，并且英文也不是太好，还是写中文吧，废话就不多说了，直接堆码，如果有写的不对或者不好的地方，希望大家多多指教</p>\n<h2 id=\"第一节-参数类型\"><a href=\"#第一节-参数类型\" class=\"headerlink\" title=\"第一节 参数类型\"></a>第一节 参数类型</h2><h3 id=\"参数类型\"><a href=\"#参数类型\" class=\"headerlink\" title=\"参数类型\"></a>参数类型</h3><p>在参数名称后面使用冒号来指定参数的类型<br>1、指定字符串型<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myName: string = <span class=\"string\">\"tang quang kun\"</span></div><div class=\"line\">    myName = <span class=\"number\">12</span> <span class=\"comment\">//error</span></div></pre></td></tr></table></figure></p>\n<p>如果后面在对myName赋其它类型的值则会有一个错误的提示</p>\n<p>2、类型推断机制<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myName = <span class=\"string\">\"tang quang kun\"</span></div><div class=\"line\">    myName = <span class=\"number\">12</span> <span class=\"comment\">// error</span></div></pre></td></tr></table></figure></p>\n<p>虽然没有对myName定义一个类型，但是刚开始给它赋值的类型为string，所有后面myName的类型九尾string，后面在给它赋值number就会报错<br>如果想声明一个类型，既可以是string，又可以是number类型或者其它类型，我们就用any来声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> myName:any = <span class=\"string\">\"tang quang kun\"</span></div><div class=\"line\">    myName = <span class=\"number\">12</span> <span class=\"comment\">// true</span></div></pre></td></tr></table></figure></p>\n<p>3、其它类型声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> age: number = <span class=\"number\">24</span>;   </div><div class=\"line\"><span class=\"keyword\">let</span> gender: boolean = <span class=\"literal\">true</span>; </div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>): <span class=\"title\">void</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">//void 声明不需要返回值值，如果有return返回值就会报错</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4、函数的声明<br>test函数返回一个字符串声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>): <span class=\"title\">string</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"tang quan kun\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>想要函数test返回相应类型，把string改为相应的类型即可</p>\n<p>5、函数参数的声明<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">name:string</span>): <span class=\"title\">string</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> name</div><div class=\"line\">&#125;</div><div class=\"line\">test(<span class=\"string\">\"tang quan kun\"</span>) <span class=\"comment\">//true</span></div><div class=\"line\">test(<span class=\"number\">24</span>) <span class=\"comment\">//error</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以对函数传入的参数类型声明<br>6、自定义类型<br>在ts中可以通过class或者接口来声明自己自定义的类型<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    name: string;</div><div class=\"line\">    age:number</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> tangqk: Person = <span class=\"keyword\">new</span> Person();</div><div class=\"line\">tangqk.name = <span class=\"string\">\"tang quan kun\"</span>;</div><div class=\"line\">tangqk.age = <span class=\"number\">24</span>;</div></pre></td></tr></table></figure></p>\n<h2 id=\"第二节-默认参数\"><a href=\"#第二节-默认参数\" class=\"headerlink\" title=\"第二节 默认参数\"></a>第二节 默认参数</h2><h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><p>在参数声明后面用等号来指定参数的默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> name:string = <span class=\"string\">\"tang quan kun\"</span>;</div></pre></td></tr></table></figure></p>\n<p>如何给方法的变量指定默认值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a: string, b: string, c: string = <span class=\"string\">\"zzz\"</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(b)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(c)</div><div class=\"line\">&#125;</div><div class=\"line\">test(<span class=\"string\">\"xxx\"</span>,<span class=\"string\">\"yyy\"</span>)</div></pre></td></tr></table></figure></p>\n<p>运行的结果如下<br><img src=\"/img/01/string5.png\" alt=\"\"><br>注意：只能够把指定默认值得参数方式最后面，如果不放在最后面会报错误，以下的写法是错误的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a: string, c: string = <span class=\"string\">\"zzz\"</span>, b: string</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(b)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(c)</div><div class=\"line\">&#125;</div><div class=\"line\">test(<span class=\"string\">\"xxx\"</span>,<span class=\"string\">\"yyy\"</span>)</div></pre></td></tr></table></figure></p>\n<h2 id=\"第三节-可选参数\"><a href=\"#第三节-可选参数\" class=\"headerlink\" title=\"第三节 可选参数\"></a>第三节 可选参数</h2><h3 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h3><p>在方法的后面用问号来标明此参数为可选参数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a: string, b?: string, c: string = <span class=\"string\">\"zzz\"</span></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(b)</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(c)</div><div class=\"line\">&#125;</div><div class=\"line\">test(<span class=\"string\">\"yyy\"</span>)</div></pre></td></tr></table></figure></p>\n<p>输出的结果如下<br><img src=\"/img/01/string6.png\" alt=\"\"><br>因为b元素为可选元素，所以用test(“yyy”)调用不会报错，c有默认值</p>\n"},{"title":"TypeScript--面向对象特性(09)-注解","_content":"注解为程序的元素加上更为直观更明了的说明，这些说明信息与程序的业务逻辑无关，而是供指定的工具或框架使用的，下面来看一个demo\n```javascript\nimport { Component ,OnInit} from '@angular/core';\nimport { EchartsServer } from './echarts.server/echarts.server';\nimport { Observable } from 'rxjs/Observable'\ndeclare var echarts:any;\n@Component({\n\tmoduleId:module.id,\n\tselector:'my-echarts',\n\ttemplateUrl:'echart.bar.component.html',\n\tstyleUrls:['echart.bar.component.css']\n})\nexport class echartsBarComponent implements OnInit {\n\tprivate Observable = new Observable();\n\tconstructor (private echartsServer:EchartsServer){}\n\tresponseData:any;\n\tgetData():void{\n\t\t this.echartsServer.getData().then(data=>this.responseData=data)\n\t\t}\n\tresetData():void{\n\t\t this.getData()\n  \t\tconsole.log(this.responseData)\n\t}\n  ngOnInit():void{\n\n  \t\tlet myEchart = echarts.init(document.getElementById('myCharts'))\n  \t\tconsole.log(myEchart)\n  \t\tmyEchart.setOption({\n\t\t    title: { text: 'ECharts 入门示例' },\n\t\t    tooltip: {},\n\t\t    xAxis: {\n\t\t        data: [\"衬衫\",\"羊毛衫\",\"雪纺衫\",\"裤子\",\"高跟鞋\",\"袜子\"]\n\t\t    },\n\t\t    yAxis: {},\n\t\t    series: [{\n\t\t        name: '销量',\n\t\t        type: 'bar',\n\t\t        data: [5, 20, 36, 10, 10, 20]\n\t\t    }]\n\t\t});\n  }\n}\n```\n这是一个用ng2写的一个demo，我们可以从例子中看到有一个声明了一个echartsBarComponent类，在这类上面有一个注解(@Component),这个注解就是有angular2提供的，在这个注解中有些属性，例如moduleId、selector、templateUrl、styleUrls，这些属性会告诉angular2怎么来处理echartsBarComponent这个类。当angular2处理这个类时候会去加载'echart.bar.component.html'这个html和'echart.bar.component.css'这个css，然后渲染在页面上。这就是注解，用来告诉框架怎么来处理你的程序的元素，上面程序的元素就是一个类echartsBarComponent，下面来看看html、css和结果\nhtml\n```html\n<h3>angular2引入echarts画柱状图</h3>\n<button (click)=\"resetData()\">重新获取数据</button>\n<div id=\"myCharts\">\n\t\n</div>\n```\ncss样式\n```css\n#myCharts{\n\twidth: 300px;\n\theight: 300px;\n\tborder: 1px solid red;\n}\n```\n结果\n![](/img/09/01.png)","source":"_posts/typescript09.md","raw":"---\ntitle: TypeScript--面向对象特性(09)-注解\ncategories:\n  -TypeScript\n---\n注解为程序的元素加上更为直观更明了的说明，这些说明信息与程序的业务逻辑无关，而是供指定的工具或框架使用的，下面来看一个demo\n```javascript\nimport { Component ,OnInit} from '@angular/core';\nimport { EchartsServer } from './echarts.server/echarts.server';\nimport { Observable } from 'rxjs/Observable'\ndeclare var echarts:any;\n@Component({\n\tmoduleId:module.id,\n\tselector:'my-echarts',\n\ttemplateUrl:'echart.bar.component.html',\n\tstyleUrls:['echart.bar.component.css']\n})\nexport class echartsBarComponent implements OnInit {\n\tprivate Observable = new Observable();\n\tconstructor (private echartsServer:EchartsServer){}\n\tresponseData:any;\n\tgetData():void{\n\t\t this.echartsServer.getData().then(data=>this.responseData=data)\n\t\t}\n\tresetData():void{\n\t\t this.getData()\n  \t\tconsole.log(this.responseData)\n\t}\n  ngOnInit():void{\n\n  \t\tlet myEchart = echarts.init(document.getElementById('myCharts'))\n  \t\tconsole.log(myEchart)\n  \t\tmyEchart.setOption({\n\t\t    title: { text: 'ECharts 入门示例' },\n\t\t    tooltip: {},\n\t\t    xAxis: {\n\t\t        data: [\"衬衫\",\"羊毛衫\",\"雪纺衫\",\"裤子\",\"高跟鞋\",\"袜子\"]\n\t\t    },\n\t\t    yAxis: {},\n\t\t    series: [{\n\t\t        name: '销量',\n\t\t        type: 'bar',\n\t\t        data: [5, 20, 36, 10, 10, 20]\n\t\t    }]\n\t\t});\n  }\n}\n```\n这是一个用ng2写的一个demo，我们可以从例子中看到有一个声明了一个echartsBarComponent类，在这类上面有一个注解(@Component),这个注解就是有angular2提供的，在这个注解中有些属性，例如moduleId、selector、templateUrl、styleUrls，这些属性会告诉angular2怎么来处理echartsBarComponent这个类。当angular2处理这个类时候会去加载'echart.bar.component.html'这个html和'echart.bar.component.css'这个css，然后渲染在页面上。这就是注解，用来告诉框架怎么来处理你的程序的元素，上面程序的元素就是一个类echartsBarComponent，下面来看看html、css和结果\nhtml\n```html\n<h3>angular2引入echarts画柱状图</h3>\n<button (click)=\"resetData()\">重新获取数据</button>\n<div id=\"myCharts\">\n\t\n</div>\n```\ncss样式\n```css\n#myCharts{\n\twidth: 300px;\n\theight: 300px;\n\tborder: 1px solid red;\n}\n```\n结果\n![](/img/09/01.png)","slug":"typescript09","published":1,"date":"2017-02-09T03:25:20.828Z","updated":"2017-01-07T10:04:14.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5loa000v94unlew59tvt","content":"<p>注解为程序的元素加上更为直观更明了的说明，这些说明信息与程序的业务逻辑无关，而是供指定的工具或框架使用的，下面来看一个demo<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component ,OnInit&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; EchartsServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./echarts.server/echarts.server'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span></div><div class=\"line\">declare <span class=\"keyword\">var</span> echarts:any;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">\t<span class=\"attr\">moduleId</span>:<span class=\"built_in\">module</span>.id,</div><div class=\"line\">\t<span class=\"attr\">selector</span>:<span class=\"string\">'my-echarts'</span>,</div><div class=\"line\">\t<span class=\"attr\">templateUrl</span>:<span class=\"string\">'echart.bar.component.html'</span>,</div><div class=\"line\">\t<span class=\"attr\">styleUrls</span>:[<span class=\"string\">'echart.bar.component.css'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">echartsBarComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</div><div class=\"line\">\tprivate Observable = <span class=\"keyword\">new</span> Observable();</div><div class=\"line\">\t<span class=\"keyword\">constructor</span> (private echartsServer:EchartsServer)&#123;&#125;</div><div class=\"line\">\tresponseData:any;</div><div class=\"line\">\tgetData():<span class=\"keyword\">void</span>&#123;</div><div class=\"line\">\t\t <span class=\"keyword\">this</span>.echartsServer.getData().then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span><span class=\"keyword\">this</span>.responseData=data)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\tresetData():<span class=\"keyword\">void</span>&#123;</div><div class=\"line\">\t\t <span class=\"keyword\">this</span>.getData()</div><div class=\"line\">  \t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.responseData)</div><div class=\"line\">\t&#125;</div><div class=\"line\">  ngOnInit():<span class=\"keyword\">void</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  \t\t<span class=\"keyword\">let</span> myEchart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myCharts'</span>))</div><div class=\"line\">  \t\t<span class=\"built_in\">console</span>.log(myEchart)</div><div class=\"line\">  \t\tmyEchart.setOption(&#123;</div><div class=\"line\">\t\t    <span class=\"attr\">title</span>: &#123; <span class=\"attr\">text</span>: <span class=\"string\">'ECharts 入门示例'</span> &#125;,</div><div class=\"line\">\t\t    <span class=\"attr\">tooltip</span>: &#123;&#125;,</div><div class=\"line\">\t\t    <span class=\"attr\">xAxis</span>: &#123;</div><div class=\"line\">\t\t        <span class=\"attr\">data</span>: [<span class=\"string\">\"衬衫\"</span>,<span class=\"string\">\"羊毛衫\"</span>,<span class=\"string\">\"雪纺衫\"</span>,<span class=\"string\">\"裤子\"</span>,<span class=\"string\">\"高跟鞋\"</span>,<span class=\"string\">\"袜子\"</span>]</div><div class=\"line\">\t\t    &#125;,</div><div class=\"line\">\t\t    <span class=\"attr\">yAxis</span>: &#123;&#125;,</div><div class=\"line\">\t\t    <span class=\"attr\">series</span>: [&#123;</div><div class=\"line\">\t\t        <span class=\"attr\">name</span>: <span class=\"string\">'销量'</span>,</div><div class=\"line\">\t\t        <span class=\"attr\">type</span>: <span class=\"string\">'bar'</span>,</div><div class=\"line\">\t\t        <span class=\"attr\">data</span>: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]</div><div class=\"line\">\t\t    &#125;]</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这是一个用ng2写的一个demo，我们可以从例子中看到有一个声明了一个echartsBarComponent类，在这类上面有一个注解(@Component),这个注解就是有angular2提供的，在这个注解中有些属性，例如moduleId、selector、templateUrl、styleUrls，这些属性会告诉angular2怎么来处理echartsBarComponent这个类。当angular2处理这个类时候会去加载’echart.bar.component.html’这个html和’echart.bar.component.css’这个css，然后渲染在页面上。这就是注解，用来告诉框架怎么来处理你的程序的元素，上面程序的元素就是一个类echartsBarComponent，下面来看看html、css和结果<br>html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>angular2引入echarts画柱状图<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"resetData()\"</span>&gt;</span>重新获取数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCharts\"</span>&gt;</span></div><div class=\"line\">\t</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>css样式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#myCharts</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>结果<br><img src=\"/img/09/01.png\" alt=\"\"></p>\n","excerpt":"","more":"<p>注解为程序的元素加上更为直观更明了的说明，这些说明信息与程序的业务逻辑无关，而是供指定的工具或框架使用的，下面来看一个demo<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component ,OnInit&#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; EchartsServer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./echarts.server/echarts.server'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Observable &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rxjs/Observable'</span></div><div class=\"line\">declare <span class=\"keyword\">var</span> echarts:any;</div><div class=\"line\">@Component(&#123;</div><div class=\"line\">\t<span class=\"attr\">moduleId</span>:<span class=\"built_in\">module</span>.id,</div><div class=\"line\">\t<span class=\"attr\">selector</span>:<span class=\"string\">'my-echarts'</span>,</div><div class=\"line\">\t<span class=\"attr\">templateUrl</span>:<span class=\"string\">'echart.bar.component.html'</span>,</div><div class=\"line\">\t<span class=\"attr\">styleUrls</span>:[<span class=\"string\">'echart.bar.component.css'</span>]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">echartsBarComponent</span> <span class=\"title\">implements</span> <span class=\"title\">OnInit</span> </span>&#123;</div><div class=\"line\">\tprivate Observable = <span class=\"keyword\">new</span> Observable();</div><div class=\"line\">\t<span class=\"keyword\">constructor</span> (private echartsServer:EchartsServer)&#123;&#125;</div><div class=\"line\">\tresponseData:any;</div><div class=\"line\">\tgetData():<span class=\"keyword\">void</span>&#123;</div><div class=\"line\">\t\t <span class=\"keyword\">this</span>.echartsServer.getData().then(<span class=\"function\"><span class=\"params\">data</span>=&gt;</span><span class=\"keyword\">this</span>.responseData=data)</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\tresetData():<span class=\"keyword\">void</span>&#123;</div><div class=\"line\">\t\t <span class=\"keyword\">this</span>.getData()</div><div class=\"line\">  \t\t<span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.responseData)</div><div class=\"line\">\t&#125;</div><div class=\"line\">  ngOnInit():<span class=\"keyword\">void</span>&#123;</div><div class=\"line\"></div><div class=\"line\">  \t\t<span class=\"keyword\">let</span> myEchart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'myCharts'</span>))</div><div class=\"line\">  \t\t<span class=\"built_in\">console</span>.log(myEchart)</div><div class=\"line\">  \t\tmyEchart.setOption(&#123;</div><div class=\"line\">\t\t    <span class=\"attr\">title</span>: &#123; <span class=\"attr\">text</span>: <span class=\"string\">'ECharts 入门示例'</span> &#125;,</div><div class=\"line\">\t\t    <span class=\"attr\">tooltip</span>: &#123;&#125;,</div><div class=\"line\">\t\t    <span class=\"attr\">xAxis</span>: &#123;</div><div class=\"line\">\t\t        <span class=\"attr\">data</span>: [<span class=\"string\">\"衬衫\"</span>,<span class=\"string\">\"羊毛衫\"</span>,<span class=\"string\">\"雪纺衫\"</span>,<span class=\"string\">\"裤子\"</span>,<span class=\"string\">\"高跟鞋\"</span>,<span class=\"string\">\"袜子\"</span>]</div><div class=\"line\">\t\t    &#125;,</div><div class=\"line\">\t\t    <span class=\"attr\">yAxis</span>: &#123;&#125;,</div><div class=\"line\">\t\t    <span class=\"attr\">series</span>: [&#123;</div><div class=\"line\">\t\t        <span class=\"attr\">name</span>: <span class=\"string\">'销量'</span>,</div><div class=\"line\">\t\t        <span class=\"attr\">type</span>: <span class=\"string\">'bar'</span>,</div><div class=\"line\">\t\t        <span class=\"attr\">data</span>: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>]</div><div class=\"line\">\t\t    &#125;]</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这是一个用ng2写的一个demo，我们可以从例子中看到有一个声明了一个echartsBarComponent类，在这类上面有一个注解(@Component),这个注解就是有angular2提供的，在这个注解中有些属性，例如moduleId、selector、templateUrl、styleUrls，这些属性会告诉angular2怎么来处理echartsBarComponent这个类。当angular2处理这个类时候会去加载’echart.bar.component.html’这个html和’echart.bar.component.css’这个css，然后渲染在页面上。这就是注解，用来告诉框架怎么来处理你的程序的元素，上面程序的元素就是一个类echartsBarComponent，下面来看看html、css和结果<br>html<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>angular2引入echarts画柱状图<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">\"resetData()\"</span>&gt;</span>重新获取数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myCharts\"</span>&gt;</span></div><div class=\"line\">\t</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>css样式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#myCharts</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</div><div class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>结果<br><img src=\"/img/09/01.png\" alt=\"\"></p>\n"},{"title":"angualar--指令(独立的scope)","_content":"下面来看一下demo\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<angular></angular>\n\t<angular></angular>\n\t<angular></angular>\n</body>\n<script type=\"text/javascript\">\nvar app =  angular.module('app', [])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'AE', \n\t\t template:'<div><input type=\"text\" ng-model=\"text\" />输出{{text}}</div>'\n\t};\n});\n</script>\n</html>\n```\n看一看输出的结果\n![](/img/angular/03/01.gif)\n从上面的结果中可以看出，当一个input输入时，其它的也都跟着变了，因为scope不是独立的作用域，要做到独立scope的话很简单,只需要加一个scope就行了\n```javascript\nvar app =  angular.module('app', [])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'AE', \n\t\t scope:{}, //独立scope\n\t\t template:'<div><input type=\"text\" ng-model=\"text\" />输出{{text}}</div>'\n\t};\n});\n```\nscope的绑定策略\n![](/img/angular/03/02.png)\n1、首先我们来看第一个@,先看看demo\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<angular flavor={{text}}></angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app =  angular.module('app', [])\napp.controller('Ctrl', ['$scope', function($scope){\n\t$scope.text = \"angular\"\n}])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'AE', \n\t\t scope:{\n\t\t \tflavor:'@'\n\t\t },\n\t\t template:'<div>{{flavor}}</div>'\n\t};\n});\n</script>\n</html>\n```\n输出的结果![](/img/angular/03/03.png)，可以从上面的例子中看出把控制器Ctrl中的值传递到模块angular中，在使用@的时候要注意传递的时候不是一对象进行传递的，而是以字符串传递\n2、下面来看看下一个 \"=\" 这中绑定，这种绑定是双向进行绑定的。下面我们来看一下代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t第一个\n\t\t<br>\n\t\t<input type=\"text\" ng-model=\"text\">\n\t\t<br>\n\t\t第二个\n\t\t<br>\n\t\t<angular flavor=\"text\"></angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app =  angular.module('app', [])\napp.controller('Ctrl', ['$scope', function($scope){\n\t$scope.text = \"angular\"\n}])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'AE', \n\t\t scope:{\n\t\t \tflavor:'='\n\t\t },\n\t\t template:'<input type=\"text\" ng-model=\"flavor\" />'\n\t};\n});\n</script>\n</html>\n```\n下面看看输出的结果\n![](/img/angular/03/04.gif)\n从结果中我们可以看到，\n当改变控制器里面的值后，指令里面也跟着改变了，当改变了指令里面的值后，控制器里面的值也改变了，这就是\"=\"的作用。\n3、最后我们来看看\"&\"这个符号，首先还是先来看一下例子\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<angular getName = \"get(name)\"></angular>\n\t\t<angular getName = \"get(name)\"></angular>\n\t\t<angular getName = \"get(name)\"></angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app =  angular.module('app', [])\napp.controller('Ctrl', ['$scope', function($scope){\n\t$scope.get = function(name){\n\t\tconsole.log(\"scope才用&演示结果\"+ name)\n\t}\n}])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'AE', \n\t\t scope:{\n\t\t \tgetname:'&'\n\t\t },\n\t\t template:'<input type=\"text\" ng-model=\"username\" />'+\n\t\t \t\t  '<button ng-click=\"getname({name:username})\">调用</button>'\n\t};\n});\n</script>\n</html>\n```\n下面看看输出的结果\n![](/img/angular/03/05.gif)\n在这儿要注意一点儿的时候，当函数的接受参数的时候，在上面的demo中get函数需要接收一个name的参数，所以我们在getname中传递一个对象{name:username},username就是我们在输入框中输入的值，name就是传递的参数。还有就是在getName中采用的是驼峰命名的，下面在绑定的时候记得要全部小写\n这就是@、=、&的不同用法，@主要是传递的是字符串，=主要用作双向绑定，&传递来自父scope方便调用。","source":"_posts/angular03.md","raw":"---\ntitle: angualar--指令(独立的scope)\ncategories:\n  -angular1.x.x\n---\n下面来看一下demo\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<angular></angular>\n\t<angular></angular>\n\t<angular></angular>\n</body>\n<script type=\"text/javascript\">\nvar app =  angular.module('app', [])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'AE', \n\t\t template:'<div><input type=\"text\" ng-model=\"text\" />输出{{text}}</div>'\n\t};\n});\n</script>\n</html>\n```\n看一看输出的结果\n![](/img/angular/03/01.gif)\n从上面的结果中可以看出，当一个input输入时，其它的也都跟着变了，因为scope不是独立的作用域，要做到独立scope的话很简单,只需要加一个scope就行了\n```javascript\nvar app =  angular.module('app', [])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'AE', \n\t\t scope:{}, //独立scope\n\t\t template:'<div><input type=\"text\" ng-model=\"text\" />输出{{text}}</div>'\n\t};\n});\n```\nscope的绑定策略\n![](/img/angular/03/02.png)\n1、首先我们来看第一个@,先看看demo\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<angular flavor={{text}}></angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app =  angular.module('app', [])\napp.controller('Ctrl', ['$scope', function($scope){\n\t$scope.text = \"angular\"\n}])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'AE', \n\t\t scope:{\n\t\t \tflavor:'@'\n\t\t },\n\t\t template:'<div>{{flavor}}</div>'\n\t};\n});\n</script>\n</html>\n```\n输出的结果![](/img/angular/03/03.png)，可以从上面的例子中看出把控制器Ctrl中的值传递到模块angular中，在使用@的时候要注意传递的时候不是一对象进行传递的，而是以字符串传递\n2、下面来看看下一个 \"=\" 这中绑定，这种绑定是双向进行绑定的。下面我们来看一下代码\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t第一个\n\t\t<br>\n\t\t<input type=\"text\" ng-model=\"text\">\n\t\t<br>\n\t\t第二个\n\t\t<br>\n\t\t<angular flavor=\"text\"></angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app =  angular.module('app', [])\napp.controller('Ctrl', ['$scope', function($scope){\n\t$scope.text = \"angular\"\n}])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'AE', \n\t\t scope:{\n\t\t \tflavor:'='\n\t\t },\n\t\t template:'<input type=\"text\" ng-model=\"flavor\" />'\n\t};\n});\n</script>\n</html>\n```\n下面看看输出的结果\n![](/img/angular/03/04.gif)\n从结果中我们可以看到，\n当改变控制器里面的值后，指令里面也跟着改变了，当改变了指令里面的值后，控制器里面的值也改变了，这就是\"=\"的作用。\n3、最后我们来看看\"&\"这个符号，首先还是先来看一下例子\n```html\n<!DOCTYPE html>\n<html lang=\"en\" ng-app=\"app\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Document</title>\n\t<script src=\"angular.js\"></script>\n</head>\n<body>\n\t<div ng-controller=\"Ctrl\">\n\t\t<angular getName = \"get(name)\"></angular>\n\t\t<angular getName = \"get(name)\"></angular>\n\t\t<angular getName = \"get(name)\"></angular>\n\t</div>\n</body>\n<script type=\"text/javascript\">\nvar app =  angular.module('app', [])\napp.controller('Ctrl', ['$scope', function($scope){\n\t$scope.get = function(name){\n\t\tconsole.log(\"scope才用&演示结果\"+ name)\n\t}\n}])\napp.directive('angular',function(){\n\treturn {\n\t\t restrict: 'AE', \n\t\t scope:{\n\t\t \tgetname:'&'\n\t\t },\n\t\t template:'<input type=\"text\" ng-model=\"username\" />'+\n\t\t \t\t  '<button ng-click=\"getname({name:username})\">调用</button>'\n\t};\n});\n</script>\n</html>\n```\n下面看看输出的结果\n![](/img/angular/03/05.gif)\n在这儿要注意一点儿的时候，当函数的接受参数的时候，在上面的demo中get函数需要接收一个name的参数，所以我们在getname中传递一个对象{name:username},username就是我们在输入框中输入的值，name就是传递的参数。还有就是在getName中采用的是驼峰命名的，下面在绑定的时候记得要全部小写\n这就是@、=、&的不同用法，@主要是传递的是字符串，=主要用作双向绑定，&传递来自父scope方便调用。","slug":"angular03","published":1,"date":"2017-02-09T03:25:20.785Z","updated":"2017-01-16T07:37:50.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz7s5lpo001694un4yuil6wf","content":"<p>下面来看一下demo<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">template</span>:<span class=\"string\">'&lt;div&gt;&lt;input type=\"text\" ng-model=\"text\" /&gt;输出&#123;&#123;text&#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>看一看输出的结果<br><img src=\"/img/angular/03/01.gif\" alt=\"\"><br>从上面的结果中可以看出，当一个input输入时，其它的也都跟着变了，因为scope不是独立的作用域，要做到独立scope的话很简单,只需要加一个scope就行了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">scope</span>:&#123;&#125;, <span class=\"comment\">//独立scope</span></div><div class=\"line\">\t\t template:<span class=\"string\">'&lt;div&gt;&lt;input type=\"text\" ng-model=\"text\" /&gt;输出&#123;&#123;text&#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>scope的绑定策略<br><img src=\"/img/angular/03/02.png\" alt=\"\"><br>1、首先我们来看第一个@,先看看demo<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">flavor</span>=<span class=\"string\">&#123;&#123;text&#125;&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.text = <span class=\"string\">\"angular\"</span></div><div class=\"line\">&#125;])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">scope</span>:&#123;</div><div class=\"line\">\t\t \t<span class=\"attr\">flavor</span>:<span class=\"string\">'@'</span></div><div class=\"line\">\t\t &#125;,</div><div class=\"line\">\t\t <span class=\"attr\">template</span>:<span class=\"string\">'&lt;div&gt;&#123;&#123;flavor&#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>输出的结果<img src=\"/img/angular/03/03.png\" alt=\"\">，可以从上面的例子中看出把控制器Ctrl中的值传递到模块angular中，在使用@的时候要注意传递的时候不是一对象进行传递的，而是以字符串传递<br>2、下面来看看下一个 “=” 这中绑定，这种绑定是双向进行绑定的。下面我们来看一下代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t第一个</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">\t\t第二个</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">flavor</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.text = <span class=\"string\">\"angular\"</span></div><div class=\"line\">&#125;])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">scope</span>:&#123;</div><div class=\"line\">\t\t \t<span class=\"attr\">flavor</span>:<span class=\"string\">'='</span></div><div class=\"line\">\t\t &#125;,</div><div class=\"line\">\t\t <span class=\"attr\">template</span>:<span class=\"string\">'&lt;input type=\"text\" ng-model=\"flavor\" /&gt;'</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>下面看看输出的结果<br><img src=\"/img/angular/03/04.gif\" alt=\"\"><br>从结果中我们可以看到，<br>当改变控制器里面的值后，指令里面也跟着改变了，当改变了指令里面的值后，控制器里面的值也改变了，这就是”=”的作用。<br>3、最后我们来看看”&amp;”这个符号，首先还是先来看一下例子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">getName</span> = <span class=\"string\">\"get(name)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">getName</span> = <span class=\"string\">\"get(name)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">getName</span> = <span class=\"string\">\"get(name)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"scope才用&amp;演示结果\"</span>+ name)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">scope</span>:&#123;</div><div class=\"line\">\t\t \t<span class=\"attr\">getname</span>:<span class=\"string\">'&amp;'</span></div><div class=\"line\">\t\t &#125;,</div><div class=\"line\">\t\t <span class=\"attr\">template</span>:<span class=\"string\">'&lt;input type=\"text\" ng-model=\"username\" /&gt;'</span>+</div><div class=\"line\">\t\t \t\t  <span class=\"string\">'&lt;button ng-click=\"getname(&#123;name:username&#125;)\"&gt;调用&lt;/button&gt;'</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>下面看看输出的结果<br><img src=\"/img/angular/03/05.gif\" alt=\"\"><br>在这儿要注意一点儿的时候，当函数的接受参数的时候，在上面的demo中get函数需要接收一个name的参数，所以我们在getname中传递一个对象{name:username},username就是我们在输入框中输入的值，name就是传递的参数。还有就是在getName中采用的是驼峰命名的，下面在绑定的时候记得要全部小写<br>这就是@、=、&amp;的不同用法，@主要是传递的是字符串，=主要用作双向绑定，&amp;传递来自父scope方便调用。</p>\n","excerpt":"","more":"<p>下面来看一下demo<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">angular</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">template</span>:<span class=\"string\">'&lt;div&gt;&lt;input type=\"text\" ng-model=\"text\" /&gt;输出&#123;&#123;text&#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>看一看输出的结果<br><img src=\"/img/angular/03/01.gif\" alt=\"\"><br>从上面的结果中可以看出，当一个input输入时，其它的也都跟着变了，因为scope不是独立的作用域，要做到独立scope的话很简单,只需要加一个scope就行了<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">scope</span>:&#123;&#125;, <span class=\"comment\">//独立scope</span></div><div class=\"line\">\t\t template:<span class=\"string\">'&lt;div&gt;&lt;input type=\"text\" ng-model=\"text\" /&gt;输出&#123;&#123;text&#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>scope的绑定策略<br><img src=\"/img/angular/03/02.png\" alt=\"\"><br>1、首先我们来看第一个@,先看看demo<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">flavor</span>=<span class=\"string\">&#123;&#123;text&#125;&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.text = <span class=\"string\">\"angular\"</span></div><div class=\"line\">&#125;])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">scope</span>:&#123;</div><div class=\"line\">\t\t \t<span class=\"attr\">flavor</span>:<span class=\"string\">'@'</span></div><div class=\"line\">\t\t &#125;,</div><div class=\"line\">\t\t <span class=\"attr\">template</span>:<span class=\"string\">'&lt;div&gt;&#123;&#123;flavor&#125;&#125;&lt;/div&gt;'</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>输出的结果<img src=\"/img/angular/03/03.png\" alt=\"\">，可以从上面的例子中看出把控制器Ctrl中的值传递到模块angular中，在使用@的时候要注意传递的时候不是一对象进行传递的，而是以字符串传递<br>2、下面来看看下一个 “=” 这中绑定，这种绑定是双向进行绑定的。下面我们来看一下代码<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t第一个</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"text\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">\t\t第二个</div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">flavor</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.text = <span class=\"string\">\"angular\"</span></div><div class=\"line\">&#125;])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">scope</span>:&#123;</div><div class=\"line\">\t\t \t<span class=\"attr\">flavor</span>:<span class=\"string\">'='</span></div><div class=\"line\">\t\t &#125;,</div><div class=\"line\">\t\t <span class=\"attr\">template</span>:<span class=\"string\">'&lt;input type=\"text\" ng-model=\"flavor\" /&gt;'</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>下面看看输出的结果<br><img src=\"/img/angular/03/04.gif\" alt=\"\"><br>从结果中我们可以看到，<br>当改变控制器里面的值后，指令里面也跟着改变了，当改变了指令里面的值后，控制器里面的值也改变了，这就是”=”的作用。<br>3、最后我们来看看”&amp;”这个符号，首先还是先来看一下例子<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"angular.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"Ctrl\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">getName</span> = <span class=\"string\">\"get(name)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">getName</span> = <span class=\"string\">\"get(name)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">angular</span> <span class=\"attr\">getName</span> = <span class=\"string\">\"get(name)\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">angular</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\"><span class=\"keyword\">var</span> app =  angular.module(<span class=\"string\">'app'</span>, [])</div><div class=\"line\">app.controller(<span class=\"string\">'Ctrl'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>)</span>&#123;</div><div class=\"line\">\t$scope.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"scope才用&amp;演示结果\"</span>+ name)</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;])</div><div class=\"line\">app.directive(<span class=\"string\">'angular'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t <span class=\"attr\">restrict</span>: <span class=\"string\">'AE'</span>, </div><div class=\"line\">\t\t <span class=\"attr\">scope</span>:&#123;</div><div class=\"line\">\t\t \t<span class=\"attr\">getname</span>:<span class=\"string\">'&amp;'</span></div><div class=\"line\">\t\t &#125;,</div><div class=\"line\">\t\t <span class=\"attr\">template</span>:<span class=\"string\">'&lt;input type=\"text\" ng-model=\"username\" /&gt;'</span>+</div><div class=\"line\">\t\t \t\t  <span class=\"string\">'&lt;button ng-click=\"getname(&#123;name:username&#125;)\"&gt;调用&lt;/button&gt;'</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;);</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>下面看看输出的结果<br><img src=\"/img/angular/03/05.gif\" alt=\"\"><br>在这儿要注意一点儿的时候，当函数的接受参数的时候，在上面的demo中get函数需要接收一个name的参数，所以我们在getname中传递一个对象{name:username},username就是我们在输入框中输入的值，name就是传递的参数。还有就是在getName中采用的是驼峰命名的，下面在绑定的时候记得要全部小写<br>这就是@、=、&amp;的不同用法，@主要是传递的是字符串，=主要用作双向绑定，&amp;传递来自父scope方便调用。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciz7s5lm0000094ungz19ah72","category_id":"ciz7s5lmc000294undqmlu2qh","_id":"ciz7s5ln0000894una4b73xix"},{"post_id":"ciz7s5lm8000194un4tfr3194","category_id":"ciz7s5lmu000694untpdeitgo","_id":"ciz7s5lnf000d94unpio3xcam"},{"post_id":"ciz7s5lmg000394unpzc6hslg","category_id":"ciz7s5lmc000294undqmlu2qh","_id":"ciz7s5lnp000h94unje1f4w5j"},{"post_id":"ciz7s5lne000c94unksz6c9eq","category_id":"ciz7s5lmc000294undqmlu2qh","_id":"ciz7s5lnu000k94un746u4hkd"},{"post_id":"ciz7s5lnk000f94unpmwi2h0s","category_id":"ciz7s5lnh000e94unnlvi91rv","_id":"ciz7s5lnz000m94uno0qqcdmd"},{"post_id":"ciz7s5lmj000494unsazaar6q","category_id":"ciz7s5lnh000e94unnlvi91rv","_id":"ciz7s5lo2000p94un0aszecp3"},{"post_id":"ciz7s5lnn000g94uns1jy2qsm","category_id":"ciz7s5lnh000e94unnlvi91rv","_id":"ciz7s5lo6000r94un3y74d0qt"},{"post_id":"ciz7s5lnt000j94uni1y6axiy","category_id":"ciz7s5lnh000e94unnlvi91rv","_id":"ciz7s5lo9000u94un66oo0p0n"},{"post_id":"ciz7s5lmq000594untz9fjxg2","category_id":"ciz7s5lmu000694untpdeitgo","_id":"ciz7s5loe000w94untmy35ayt"},{"post_id":"ciz7s5lnw000l94unzebqevk1","category_id":"ciz7s5lnh000e94unnlvi91rv","_id":"ciz7s5loq000y94unud16mdiy"},{"post_id":"ciz7s5lo1000o94unyx47e5jf","category_id":"ciz7s5lnh000e94unnlvi91rv","_id":"ciz7s5lor000z94unzsyvv751"},{"post_id":"ciz7s5lmv000794un4wrfp2nd","category_id":"ciz7s5lo0000n94untcm3s5da","_id":"ciz7s5los001094unig7363gi"},{"post_id":"ciz7s5lo4000q94unyjtk1ce2","category_id":"ciz7s5lnh000e94unnlvi91rv","_id":"ciz7s5lot001194unu9mcqdll"},{"post_id":"ciz7s5lo8000t94unp94h3vr0","category_id":"ciz7s5lnh000e94unnlvi91rv","_id":"ciz7s5lou001294undylnvlfd"},{"post_id":"ciz7s5ln1000994un4esb996b","category_id":"ciz7s5lnh000e94unnlvi91rv","_id":"ciz7s5lox001394un7uy28y5w"},{"post_id":"ciz7s5loa000v94unlew59tvt","category_id":"ciz7s5lnh000e94unnlvi91rv","_id":"ciz7s5loz001494unztgy720q"},{"post_id":"ciz7s5lna000b94unl5txq68v","category_id":"ciz7s5lnh000e94unnlvi91rv","_id":"ciz7s5lp1001594uny744t9h8"},{"post_id":"ciz7s5lpo001694un4yuil6wf","category_id":"ciz7s5lmc000294undqmlu2qh","_id":"ciz7s5lpr001794unxcg5yeu1"}],"PostTag":[],"Tag":[]}}